openapi: 3.0.3
info:
  title: Support API
  description: Zendesk Support API endpoints
  version: 2.0.0
servers:
- url: /
security:
- basicAuth: []
tags:
- name: Attachments
- name: Sessions
- name: Trigger Categories
- name: Tags
- name: Targets
- name: Target Failures
- name: Job Statuses
- name: Automations
- name: Tickets
- name: Lookup Relationships
- name: Dynamic Content
- name: Dynamic Content Item Variants
- name: Push Notification Devices
- name: Channel Framework
- name: Twitter Channel
- name: Organizations
- name: Triggers
- name: Custom Roles
- name: Incremental Export
- name: Account Settings
- name: Ticket Metrics
- name: Groups
- name: Group Memberships
- name: Incremental Skill Based Routing
- name: Organization Memberships
- name: Sharing Agreements
- name: Search
- name: Workspaces
- name: Skill Based Routing
- name: Resource Collections
- name: Macros
- name: Organization Subscriptions
- name: Support Addresses
- name: User Passwords
- name: User Identities
- name: Activity Stream
- name: Group SLA Policies
- name: SLA Policies
- name: Ticket Audits
- name: Ticket Metric Events
- name: Brands
- name: Users
- name: Satisfaction Reasons
- name: Ticket Forms
- name: Suspended Tickets
- name: Satisfaction Ratings
- name: Ticket Comments
- name: Requests
- name: Audit Logs
- name: Views
- name: Ticket Import
- name: Organization Fields
- name: User Fields
- name: Ticket Fields
- name: Ticket Skips
- name: Bookmarks
- name: Reseller
- name: Basics
- name: AssigneeFieldAssignableGroups
- name: AssigneeFieldAssignableAgents
- name: Custom Ticket Statuses
- name: Locales
- name: Custom Objects
- name: Custom Object Fields
- name: Custom Object Records
- name: Essentials Card
- name: Omnichannel Routing Queues
paths:
  /api/lotus/assignables/autocomplete.json:
    get:
      tags:
      - AssigneeFieldAssignableGroups
      - AssigneeFieldAssignableAgents
      summary: List assignable groups and agents based on query matched against name
      description: |
        List assignable groups and agents based on query matched against name

        #### Allowed For

        * Agents
      operationId: ListAssigneeFieldAssignableGroupsAndAgentsSearch
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/AssigneeFieldSearchValue'
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssigneeFieldAssignableGroupsAndAgentsSearchResponse'
              examples:
                default:
                  $ref: '#/components/examples/AssigneeFieldAssignableGroupsAndAgentsSearchResponseExample'
  /api/lotus/assignables/groups.json:
    get:
      tags:
      - AssigneeFieldAssignableAgents
      summary: List assignable groups on the AssigneeField
      description: |
        List assignable groups on the AssigneeField

        #### Allowed For

        * Agents
      operationId: ListAssigneeFieldAssignableGroups
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssigneeFieldAssignableGroupsResponse'
              examples:
                default:
                  $ref: '#/components/examples/AssigneeFieldAssignableGroupsResponseExample'
  /api/lotus/assignables/groups/{group_id}/agents.json:
    get:
      tags:
      - AssigneeFieldAssignableAgents
      summary: List assignable agents from a group on the AssigneeField
      description: |
        List assignable agents from a group on the AssigneeField

        #### Allowed For

        * Agents
      operationId: ListAssigneeFieldAssignableGroupAgents
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/GroupId'
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssigneeFieldAssignableGroupAgentsResponse'
              examples:
                default:
                  $ref: '#/components/examples/AssigneeFieldAssignableGroupAgentsResponseExample'
  /api/v2/{targetType}/{targetId}/relationship_fields/{fieldId}/{sourceType}:
    get:
      tags:
      - Lookup Relationships
      summary: Get sources by target
      description: |
        Returns a list of source objects whose values are populated with the id of a related target object.  For example,
        if you have a lookup field called "Success Manager" on a ticket, this endpoint can answer the question,
        "What tickets (sources) is this user (found by `target_type` and `target_id`)
        assigned as the 'Success Manager' (field referenced by `field_id`)?"

        #### Allowed For

        * Agents

        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).
      operationId: GetSourcesByTarget
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: targetType
        in: path
        description: |
          The type of object the relationship field is targeting.
          The options are "zen:user", "zen:ticket", "zen:organization", and "zen:custom_object:CUSTOM_OBJECT_KEY"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: zen:custom_object:apartment
      - name: targetId
        in: path
        description: |
          The id of the object the relationship field is targeting
        required: true
        style: simple
        explode: false
        schema:
          type: integer
        example: 1234
      - name: fieldId
        in: path
        description: |
          The id of the lookup relationship field
        required: true
        style: simple
        explode: false
        schema:
          type: integer
        example: 1234
      - name: sourceType
        in: path
        description: |
          The type of object the relationship field belongs to (example. ticket field belongs to a ticket object).
          The options are "zen:user", "zen:ticket", "zen:organization", and "zen:custom_object:CUSTOM_OBJECT_KEY"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: zen:custom_object:apartment
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReverseLookupResponse'
              examples:
                default:
                  $ref: '#/components/examples/ReverseLookupUsersResponseExample'
  /api/v2/account/settings:
    get:
      tags:
      - Account Settings
      summary: Show Settings
      description: |
        Shows the settings that are available for the account.

        #### Allowed For

        * Agents
      operationId: ShowAccountSettings
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSettingsResponse'
              examples:
                default:
                  $ref: '#/components/examples/AccountSettingsResponseExample'
    put:
      tags:
      - Account Settings
      summary: Update Account Settings
      description: |
        Updates settings for the account. See [JSON Format](#json-format) above for the settings you can update.

        #### Allowed For

        * Admins
      operationId: UpdateAccountSettings
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSettingsResponse'
              examples:
                default:
                  $ref: '#/components/examples/AccountSettingsResponseExample'
  /api/v2/accounts:
    post:
      tags:
      - Reseller
      summary: Create Trial Account
      operationId: CreateTrialAccount
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrialAccountResponse'
              examples:
                default:
                  $ref: '#/components/examples/TrialAccountResponseExample'
  /api/v2/accounts/available:
    get:
      tags:
      - Reseller
      summary: Verify Subdomain Availability
      description: |
        Zendesk Support credentials are not required to access this endpoint. You can use any Zendesk Support subdomain.

        Returns "true" if the subdomain is available.
      operationId: VerifySubdomainAvailability
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: subdomain
        in: query
        description: |
          Specify the name of the subdomain you want to verify. The name can't contain underscores, hyphens, or spaces
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: z3ndesk
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineResponse200'
              example:
                success: true
  /api/v2/activities:
    get:
      tags:
      - Activity Stream
      summary: List Activities
      description: |
        Lists ticket activities in the last 30 days affecting the agent making the request.
        Also sideloads the following arrays of user records:

        - actors - All actors involved in the listed activities
        - users - All users involved in the listed activities

        #### Pagination

        - Cursor pagination (recommended)
        - Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For

        * Agents
      operationId: ListActivities
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivitiesResponse'
              examples:
                default:
                  $ref: '#/components/examples/ActivitiesResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/ActivitySince'
  /api/v2/activities/{activity_id}:
    get:
      tags:
      - Activity Stream
      summary: Show Activity
      description: |
        Lists a specific activity.

        #### Allowed For

        * Agents
      operationId: ShowActivity
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityResponse'
              examples:
                default:
                  $ref: '#/components/examples/ActivityResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/ActivityId'
  /api/v2/activities/count:
    get:
      tags:
      - Activity Stream
      summary: Count Activities
      description: |-
        Returns an approximate count of ticket activities in the last 30 days affecting the agent making the request. If the count exceeds 100,000, the count will return a cached result. This cached result will update every 24 hours.

        The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.

        **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
        This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.

        #### Allowed For
        * Agents
      operationId: CountActivities
      responses:
        "200":
          description: Count of ticket activities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivitiesCountResponse'
              examples:
                default:
                  $ref: '#/components/examples/ActivitiesCountResponseExample'
  /api/v2/any_channel/channelback/report_error:
    post:
      tags:
      - Channel Framework
      summary: Report Channelback Error to Zendesk
      description: |
        #### Allowed For

        * Admins

        #### Request parameters

        The POST request takes a JSON object parameter which contains information about the
        problematic [channelback](/documentation/channel_framework/understanding-the-channel-framework/channelback/).

        | Name               | Type      | Required  | Comments
        | ------------------ | ----------| --------- | -------------------
        | instance_push_id   | string    | yes       | The ID of the account to which data will be pushed.  This was passed to the integration service when the administrator set up the account
        | external_id        | string    | yes       | Unique identifier of the external resource from the original channelback (string)
        | description        | string    | no        | A human readable description of the error
        | request_id         | string    | no        | A unique identifier for the request


        #### Response format

        The response does not include a response body
      operationId: ReportChannelbackError
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
  /api/v2/any_channel/push:
    post:
      tags:
      - Channel Framework
      summary: Push Content to Support
      description: |
        Pushes Channel framework content to Zendesk.

        #### Allowed For

        * Admins

        #### Request parameters

        The POST request takes a JSON object parameter which contains data about all
        the resources that the client is pushing.

        | Name               | Type      | Required  | Comments
        | ------------------ | ----------| --------- | -------------------
        | instance_push_id   | string    | yes       | The account ID where data will be pushed. This was passed to the integration service when the administrator set up the account
        | request_id         | string    | no        | A unique identifier for the push request
        | external_resources | array     | yes       | The [resources](#external_resource-object) to push

        #### external_resource object

        | Name               | Type                               | Max length | Mandatory | Comments
        |------------------- | ---------------------------------- |------------| --------- | ----------
        | external_id        | string                             | 255        | yes       | Unique identifier of the external resource. Must be ASCII characters
        | internal_note      | boolean                            |            | no        | If true creates a new internal note comment
        | message            | string                             | 65535      | yes       | Text to be converted to a ticket or comment
        | html_message       | string                             | 65535      | no        | HTML version of message
        | parent_id          | string                             | 511        | no        | Unique identifier of the external resource for which this is a response. Used to choose the correct thread. Responses may include `parent_id` or `thread_id`, but not both. See [Conversation threads](/documentation/channel_framework/understanding-the-channel-framework/pull_endpoint/#conversation-threads)
        | thread_id          | string                             | 255        | no        | Arbitrary identifier of the thread to which this item should belong. Responses may include `parent_id` or `thread_id`, but not both. See [Conversation threads](/documentation/channel_framework/understanding-the-channel-framework/pull_endpoint/#conversation-threads)
        | created_at         | string                             |            | yes       | When the resource was created in the origin system, as an ISO 8601 extended format date-time. Example: '2015-09-08T22:48:09Z'
        | author             | object                             |            | yes       | See [author object](#author-object) below
        | display_info       | array                              |            | no        | Array of integration-specific data used by apps to modify the agent UI. See [display_info object](#display_info-object) below
        | allow_channelback  | boolean                            |            | no        | If false, prevents the agent from making additional comments on the message in the Zendesk interface
        | fields             | array                              |            | no        | Array of ticket fields to set in Zendesk and their values. See [fields array](#fields-array)
        | file_urls          | array                              | 10         | no        | Array of files to be imported into Zendesk. See [file urls](/documentation/channel_framework/understanding-the-channel-framework/pull_endpoint/#file-urls) in the Channel framework docs

        #### author object

        | Name        | Type   | Max chars | Mandatory | Comments
        |------------ | ------ |---------- |---------- |-----------
        | external_id | string | 255       | yes       | Unique identifier of the user in the origin service
        | name        | string | 255       | no        | If not supplied, defaults to external id
        | image_url   | string | 255       | no        | URL to an image for the user
        | locale      | String | 255       | no        | The user's locale. Must be one of the supported [locales](/api-reference/ticketing/account-configuration/locales/#list-available-public-locales) in Zendesk
        | fields      | array  |           | no        | Array of items containing user field identifier ('id') and value of field ('value'.)  For system fields ('notes' or 'details'), the identifier is the English name. For custom fields, the identifier may be the ID or the name

        #### display_info object

        | Name | Type   | Max chars | Mandatory | Comments
        |----- | ------ |---------- |---------- |-----------
        | type | string | 255       | yes       | Globally unique type identifier defined by the integration origin service. Examples: a GUID or URI
        | data | string | 65535     | yes       | JSON data containing display hints

        #### fields array

        The `fields` array lists ticket fields to set in Zendesk and their values. Each item consists of a field identifier (`id`) and a value (`value`) for the field. For Zendesk system fields such as `subject`, the identifier is the English name. For custom fields, the identifier may be a field ID or a name. See [Ticket Fields](/api-reference/ticketing/tickets/ticket_fields/).

        The `fields` array can only set ticket values on ticket creation, not on ticket updates.

        #### Response format

        The response is a JSON object containing a single key:

        | Name      | Type     | Comments
        | --------- | -------- | -------------------
        | results   | array    | An array of [result objects](#result-object)

        The `results` array contains an entry for each item in the incoming `external_resources` array, in the
        same order.  For example, if you call `push` with 3 external resources, a successful response will include
        `results` with three entries, corresponding to your 3 resources.

        #### result object

        | Name                 | Type                           | Comments
        | -------------------- | ------------------------------ | -------------------
        | external_resource_id | string                         | The external ID of the resource, as passed in
        | status               | object                         | The status of the import for the indicated resource. See [status object](#status-object)

        #### status object

        | Name        | Type   | Comments
        | ----------- | ------ | -------------------
        | code        | string | A code indicating the status of the import of the resource, as described in [status codes](#status-codes)
        | description | string | In the case of an exception, a description of the exception. Otherwise, not present.

        #### status codes

        | Key                                       | Description
        | ----------------------------------------- | ----------------
        | success                                   | The external resource was successfully converted to a ticket or comment
        | already_imported                          | Reimport of the external resource was skipped due to a pre-existing ticket or comment for the resource
        | could_not_locate_parent_external_resource | The parent resource, as identified by parent_id in the [request](#request-parameters), could not be found. The unrecognized parent ID is returned in the description of the [status](#status-object)
        | processing_error                          | An internal exception occurred while processing the resource. See `description` in the [status object](#status-object)
        | halted                                    | This resource was not processed because processing of previous resources failed
      operationId: PushContentToSupport
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelFrameworkPushResultsResponse'
              examples:
                default:
                  $ref: '#/components/examples/ChannelFrameworkPushResultsResponseExample'
  /api/v2/any_channel/validate_token:
    post:
      tags:
      - Channel Framework
      summary: Validate Token
      description: |
        #### Allowed For

        * Admins

        #### Request parameters

        The POST request takes a JSON object parameter which contains the token to be validated.

        | Name               | Type      | Required  | Comments
        | ------------------ | ----------| --------- | -------------------
        | instance_push_id   | string    | yes       | The ID of the account to which data will be pushed. This was passed to the integration service when the administrator set up the account
        | request_id         | string    | no        | A unique identifier for the push request

        #### Response format

        The response body is empty.
      operationId: ValidateToken
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
  /api/v2/attachments/{attachment_id}:
    get:
      tags:
      - Attachments
      summary: Show Attachment
      description: |
        Shows attachment details. You can get the value of the `attachment_id` parameter by listing the ticket's comments.
        See [List Comments](/api-reference/ticketing/tickets/ticket_comments/#list-comments). Each comment
        in the list has an `attachments` list that specifies an `id` for each attachment.


         #### Allowed for

         * Agents
      operationId: ShowAttachment
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/AttachmentId'
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentResponse'
              examples:
                default:
                  $ref: '#/components/examples/AttachmentResponseExample'
    put:
      tags:
      - Attachments
      summary: Update Attachment for Malware
      description: |
        Toggles enabling or restricting agent access to attachments with detected malware.

        #### Allowed For

        * Admins
      operationId: UpdateAttachment
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/AttachmentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttachmentUpdateRequest'
            examples:
              default:
                $ref: '#/components/examples/AttachmentUpdateRequestExample'
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentResponse'
              examples:
                default:
                  $ref: '#/components/examples/AttachmentResponseExample'
  /api/v2/audit_logs:
    get:
      tags:
      - Audit Logs
      summary: List Audit Logs
      description: |
        #### Allowed For

        * Admins on accounts that have audit log access

        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.
      operationId: ListAuditLogs
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: "filter[source_type]"
        in: query
        description: "Filter audit logs by the source type. For example, user or rule"
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: filterSourceType
      - name: "filter[source_id]"
        in: query
        description: "Filter audit logs by the source id. Requires `filter[source_type]`\
          \ to also be set"
        required: false
        style: form
        explode: true
        schema:
          type: integer
        x-ballerina-name: filterSourceId
      - name: "filter[actor_id]"
        in: query
        description: Filter audit logs by the actor id
        required: false
        style: form
        explode: true
        schema:
          type: integer
        x-ballerina-name: filterActorId
      - name: "filter[ip_address]"
        in: query
        description: Filter audit logs by the ip address
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: filterIpAddress
      - name: "filter[created_at]"
        in: query
        description: "Filter audit logs by the time of creation. When used, you must\
          \ specify `filter[created_at]` twice in your request, first with the start\
          \ time and again with an end time"
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: filterCreatedAt
      - name: "filter[action]"
        in: query
        description: Filter audit logs by the action
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: filterAction
      - name: sort_by
        in: query
        description: Offset pagination only. Sort audit logs. Default is `sort_by=created_at`
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: sortBy
      - name: sort_order
        in: query
        description: Offset pagination only. Sort audit logs. Default is `sort_order=desc`
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: sortOrder
      - name: sort
        in: query
        description: Cursor pagination only. Sort audit logs. Default is `sort=-created_at`
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogsResponse'
              examples:
                default:
                  $ref: '#/components/examples/AuditLogsResponseExample'
  /api/v2/audit_logs/{audit_log_id}:
    get:
      tags:
      - Audit Logs
      summary: Show Audit Log
      description: |
        #### Allowed For

        * Admins on accounts that have audit-log access
      operationId: ShowAuditLog
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogResponse'
              examples:
                default:
                  $ref: '#/components/examples/AuditLogResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/AuditLogId'
  /api/v2/audit_logs/export:
    post:
      tags:
      - Audit Logs
      summary: Export Audit Logs
      description: |
        #### Allowed For

        * Admins on accounts that have audit log access
      operationId: ExportAuditLogs
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: "filter[source_type]"
        in: query
        description: "Filter audit logs by the source type. For example, user or rule"
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: filterSourceType
      - name: "filter[source_id]"
        in: query
        description: "Filter audit logs by the source id. Requires `filter[source_type]`\
          \ to also be set"
        required: false
        style: form
        explode: true
        schema:
          type: integer
        x-ballerina-name: filterSourceId
      - name: "filter[actor_id]"
        in: query
        description: Filter audit logs by the actor id
        required: false
        style: form
        explode: true
        schema:
          type: integer
        x-ballerina-name: filterActorId
      - name: "filter[ip_address]"
        in: query
        description: Filter audit logs by the ip address
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: filterIpAddress
      - name: "filter[created_at]"
        in: query
        description: "Filter audit logs by the time of creation. When used, you must\
          \ specify `filter[created_at]` twice in your request, first with the start\
          \ time and again with an end time"
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: filterCreatedAt
      - name: "filter[action]"
        in: query
        description: Filter audit logs by the action
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: filterAction
      responses:
        "202":
          description: Accepted description
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
  /api/v2/autocomplete/tags:
    get:
      tags:
      - Tags
      summary: Search Tags
      description: |
        Returns an array of registered and recent tag names that start with the characters specified in the `name` query parameter. You must specify at least 2 characters.

        #### Pagination

        * Offset pagination only

        See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).


        #### Allowed For

        * Agents
      operationId: AutocompleteTags
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsByObjectIdResponse'
              examples:
                default:
                  $ref: '#/components/examples/TagsAutocompleteResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TagNameFragment'
  /api/v2/automations:
    get:
      tags:
      - Automations
      summary: List Automations
      description: |
        Lists all automations for the current account.

        #### Allowed For

        * Agents

        #### Available Parameters

        You can pass in any combination of the following optional filters:

        | Name       | Type    | Comment
        | ---------- | ------- | -------
        | active     | boolean | Only active automations if true, inactive automations if false
        | sort_by    | string  | Possible values are "alphabetical", "created_at", "updated_at", "usage_1h", "usage_24h", or "usage_7d". Defaults to "position"
        | sort_order | string  | One of "asc" or "desc". Defaults to "asc" for alphabetical and position sort, "desc" for all others

        #### Sideloads

        The following sideloads are supported. The usage sideloads are only supported on the Support Professional or Suite Growth plan or above.

        | Name             | Will sideload
        | ---------------- | -------------
        | app_installation | The app installation that requires each automation, if present
        | permissions      | The permissions for each automation
        | usage_1h         | The number of times each automation has been used in the past hour
        | usage_24h        | The number of times each automation has been used in the past day
        | usage_7d         | The number of times each automation has been used in the past week
        | usage_30d        | The number of times each automation has been used in the past thirty days

        #### Pagination

        - Cursor pagination (recommended)
        - Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.
      operationId: ListAutomations
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationsResponse'
              examples:
                default:
                  $ref: '#/components/examples/AutomationsResponseExample'
    post:
      tags:
      - Automations
      summary: Create Automation
      description: |
        Creates an automation.

        New automations must be unique and have at least one condition that is true only once or an action that nullifies at least one of the conditions. Active automations can have overlapping conditions but can't be identical.

        The request must include the following conditions in the `all` array:

        - At least one time-based condition
        - At least one condition that checks one of the following fields: `status`, `type`, `group_id`, `assignee_id`, or `requester_id`.

        #### Allowed For

        * Agents
      operationId: CreateAutomation
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationResponse'
              examples:
                default:
                  $ref: '#/components/examples/AutomationCreateResponseExample'
  /api/v2/automations/{automation_id}:
    get:
      tags:
      - Automations
      summary: Show Automation
      description: |
        #### Allowed For

        * Agents
      operationId: ShowAutomation
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationResponse'
              examples:
                default:
                  $ref: '#/components/examples/AutomationResponseExample'
    put:
      tags:
      - Automations
      summary: Update Automation
      description: |
        Updates an automation.

        Updated automations must be unique and have at least one condition that is true only once or an action that nullifies at least one of the conditions. Active automations can have overlapping conditions but can't be identical.

        The request must include the following conditions in the `all` array:
        - At least one time-based condition
        - At least one condition that checks one of the following fields: 'status', 'type', 'group_id', 'assignee_id', or 'requester_id'

        **Note**: Updating a condition or action updates both the `conditions` and `actions` arrays, clearing all existing values of both arrays. Include all your conditions and actions when updating any condition or action.
        **Note**: You might be restricted from updating some default automations.

        #### Allowed For

        * Agents
      operationId: UpdateAutomation
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationResponse'
              examples:
                default:
                  $ref: '#/components/examples/AutomationResponseExample'
    delete:
      tags:
      - Automations
      summary: Delete Automation
      description: |
        **Note**: You might be restricted from deleting some default automations.

        #### Allowed For

        * Agents
      operationId: DeleteAutomation
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/AutomationId'
  /api/v2/automations/active:
    get:
      tags:
      - Automations
      summary: List Active Automations
      description: |
        Lists all active automations.

        #### Allowed For

        * Agents

        #### Available Parameters

        You can pass in any combination of the following optional filters:

        | Name       | Type   | Comment
        | ---------- | ------ | -------
        | sort_by    | string | Possible values are "alphabetical", "created_at", "updated_at", "usage_1h", "usage_24h", or "usage_7d". Defaults to "position"
        | sort_order | string | One of "asc" or "desc". Defaults to "asc" for alphabetical and position sort, "desc" for all others

        #### Sideloads

        The following sideloads are supported:

        | Name             | Will sideload
        | ---------------- | -------------
        | app_installation | The app installation that requires each automation, if present
        | permissions      | The permissions for each automation
        | usage_1h         | The number of times each automation has been used in the past hour
        | usage_24h        | The number of times each automation has been used in the past day
        | usage_7d         | The number of times each automation has been used in the past week
        | usage_30d        | The number of times each automation has been used in the past thirty days
      operationId: ListActiveAutomations
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationsResponse'
              examples:
                default:
                  $ref: '#/components/examples/AutomationsResponseExample'
  /api/v2/automations/destroy_many:
    delete:
      tags:
      - Automations
      summary: Bulk Delete Automations
      description: |
        Deletes the automations corresponding to the provided comma-separated list of IDs.

        **Note**: You might be restricted from deleting some default automations. If included in a bulk deletion, the unrestricted automations will be deleted.

        #### Allowed For

        * Agents

        #### Request Parameters

        The DELETE request takes one parameter, an `ids` object that lists the automations to delete.

        | Name | Description
        | ---- | -----------
        | ids  | The IDs of the automations to delete

        #### Example request

        ```js
        {
          "ids": "25,23,27,22"
        }
        ```
      operationId: BulkDeleteAutomations
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: ids
        in: query
        description: The IDs of the automations to delete
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
      responses:
        "204":
          description: No Content response
  /api/v2/automations/search:
    get:
      tags:
      - Automations
      summary: Search Automations
      description: |
        #### Pagination

        * Offset pagination only

        See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).

        #### Allowed For

        * Agents

        #### Sideloads

        The following sideloads are supported. For more information, see [Side-loading](/documentation/ticketing/using-the-zendesk-api/side_loading/).

        | Name             | Will sideload
        | ---------------- | -------------
        | app_installation | The app installation that requires each automation, if present
        | permissions      | The permissions for each automation
        | usage_1h         | The number of times each automation has been used in the past hour
        | usage_24h        | The number of times each automation has been used in the past day
        | usage_7d         | The number of times each automation has been used in the past week
        | usage_30d        | The number of times each automation has been used in the past thirty days
      operationId: SearchAutomations
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationsResponse'
              examples:
                default:
                  $ref: '#/components/examples/AutomationsSearchResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/AutomationSearchQuery'
    - $ref: '#/components/parameters/AutomationActive'
    - $ref: '#/components/parameters/AutomationSortBy'
    - $ref: '#/components/parameters/AutomationSortOrder'
    - $ref: '#/components/parameters/AutomationInclude'
  /api/v2/automations/update_many:
    put:
      tags:
      - Automations
      summary: Update Many Automations
      description: |
        **Note**: You might be restricted from updating some default automations. If included in a bulk update, the unrestricted automations will be updated.

        #### Allowed For

        * Agents

        #### Request Parameters

        The PUT request expects an `automations` object that lists the automations to update.

        Each automation may have the following properties:

        | Name     | Mandatory | Description
        | -------- | --------- | -----------
        | id       | yes       | The ID of the automation to update
        | position | no        | The new position of the automation
        | active   | no        | The active status of the automation (true or false)

        #### Example Request

        ```js
        {
          "automations": [
            {"id": 25, "position": 3},
            {"id": 23, "position": 5},
            {"id": 27, "position": 9},
            {"id": 22, "position": 7}
          ]
        }
        ```
      operationId: UpdateManyAutomations
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationsResponse'
              examples:
                default:
                  $ref: '#/components/examples/AutomationsUpdateManyResponseExample'
  /api/v2/bookmarks:
    get:
      tags:
      - Bookmarks
      summary: List Bookmarks
      description: |-
        #### Allowed For
        - Agents
      operationId: ListBookmarks
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarksResponse'
              examples:
                default:
                  $ref: '#/components/examples/BookmarksResponse'
    post:
      tags:
      - Bookmarks
      summary: Create Bookmark
      description: |-
        #### Allowed For
        - Agents
      operationId: CreateBookmark
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkCreateRequest'
            examples:
              default:
                $ref: '#/components/examples/BookmarkCreateRequest'
      responses:
        "200":
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarkResponse'
              examples:
                default:
                  $ref: '#/components/examples/BookmarkResponse'
        "201":
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarkResponse'
              examples:
                default:
                  $ref: '#/components/examples/BookmarkResponse'
  /api/v2/bookmarks/{bookmark_id}:
    delete:
      tags:
      - Bookmarks
      summary: Delete Bookmark
      description: |-
        #### Allowed For
        - Agents (own bookmarks only)

        If the bookmark already exists with a specified ticket id, the response status will be `http Status: 200 OK`.
      operationId: DeleteBookmark
      responses:
        "204":
          description: No content
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/BookmarkId'
  /api/v2/brands:
    get:
      tags:
      - Brands
      summary: List Brands
      description: |-
        Returns a list of all brands for your account sorted by name.

        #### Allowed for

        * Admins, Agents

        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).
      operationId: ListBrands
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandsResponse'
              examples:
                default:
                  $ref: '#/components/examples/BrandsResponseExample'
    post:
      tags:
      - Brands
      summary: Create Brand
      description: |-
        #### Allowed for
        - Admins
      operationId: CreateBrand
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandCreateRequest'
            examples:
              default:
                $ref: '#/components/examples/BrandCreateRequestExample'
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandResponse'
              examples:
                default:
                  $ref: '#/components/examples/BrandResponseExample'
  /api/v2/brands/{brand_id}:
    get:
      tags:
      - Brands
      summary: Show a Brand
      description: |-
        Returns a brand for your account.

        #### Allowed for

        * Admins, Agents
      operationId: ShowBrand
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/BrandId'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandResponse'
              examples:
                default:
                  $ref: '#/components/examples/BrandResponseExample'
    put:
      tags:
      - Brands
      summary: Update a Brand
      description: |-
        Returns an updated brand.

        #### Allowed for
        * Admins

        #### Updating a Brand's Image
        A brand image can be updated by uploading a local file using the update brand endpoint. See the **Using curl** sections below for more information.
      operationId: UpdateBrand
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/BrandId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandUpdateRequest'
            examples:
              default:
                $ref: '#/components/examples/BrandUpdateRequestExample'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandResponse'
              examples:
                default:
                  $ref: '#/components/examples/BrandResponseExample'
            image/jpg: {}
            image/png: {}
    delete:
      tags:
      - Brands
      summary: Delete a Brand
      description: |-
        Deletes a brand.

        #### Allowed for
        - Admins
      operationId: DeleteBrand
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/BrandId'
      responses:
        "204":
          description: No Content response
  /api/v2/brands/{brand_id}/check_host_mapping:
    get:
      tags:
      - Brands
      summary: Check Host Mapping Validity for an Existing Brand
      description: |-
        Returns a JSON object determining whether a host mapping is valid for the given brand.

        #### Allowed for
        - Admins
      operationId: CheckHostMappingValidityForExistingBrand
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/BrandId'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostMappingObject'
              examples:
                default:
                  $ref: '#/components/examples/HostMappingResponseValidExample'
                invalidCNAMEExample:
                  $ref: '#/components/examples/HostMappingResponseInvalidCNAMEExample'
                wrongCNAMEExample:
                  $ref: '#/components/examples/HostMappingResponseWrongCNAMEExample'
  /api/v2/brands/check_host_mapping:
    get:
      tags:
      - Brands
      summary: Check Host Mapping Validity
      description: |-
        Returns a JSON object determining whether a host mapping is valid for a given subdomain.

        #### Allowed for

        * Admins
      operationId: CheckHostMappingValidity
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/HostMapping'
      - $ref: '#/components/parameters/Subdomain'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostMappingObject'
              examples:
                default:
                  $ref: '#/components/examples/HostMappingResponseValidExample'
                invalidCNAMEExample:
                  $ref: '#/components/examples/HostMappingResponseInvalidCNAMEExample'
                wrongCNAMEExample:
                  $ref: '#/components/examples/HostMappingResponseWrongCNAMEExample'
  /api/v2/channels/twitter/monitored_twitter_handles:
    get:
      tags:
      - Twitter Channel
      summary: List Monitored Twitter Handles
      description: |
        #### Allowed For

        * Admins
        * Agents
      operationId: ListMonitoredTwitterHandles
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TwitterChannelsResponse'
              examples:
                default:
                  $ref: '#/components/examples/TwitterChannelsResponseExample'
  /api/v2/channels/twitter/monitored_twitter_handles/{monitored_twitter_handle_id}:
    get:
      tags:
      - Twitter Channel
      summary: Show Monitored Twitter Handle
      description: |
        #### Allowed For

        * Admins
        * Agents
      operationId: ShowMonitoredTwitterHandle
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TwitterChannelResponse'
              examples:
                default:
                  $ref: '#/components/examples/TwitterChannelResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/MonitoredTwitterHandleId'
  /api/v2/channels/twitter/tickets:
    post:
      tags:
      - Twitter Channel
      summary: Create Ticket from Tweet
      description: |
        Turns a tweet into a ticket. You must provide the tweet id as well as the id of a monitored twitter handle configured for your account.

        The submitter of the ticket is set to be the user submitting the API request.

        #### Allowed For

        * Agents
      operationId: CreateTicketFromTweet
      responses:
        "201":
          description: description
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
  /api/v2/channels/twitter/tickets/{comment_id}/statuses:
    get:
      tags:
      - Twitter Channel
      summary: List Twicket statuses
      description: |
        #### Allowed For

        * Agents
      operationId: GettingTwicketStatus
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: ids
        in: query
        description: Optional comment ids to retrieve tweet information for only particular
          comments
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "1,3,5"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TwitterChannelTwicketStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/TwitterChannelTwicketStatusResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/CommentId'
  /api/v2/channels/voice/agents/{agent_id}/tickets/{ticket_id}/display:
    post:
      tags:
      - Basics
      summary: Open Ticket in Agent's Browser
      description: |-
        Allows you to instruct an agent's browser to open a ticket.

        When the message is successfully delivered to an agent's browser:

        ```http
        Status: 200 OK
        ```

        When `agent_id` or `ticket_id` is invalid:

        ```http
        Status: 404 Not Found
        ```

        #### Allowed For
        * Agents
      operationId: OpenTicketInAgentBrowser
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/AgentId'
      - $ref: '#/components/parameters/TicketId'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: string
                description: empty
                example: ""
              example: ""
        "404":
          description: When the `agent_id` or `ticket_id` is invalid
          content:
            application/json:
              schema:
                type: string
                description: Invalid attribute
                example: ""
              example: ""
  /api/v2/channels/voice/agents/{agent_id}/users/{user_id}/display:
    post:
      tags:
      - Basics
      summary: Open a User's Profile in an Agent's Browser
      description: |-
        Allows you to instruct an agent's browser to open a user's profile.

        When the message is successfully delivered to an agent's browser:

        ```http
        Status: 200 OK
        ```

        When `agent_id` or `user_id` is invalid:

        ```http
        Status: 404 Not Found
        ```

        #### Allowed For
        * Agents
      operationId: OpenUsersProfileInAgentBrowser
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/AgentId'
      - $ref: '#/components/parameters/UserId'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: string
                description: empty
                example: ""
              example: ""
        "404":
          description: When the `agent_id` or `user_id` is invalid
          content:
            application/json:
              schema:
                type: string
                description: Invalid attribute
                example: ""
              example: ""
  /api/v2/channels/voice/tickets:
    post:
      tags:
      - Basics
      summary: Create Ticket or Voicemail Ticket
      description: |-
        #### Allowed For
        * Agents

        ### Creating tickets

        #### Introduction

        Creating tickets using Talk Partner Edition follows the same conventions as the Create Ticket endpoint. See [Create Ticket](/api-reference/ticketing/tickets/tickets/#create-ticket).

        #### Request parameters

        The POST request takes a mandatory `ticket` object that lists the values to set when the ticket is created.
        You may also include an optional `display_to_agent` value such as the ID of the agent that will see the newly created ticket.

        Tickets created using this endpoint must have a `via_id` parameter. See the following
        section for possible values.

        #### Zendesk Talk Integration Via IDs

        Tickets created using this endpoint must have one of the following `via_id` parameters:

        | ID       | Description
        | ---------| -------------
        | 44       | Voicemail
        | 45       | Phone call (inbound)
        | 46       | Phone call (outbound)

        ### Creating voicemail tickets
        #### Request parameters

        The POST request takes a mandatory `ticket` object that lists the values to set when the ticket is created.
        The ticket must have a `voice_comment` with the following values:

        | Name               | Type                  | Comment
        | ------------------ | ----------------------| -------
        | from               | string                | Incoming phone number
        | to                 | string                | Dialed phone number
        | recording_url      | string                | URL of the recording
        | started_at         | date                  | [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) timestamp of the call starting time
        | call_duration      | integer               | Duration in seconds of the call
        | answered_by_id     | integer               | The agent who answered the call
        | transcription_text | string                | Transcription of the call (optional)
        | location           | string                | Location of the caller (optional)
      operationId: CreateTicketOrVoicemailTicket
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/AgentId'
      - $ref: '#/components/parameters/TicketId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketCreateVoicemailTicketRequest'
            examples:
              default:
                $ref: '#/components/examples/TicketCreateTicketViaTalkRequestExample'
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketResponseExample'
        "404":
          description: When the `agent_id` or `ticket_id` is invalid
          content:
            application/json:
              schema:
                type: string
                description: Invalid attribute
                example: ""
              example: ""
  /api/v2/chat_file_redactions/{ticket_id}:
    put:
      tags:
      - Ticket Comments
      summary: Redact Chat Comment Attachment
      description: |
        Permanently removes one or more chat attachments from a chat ticket.

        **Note**: This does not work on active chats. For chat tickets that predate March 2020, consider using [Redact Ticket Comment In Agent Workspace](#redact-ticket-comment-in-agent-workspace).

        #### Allowed For

        - Agents

        [Agent Workspace](https://support.zendesk.com/hc/en-us/articles/360024218473) must enabled for the account. Deleting tickets must be enabled for agents.

        #### Request Body Properties

        | Name         | Type    | Required | Description                                                                                                                                          |
        | ------------ | ------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- |
        | chat_id      | string  | true     | The `chat_id` in the `ChatStartedEvent` event in the ticket audit. See [Ticket Audits](/api-reference/ticketing/tickets/ticket_audits)               |
        | chat_indexes | array   | true     | The array of `chat_index` in the `ChatFileAttachment` event in the ticket audit. See [Ticket Audits](/api-reference/ticketing/tickets/ticket_audits) |

        To get the required body properties, make a request to the [Ticket Audits](/api-reference/ticketing/tickets/ticket_audits) endpoint. Example response:

        ```http
        Status 200 OK
        {
          "audits": [
            "events": [
              {
                "id": 1932802680168,
                "type": "ChatStartedEvent",
                "value": {
                  "visitor_id": "10502823-16EkM3T6VNq7KMd",
                  "chat_id": "2109.10502823.Sjuj2YrBpXwei",
                  "history": [
                    {
                      "chat_index": 0,
                      "type": "ChatFileAttachment",
                      "filename": "image1.jpg"
                    },
                    {
                      "chat_index": 1,
                      "type": "ChatFileAttachment",
                      "filename": "image2.jpg"
                    }
                  ]
                }
              }
            ]
          ]
        }
        ```
      operationId: RedactChatCommentAttachment
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketChatCommentRedactionResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketChatCommentAttachmentRedactionResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TicketId'
  /api/v2/chat_redactions/{ticket_id}:
    put:
      tags:
      - Ticket Comments
      summary: Redact Chat Comment
      description: "Permanently removes words or strings from a chat ticket's comment.\
        \ \n\nWrap `<redact>` tags around the content in the chat comment you want\
        \ redacted. Example: \n\n```json\n{\n  \"text\": \"My ID number is <redact>847564</redact>!\"\
        \n}\n```\n\nThe characters contained in the tag will be replaced by the ▇\
        \ symbol.\n\n**Note**: This does not work on active chats. For chat tickets\
        \ that predate March 2020, consider using [Redact Ticket Comment In Agent\
        \ Workspace](#redact-ticket-comment-in-agent-workspace).\n\n#### Allowed For\n\
        \n- Agents\n\n[Agent Workspace](https://support.zendesk.com/hc/en-us/articles/360024218473)\
        \ must enabled for the account. Deleting tickets must be enabled for agents.\n\
        \n#### Request Body Properties\n\n| Name                     | Type    | Required\
        \ | Description                                                          \
        \                                                                        \
        \                           |\n| ------------------------ | ------- | --------\
        \ | -----------------------------------------------------------------------------------------------------------------------------------------------------------------------\
        \ |\n| chat_id                  | string  | true     | The `chat_id` in the\
        \ `ChatStartedEvent` event in the ticket audit. See [Ticket Audits](/api-reference/ticketing/tickets/ticket_audits)\
        \                                  |\n| chat_index               | integer\
        \ | true     | The `chat_index` in the `ChatMessage` event in the ticket audit.\
        \ See [Ticket Audits](/api-reference/ticketing/tickets/ticket_audits)    \
        \                                |\n| text                     | string  |\
        \ true     | The `message` in the `ChatMessage` event in the ticket audit.\
        \ See [Ticket Audits](/api-reference/ticketing/tickets/ticket_audits).  Wrap\
        \ `message` with `<redact>` tags |\n\nTo get the required body properties,\
        \ make a request to the [Ticket Audit](/api-reference/ticketing/tickets/ticket_audits)\
        \ endpoint. Example response:\n\n```http\nStatus 200 OK\n{\n  \"audits\":\
        \ [\n    \"events\": [\n      {\n        \"id\": 1932802680168,\n        \"\
        type\": \"ChatStartedEvent\",\n        \"value\": {\n          \"visitor_id\"\
        : \"10502823-16EkM3T6VNq7KMd\",\n          \"chat_id\": \"2109.10502823.Sjuj2YrBpXwei\"\
        ,\n          \"history\": [\n            {\n              \"chat_index\":\
        \ 0,\n              \"type\": \"ChatMessage\",\n              \"message\"\
        : \"My ID number is 847564!\"\n            }\n          ]\n        }\n   \
        \   }\n    ]\n  ]\n}\n```\n"
      operationId: RedactChatComment
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketChatCommentRedactionResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketChatCommentRedactionResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TicketId'
  /api/v2/comment_redactions/{ticket_comment_id}:
    put:
      tags:
      - Ticket Comments
      summary: Redact Ticket Comment In Agent Workspace
      description: "Redaction allows you to permanently remove words, strings, or\
        \ attachments from a ticket comment.\n\nIn the `html_body` of the comment,\
        \ wrap the content you want redacted in `<redact>` tags. Example:\n\n```json\n\
        {\n  \"html_body\": \"<div class=\\\"zd-comment\\\" dir=\\\"auto\\\">My ID\
        \ number is <redact>847564</redact>!</div>\",\n  \"ticket_id\":100\n}\n```\n\
        \nThe characters in the redact tag will be replaced by the ▇ symbol.\n\nTo\
        \ redact HTML elements such inline images, anchor tags, and links, add the\
        \ `redact` tag attribute to the element as well as the `<redact>` tag to inner\
        \ text, if any. Example: \n\n`<a href=\"http://example.com\" redact><redact>some\
        \ link</redact></a>`\n\nThe `redact` attribute only redacts the tag. Any inner\
        \ text will be left behind if not enclosed in a `<redact>` tag.\n\nRedaction\
        \ is permanent and can not be undone. Data is permanently deleted from Zendesk\
        \ servers with no way to recover it.\n\nThis endpoint provides all the same\
        \ functionality that the [Redact String in Comment](/api-reference/ticketing/tickets/ticket_comments/#redact-string-in-comment)\
        \ endpoint provides, plus:\n\n- Redaction of comments in closed tickets\n\n\
        - Redaction of comments in archived tickets\n\n- Redaction of formatted text\
        \ (bold, italics, hyperlinks)\n\n**Limitations**: When content is redacted\
        \ from an email comment, the content is also redacted from the original email\
        \ through a background job. It may take a while for the changes to be completed.\n\
        \n**Note**: We recommend using this endpoint instead of the [Redact String\
        \ in Comment](/api-reference/ticketing/tickets/ticket_comments/#redact-string-in-comment)\
        \ endpoint, which will eventually be deprecated.\n\n#### Allowed For\n\n-\
        \ Agents\n\n[Agent Workspace](https://support.zendesk.com/hc/en-us/articles/360024218473)\
        \ must be enabled on the account. For professional accounts, deleting tickets\
        \ must be enabled for agents. On Enterprise accounts, you can assign agents\
        \ to a custom role with permissions to redact ticket content.\n\n#### Request\
        \ Body Properties\n\n| Name                     | Type    | Required | Description\
        \                                                                        \
        \                                                              |\n| -------------------------|\
        \ ------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------\
        \ |\n| ticket_id                | integer | true     | The ID of the ticket\
        \                                                                        \
        \                                                     |\n| html_body     \
        \           | string  | false    | The `html_body` of the comment containing\
        \ `<redact>` tags or `redact` attributes                                 \
        \          |\n| external_attachment_urls | array   | false    | Array of attachment\
        \ URLs belonging to the comment to be redacted. See [`content_url` property\
        \ of Attachment](/api-reference/ticketing/tickets/ticket-attachments/) |\n"
      operationId: RedactTicketCommentInAgentWorkspace
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketCommentResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketCommentsRedactionInAgentWorkspaceResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TicketCommentId'
  /api/v2/custom_objects:
    get:
      tags:
      - Custom Objects
      summary: List Custom Objects
      description: |-
        Lists all undeleted custom objects for the account
        #### Allowed For
        * Agents
      operationId: ListCustomObjects
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectsResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomObjectsResponseExample'
    post:
      tags:
      - Custom Objects
      summary: Create Custom Object
      description: |
        Creates an object describing all the properties required to create a custom object record
        #### Allowed For
        * Admins
      operationId: CreateCustomObject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomObjectsCreateRequest'
            examples:
              default:
                $ref: '#/components/examples/CustomObjectsCreateRequestExample'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomObjectsCreateResponseExample'
  /api/v2/custom_objects/{custom_object_key}:
    get:
      tags:
      - Custom Objects
      summary: Show Custom Object
      description: |
        Returns an object with the specified key
        #### Allowed For
        * Agents
      operationId: ShowCustomObject
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      responses:
        "200":
          description: Custom Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomObjectsCreateResponseExample'
    delete:
      tags:
      - Custom Objects
      summary: Delete Custom Object
      description: |-
        Permanently deletes the custom object with the specified key
        #### Allowed For
        * Admins
      operationId: DeleteCustomObject
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      responses:
        "204":
          description: No content response
    patch:
      tags:
      - Custom Objects
      summary: Update Custom Object
      description: |-
        Updates an individual custom object. The updating rules are as follows:
        * Takes a `custom_object` object that specifies the properties to update
        * The `key` property cannot be updated
        #### Allowed For
        * Admins
      operationId: UpdateCustomObject
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomObjectsCreateResponseExample'
  /api/v2/custom_objects/{custom_object_key}/fields:
    get:
      tags:
      - Custom Object Fields
      summary: List Custom Object Fields
      description: |-
        Lists all undeleted custom fields for the specified object.

        #### Allowed For
        * Agents

        #### Pagination
        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).
      operationId: ListCustomObjectFields
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      - $ref: '#/components/parameters/IncludeStandardFields'
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectFieldsResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomObjectFieldsResponseExample'
    post:
      tags:
      - Custom Object Fields
      summary: Create Custom Object Field
      description: |
        Creates any of the following custom field types:

        * text (default when no "type" is specified)
        * textarea
        * checkbox
        * date
        * integer
        * decimal
        * regexp
        * dropdown
        * lookup

        See [About custom field types](https://support.zendesk.com/hc/en-us/articles/203661866) in Zendesk help.

        #### Allowed For

        * Admins
      operationId: CreateCustomObjectField
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomObjectFieldsCreateRequest'
            examples:
              default:
                $ref: '#/components/examples/CustomObjectFieldsCreateRequestExample'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectFieldResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomObjectFieldCreateResponseExample'
  /api/v2/custom_objects/{custom_object_key}/fields/{custom_object_field_key_or_id}:
    get:
      tags:
      - Custom Object Fields
      summary: Show Custom Object Field
      description: |
        Returns a custom field for a specific object using a provided key or id of the field.
        #### Allowed For
        * Agents
      operationId: ShowCustomObjectField
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      - $ref: '#/components/parameters/CustomObjectFieldKeyOrId'
      responses:
        "200":
          description: Custom Object Field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectFieldResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomObjectFieldCreateResponseExample'
    delete:
      tags:
      - Custom Object Fields
      summary: Delete Custom Object Field
      description: |-
        Deletes a field with the specified key. Note: You can't delete standard fields.
        #### Allowed For
        * Admins
      operationId: DeleteCustomObjectField
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      - $ref: '#/components/parameters/CustomObjectFieldKeyOrId'
      responses:
        "204":
          description: No content response
    patch:
      tags:
      - Custom Object Fields
      summary: Update Custom Object Field
      description: |-
        Updates individual custom object fields. The updating rules are as follows:
        * Takes a `custom_object_field` object that specifies the properties to update
        * The `key` property cannot be updated
        * If updating a standard field, only the `title` and `description` properties can be updated.
        #### Allowed For
        * Admins
      operationId: UpdateCustomObjectField
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      - $ref: '#/components/parameters/CustomObjectFieldKeyOrId'
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectFieldResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomObjectFieldCreateResponseExample'
  /api/v2/custom_objects/{custom_object_key}/fields/reorder:
    put:
      tags:
      - Custom Object Fields
      summary: Reorder Custom Fields of an Object
      description: |
        Sets a preferred order of custom fields for a specific object by providing field ids in the desired order.
        #### Allowed For

        * Admins
      operationId: ReorderCustomObjectFields
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      responses:
        "200":
          description: Reordered
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
  /api/v2/custom_objects/{custom_object_key}/jobs:
    post:
      tags:
      - Custom Object Records
      summary: Custom Object Record Bulk Jobs
      description: |
        Queues a background job to perform bulk actions on up to 100 custom object records per single request.
        Takes a `job` object with two nested fields:
        * `action`, one of:
            * `"create"`
            * `"delete"`
            * `"delete_by_external_id"`
            * `"create_or_update_by_external_id"`
            * `"update"`
        * `items`
            * For a `"create"` action, an array of JSON objects representing the custom object records being created
            * For a `"delete"` action, an array of strings representing Zendesk record ids
            * For a `"delete_by_external_id"` action, an array of strings representing external ids
            * For a `"create_or_update_by_external_id"` action, an array of JSON objects representing the custom object records being created or updated
            * For an `"update"` action, an array of JSON objects representing the custom object records being updated

        #### Allowed For
        * Agents

        #### Response ###
        This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
      operationId: CustomObjectRecordBulkJobs
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomObjectRecordsBulkCreateRequest'
            examples:
              default:
                $ref: '#/components/examples/CustomObjectRecordsBulkCreateRequestExample'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectRecordsJobsResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomObjectRecordsJobsResponseExample'
  /api/v2/custom_objects/{custom_object_key}/limits/field_limit:
    get:
      tags:
      - Custom Object Fields
      summary: Custom Object Fields Limit
      description: |-
        List the current count and the limit for a custom object's fields
        #### Allowed For
        * Agents
      operationId: CustomObjectFieldsLimit
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectLimitsResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomObjectFieldsLimitResponseExample'
  /api/v2/custom_objects/{custom_object_key}/records:
    get:
      tags:
      - Custom Object Records
      summary: List Custom Object Records
      description: |-
        Lists all undeleted custom object records for the specified object

         #### Pagination

        * [Cursor pagination](/api-reference/introduction/pagination/#cursor-pagination) only.
        #### Allowed For
        * Agents
      operationId: ListCustomObjectRecords
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      - name: "filter[ids]"
        in: query
        description: "Optional comma-separated list of ids to filter records by. If\
          \ one or more ids are specified, only matching records are returned. The\
          \ ids must be unique and are case sensitive"
        required: false
        style: form
        explode: true
        schema:
          type: string
        examples:
          multipleIds:
            summary: Example of multiple ids
            value: "id_1,id_2,id_3"
          oneId:
            summary: Example of a single id
            value: id_1
        x-ballerina-name: filterIds
      - name: "filter[external_ids]"
        in: query
        description: "Optional comma-separated list of external ids to filter records\
          \ by. If one or more ids are specified, only matching records are returned.\
          \ The ids must be unique and are case sensitive"
        required: false
        style: form
        explode: true
        schema:
          type: string
        examples:
          multipleIds:
            summary: Example of multiple ids
            value: "ex_id_1,ex_id_2,ex_id_3"
          oneId:
            summary: Example of a single id
            value: ex_id_1
        x-ballerina-name: filterExternalIds
      - name: sort
        in: query
        description: |
          One of `id`, `updated_at`, `-id`, or `-updated_at`. The `-` denotes the sort will be descending
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: "page[before]"
        in: query
        description: |
          A [pagination cursor](/documentation/api-basics/pagination/paginating-through-lists-using-cursor-pagination) that tells the endpoint which page to start on. It should be a `meta.before_cursor` value from a previous request. Note: `page[before]` and `page[after]` can't be used together in the same request
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: pageBefore
      - name: "page[after]"
        in: query
        description: |
          A [pagination cursor](/documentation/api-basics/pagination/paginating-through-lists-using-cursor-pagination) that tells the endpoint which page to start on. It should be a `meta.after_cursor` value from a previous request. Note: `page[before]` and `page[after]` can't be used together in the same request
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: pageAfter
      - name: "page[size]"
        in: query
        description: |
          Specifies how many records should be returned in the response. You can specify up to 100 records per page
        required: false
        style: form
        explode: true
        schema:
          type: integer
        x-ballerina-name: pageSize
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectRecordsResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomObjectRecordsIndexResponseExample'
    post:
      tags:
      - Custom Object Records
      summary: Create Custom Object Record
      description: |
        Creates a custom object record according to all the properties described by a custom object definition
        #### Allowed For
        * Agents
      operationId: CreateCustomObjectRecord
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomObjectRecordsCreateRequest'
            examples:
              default:
                $ref: '#/components/examples/CustomObjectRecordsCreateRequestExample'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectRecordResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomObjectRecordsCreateResponseExample'
    delete:
      tags:
      - Custom Object Records
      summary: Delete Custom Object Record by External Id
      description: |
        Deletes a record with the specified external id.
        #### Allowed For
        * Agents
      operationId: DeleteCustomObjectRecordByExternalId
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      - $ref: '#/components/parameters/CustomObjectRecordExternalId'
      responses:
        "204":
          description: No content response
    patch:
      tags:
      - Custom Object Records
      summary: Set Custom Object Record by External Id
      description: |
        If a record exists for the given external id, updates it. Only the specified attributes are updated. Otherwise, creates a new record with the provided external id and attributes.
        #### Allowed For
        * Agents
      operationId: UpsertCustomObjectRecord
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      - $ref: '#/components/parameters/CustomObjectRecordExternalId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomObjectRecordsUpsertRequest'
            examples:
              default:
                $ref: '#/components/examples/CustomObjectRecordsUpsertRequestExample'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectRecordResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomObjectRecordsUpsertResponseExample'
  /api/v2/custom_objects/{custom_object_key}/records/{custom_object_record_id}:
    get:
      tags:
      - Custom Object Records
      summary: Show Custom Object Record
      description: |
        Returns a custom record for a specific object using a provided id.
        #### Allowed For
        * Agents
      operationId: ShowCustomObjectRecord
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      - $ref: '#/components/parameters/CustomObjectRecordId'
      responses:
        "200":
          description: Custom Object Record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectRecordResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomObjectRecordsCreateResponseExample'
    delete:
      tags:
      - Custom Object Records
      summary: Delete Custom Object Record
      description: |-
        Deletes a record with the specified id
        #### Allowed For
        * Agents
      operationId: DeleteCustomObjectRecord
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      - $ref: '#/components/parameters/CustomObjectRecordId'
      responses:
        "204":
          description: No content response
    patch:
      tags:
      - Custom Object Records
      summary: Update Custom Object Record
      description: |-
        Updates an individual custom object record. The updating rules are as follows:
        * Takes a `custom_object_record` object that specifies the properties to update
        * The custom object fields should be nested inside a `custom_object_fields` object
        #### Allowed For
        * Agents
      operationId: UpdateCustomObjectRecord
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      - $ref: '#/components/parameters/CustomObjectRecordId'
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectRecordResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomObjectRecordsCreateResponseExample'
  /api/v2/custom_objects/{custom_object_key}/records/autocomplete:
    get:
      tags:
      - Custom Object Records
      summary: Autocomplete Custom Object Record Search
      description: |-
        Retrieves an array of custom object records that have a field value that matches the value specified in the `name` parameter.

        #### Pagination

        * [Cursor pagination](/api-reference/introduction/pagination/#cursor-pagination) only.
        * Returns the first 10,000 records sorted by relevancy with page limits.
        #### Allowed For
        * Agents
      operationId: AutocompleteCustomObjectRecordSearch
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      - name: name
        in: query
        description: Part of a name of the record you are searching for
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: "page[before]"
        in: query
        description: |
          A [pagination cursor](/documentation/api-basics/pagination/paginating-through-lists-using-cursor-pagination) that tells the endpoint which page to start on. It should be a `meta.before_cursor` value from a previous request. Note: `page[before]` and `page[after]` can't be used together in the same request
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: pageBefore
      - name: "page[after]"
        in: query
        description: |
          A [pagination cursor](/documentation/api-basics/pagination/paginating-through-lists-using-cursor-pagination) that tells the endpoint which page to start on. It should be a `meta.after_cursor` value from a previous request. Note: `page[before]` and `page[after]` can't be used together in the same request
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: pageAfter
      - name: "page[size]"
        in: query
        description: |
          The number of records to return in the response. You can specify up to 100 records per page
        required: false
        style: form
        explode: true
        schema:
          type: integer
        x-ballerina-name: pageSize
      - name: field_id
        in: query
        description: |
          The id of the lookup field. If the field has a relationship filter, the filter is applied to the results. Must be used with `source` param
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: fieldId
      - name: source
        in: query
        description: |
          One of "zen:user", "zen:ticket", "zen:organization", or "zen:custom_object:CUSTOM_OBJECT_KEY". Represents the object `field_id` belongs to. Must be used with field_id param
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectRecordsResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomObjectRecordsAutocompleteResponseExample'
  /api/v2/custom_objects/{custom_object_key}/records/count:
    get:
      tags:
      - Custom Object Records
      summary: Count Custom Object Records
      description: |-
        Returns a total count of records for a specific custom object as well as the time the count was refreshed.
        #### Allowed For
        * Agents
      operationId: CountCustomObjectRecords
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineResponse2001'
              examples:
                default:
                  value:
                    count:
                      refreshed_at: 2022-09-02T22:44:35Z
                      value: 7
  /api/v2/custom_objects/{custom_object_key}/records/search:
    get:
      tags:
      - Custom Object Records
      summary: Search Custom Object Records
      description: |-
        Returns an array of custom object records that meet the search criteria

        #### Pagination

        * [Cursor pagination](/api-reference/introduction/pagination/#cursor-pagination) only.
        * Returns the records sorted by relevancy with page limits. Without a `sort` parameter, only the first 10,000 records are returned. With a `sort` parameter, all records are returned.
        #### Allowed For
        * Agents
      operationId: SearchCustomObjectRecords
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomObjectKey'
      - name: query
        in: query
        description: |
          The query parameter is used to search text-based fields for records that match specific query terms.
          The query can be multiple words or numbers. Every record that matches the beginning of any word or number in the query string is returned.<br/><br/>

          For example, you might want to search for records related to Tesla vehicles: `query=Tesla`. In this example the API would return every record for the given custom object where any of the text fields contain the word 'Tesla'.<br/><br/>

          If needed, you could include multiple words or numbers in your search. For example: `query=Tesla Honda 2020`. This would be URL encoded as `query=Tesla%20Honda%202020`. In this example, the API would return every record for the custom object for which any of the text fields contained 'Tesla', 'Honda', or '2020'
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: jdoe
      - name: sort
        in: query
        description: |
          One of `name`, `created_at`, `updated_at`, `-name`, `-created_at`, or `-updated_at`. The `-` denotes the sort will be descending. Defaults to sorting by relevance
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: "page[before]"
        in: query
        description: |
          A [pagination cursor](/documentation/api-basics/pagination/paginating-through-lists-using-cursor-pagination) that tells the endpoint which page to start on. It should be a `meta.before_cursor` value from a previous request. Note: `page[before]` and `page[after]` can't be used together in the same request
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: pageBefore
      - name: "page[after]"
        in: query
        description: |
          A [pagination cursor](/documentation/api-basics/pagination/paginating-through-lists-using-cursor-pagination) that tells the endpoint which page to start on. It should be a `meta.after_cursor` value from a previous request. Note: `page[before]` and `page[after]` can't be used together in the same request
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: pageAfter
      - name: "page[size]"
        in: query
        description: |
          Specifies how many records should be returned in the response. You can specify up to 100 records per page
        required: false
        style: form
        explode: true
        schema:
          type: integer
        x-ballerina-name: pageSize
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectRecordsResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomObjectRecordsSearchResponseExample'
  /api/v2/custom_objects/limits/object_limit:
    get:
      tags:
      - Custom Objects
      summary: Custom Objects Limit
      description: |-
        List the current count and the limit for custom objects
        #### Allowed For
        * Admins
      operationId: CustomObjectsLimit
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectLimitsResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomObjectsLimitResponseExample'
  /api/v2/custom_objects/limits/record_limit:
    get:
      tags:
      - Custom Object Records
      summary: Custom Object Records Limit
      description: |-
        List the current count and the limit for custom object records
        #### Allowed For
        * Agents
      operationId: CustomObjectRecordsLimit
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectLimitsResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomObjectRecordsLimitResponseExample'
  /api/v2/custom_roles:
    get:
      tags:
      - Custom Roles
      summary: List Custom Roles
      description: |
        #### Availability

        * Accounts on the Enterprise plan or above

        #### Allowed For

        * Agents
      operationId: ListCustomRoles
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRolesResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomRolesResponseExample'
    post:
      tags:
      - Custom Roles
      summary: Create Custom Role
      description: |
        #### Availability

        * Accounts on the Enterprise plan or above

        #### Allowed for

        * Administrators
        * Agents with the `manage_roles` permission
      operationId: CreateCustomRole
      responses:
        "200":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRoleResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomRoleResponseExample'
  /api/v2/custom_roles/{custom_role_id}:
    get:
      tags:
      - Custom Roles
      summary: Show Custom Role
      description: |
        #### Availability

        * Accounts on the Enterprise plan or above

        #### Allowed for

        * Administrators
        * Agents with the `manage_roles` permission
      operationId: ShowCustomRoleById
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRoleResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomRoleResponseExample'
    put:
      tags:
      - Custom Roles
      summary: Update Custom Role
      description: |
        #### Availability

        * Accounts on the Enterprise plan or above

        #### Allowed for

        * Administrators
        Agents with the `manage_roles` permission
      operationId: UpdateCustomRoleById
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRoleResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomRoleResponseExample'
    delete:
      tags:
      - Custom Roles
      summary: Delete Custom Role
      description: |
        #### Availability

        * Accounts on the Enterprise plan or above

        #### Allowed for

        * Administrators
        * Agents with the `manage_roles` permission
      operationId: DeleteCustomRoleById
      responses:
        "204":
          description: No Contetnt response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/CustomRoleId'
  /api/v2/custom_status/default:
    put:
      tags:
      - Custom Ticket Statuses
      summary: Bulk Update Default Custom Ticket Status
      description: |
        Updates the default values for many custom ticket statuses at once.

        #### Allowed For

        * Admins
      operationId: BulkUpdateDefaultCustomStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkUpdateDefaultCustomStatusRequest'
            examples:
              default:
                $ref: '#/components/examples/BulkUpdateDefaultCustomStatusRequestExample'
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkUpdateDefaultCustomStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/BulkUpdateDefaultCustomStatusResponseExample'
  /api/v2/custom_statuses:
    get:
      tags:
      - Custom Ticket Statuses
      summary: List Custom Ticket Statuses
      description: |
        Lists all undeleted custom ticket statuses for the account. No pagination is provided.

        #### Allowed For

        * End Users
      operationId: ListCustomStatuses
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: status_categories
        in: query
        description: Filter the list of custom ticket statuses by a comma-separated
          list of status categories
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: statusCategories
      - name: active
        in: query
        description: "If true, show only active custom ticket statuses. If false,\
          \ show only inactive custom ticket statuses. If the filter is not used,\
          \ show all custom ticket statuses"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: default
        in: query
        description: "If true, show only default custom ticket statuses. If false,\
          \ show only non-default custom ticket statuses. If the filter is not used,\
          \ show all custom ticket statuses"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: List custom ticket statuses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomStatusesResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomStatusesResponseExample'
    post:
      tags:
      - Custom Ticket Statuses
      summary: Create Custom Ticket Status
      description: |
        Takes a `custom_status` object that specifies the custom ticket status properties to create.

        #### Allowed For

        * Admins
      operationId: CreateCustomStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomStatusCreateRequest'
            examples:
              default:
                $ref: '#/components/examples/CustomStatusCreateRequestExample'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomStatusResponseExample'
  /api/v2/custom_statuses/{custom_status_id}:
    get:
      tags:
      - Custom Ticket Statuses
      summary: Show Custom Ticket Status
      description: |
        Returns the custom ticket status object.

        #### Allowed For

        * End Users
      operationId: ShowCustomStatus
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomStatusId'
      responses:
        "200":
          description: Custom Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomStatusResponseExample'
    put:
      tags:
      - Custom Ticket Statuses
      summary: Update Custom Ticket Status
      description: |
        Takes a `custom_status` object that specifies the properties to update.

        #### Allowed For

        * Admins
      operationId: UpdateCustomStatus
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/CustomStatusId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomStatusUpdateRequest'
            examples:
              default:
                $ref: '#/components/examples/CustomStatusUpdateRequestExample'
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomStatusResponseExample'
  /api/v2/deleted_tickets:
    get:
      tags:
      - Tickets
      summary: List Deleted Tickets
      description: |-
        Returns a maximum of 100 deleted tickets per page. See [Pagination](/api-reference/introduction/pagination/).

        The results includes all deleted (and not yet archived) tickets that
        have not yet been [scrubbed](https://support.zendesk.com/hc/en-us/articles/4408845703194#topic_fv5_w51_sdb) in the past 30 days. Archived tickets are
        not included in the results. See [About archived tickets](https://support.zendesk.com/hc/en-us/articles/203657756)
        in the Support Help Center.

        The tickets are ordered chronologically by created date, from oldest to newest.
        The first ticket listed may not be the oldest ticket in your
        account due to [ticket archiving](https://support.zendesk.com/hc/en-us/articles/203657756).

        #### Pagination

        - Cursor pagination (recommended)
        - Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For

        * Agents

        #### Rate Limit

        You can make 10 requests every 1 minute using this endpoint.
        When making requests beyond page 100, you can make 5 requests every 1 minute.
        The rate limiting mechanism behaves as described in
        [Monitoring your request activity](/api-reference/ticketing/account-configuration/usage_limits/#monitoring-your-request-activity) in the API introduction.
      operationId: ListDeletedTickets
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TicketSortBy'
      - $ref: '#/components/parameters/TicketSortOrder'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeletedTicketsResponse'
              examples:
                default:
                  $ref: '#/components/examples/ListDeletedTicketsResponseExample'
  /api/v2/deleted_tickets/{ticket_id}:
    delete:
      tags:
      - Tickets
      summary: Delete Ticket Permanently
      description: |-
        Permanently deletes a soft-deleted ticket. See [Soft delete](https://support.zendesk.com/hc/en-us/articles/4408834005530#topic_zrm_wbj_1db)
        in the Zendesk GDPR docs. To soft delete a ticket, use the [Delete Ticket](#delete-ticket) endpoint.

        This endpoint enqueues a ticket deletion job and returns a payload with the jobs status.

        If the job succeeds, the ticket is permanently deleted. This operation can't be undone.

        This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work.
        Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion.

        #### Allowed For

        * Agents
      operationId: DeleteTicketPermanently
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TicketId'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/PermanentlyDeleteTicketJobStatusResponseExample'
  /api/v2/deleted_tickets/{ticket_id}/restore:
    put:
      tags:
      - Tickets
      summary: Restore a Previously Deleted Ticket
      description: |-
        #### Allowed For

        * Agents
      operationId: RestoreDeletedTicket
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TicketId'
      responses:
        "200":
          description: Empty response
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
  /api/v2/deleted_tickets/destroy_many:
    delete:
      tags:
      - Tickets
      summary: Delete Multiple Tickets Permanently
      description: |-
        Permanently deletes up to 100 soft-deleted tickets. See [Soft delete](https://support.zendesk.com/hc/en-us/articles/4408834005530#topic_zrm_wbj_1db)
        in the Zendesk GDPR docs. To soft delete tickets, use the [Bulk Delete Tickets](#bulk-delete-tickets) endpoint.

        This endpoint accepts a comma-separated list of up to 100 ticket ids. It enqueues
        a ticket deletion job and returns a payload with the jobs status.

        If one ticket fails to be deleted, the endpoint still attempts to delete the others. If the job succeeds,
        the tickets that were successfully deleted are permanently deleted. This operation can't be undone.

        This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.

        #### Allowed For

        * Agents
      operationId: BulkPermanentlyDeleteTickets
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TicketIds'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/PermanentlyDeleteTicketJobStatusResponseExample'
  /api/v2/deleted_tickets/restore_many:
    put:
      tags:
      - Tickets
      summary: Restore Previously Deleted Tickets in Bulk
      description: |-
        #### Allowed For

        * Agents
      operationId: BulkRestoreDeletedTickets
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TicketIds'
      responses:
        "200":
          description: Empty response
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
  /api/v2/deleted_users:
    get:
      tags:
      - Users
      summary: List Deleted Users
      description: |
        Returns deleted users, including permanently deleted users.

        If the results contains permanently deleted users, the users' properties
        that normally contain personal data, such as `email` and `phone`,
        are null. The `name` property is "Permanently Deleted User".

        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For

        * Agents
      operationId: ListDeletedUsers
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedUsersResponse'
              examples:
                default:
                  $ref: '#/components/examples/DeletedUsersResponseExample'
  /api/v2/deleted_users/{deleted_user_id}:
    get:
      tags:
      - Users
      summary: Show Deleted User
      description: |
        Returns users that have been deleted but not permanently yet. See [Permanently Delete User](#permanently-delete-user).

        #### Allowed For:

        * Agents
      operationId: ShowDeletedUser
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedUserResponse'
              examples:
                default:
                  $ref: '#/components/examples/DeletedUserResponseExample'
    delete:
      tags:
      - Users
      summary: Permanently Delete User
      description: |
        Before permanently deleting a user, you must delete the user first. See [Delete User](/api-reference/ticketing/users/users/#delete-user).

        WARNING: Permanently deleting a user deletes all of their information. This information is not recoverable.

        #### Permanent user deletion rate limit

        You can permanently delete 700 users every 10 minutes.
        The rate limiting mechanism behaves as described in
        [Rates Limits](/api-reference/introduction/rate-limits/#monitoring-your-request-activity) in the API introduction.
        Zendesk recommends that you obey the Retry-After header values.

        #### Allowed For

        * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage end users or team members
      operationId: PermanentlyDeleteUser
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedUserResponse'
              examples:
                default:
                  $ref: '#/components/examples/DeletedUserResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/DeletedUserId'
  /api/v2/deleted_users/count:
    get:
      tags:
      - Users
      summary: Count Deleted Users
      description: |
        Returns an approximate count of deleted users, including permanently deleted users. If the count exceeds 100,000, it is updated every 24 hours.

        The response includes a `refreshed_at` property in a `count` object that contains a timestamp indicating when the count was last updated.

        **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
        This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.

        #### Allowed For

        * Agents
      operationId: CountDeletedUsers
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResponse'
              examples:
                default:
                  $ref: '#/components/examples/DeletedUsersCountResponseExample'
  /api/v2/dynamic_content/items:
    get:
      tags:
      - Dynamic Content
      summary: List Items
      description: |
        Returns a list of all dynamic content items for your account if accessed as an admin or agents who have permission to manage dynamic content.

        #### Allowed For

        * Admins, Agents

        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).
      operationId: ListDynamicContents
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicContentsResponse'
              examples:
                default:
                  $ref: '#/components/examples/DynamicContentsResponseExample'
    post:
      tags:
      - Dynamic Content
      summary: Create Item
      description: |
        Create a new content item, with one or more variants in the item's `variants` array. See [Specifying item variants](#specifying-item-variants).

        The `default_locale_id` and variant `locale_id` values must be one of the locales the account has active. You can get the list with the [List Locales](/api-reference/ticketing/account-configuration/locales/#list-locales) endpoint.

        #### Allowed For

        * Admins, Agents
      operationId: CreateDynamicContent
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicContentResponse'
              examples:
                default:
                  $ref: '#/components/examples/DynamicContentResponseExample'
  /api/v2/dynamic_content/items/{dynamic_content_item_id}:
    get:
      tags:
      - Dynamic Content
      summary: Show Item
      description: |
        #### Allowed For

        * Admins, Agents
      operationId: ShowDynamicContentItem
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicContentResponse'
              examples:
                default:
                  $ref: '#/components/examples/DynamicContentResponseExample'
    put:
      tags:
      - Dynamic Content
      summary: Update Item
      description: |
        The only attribute you can change is the name.

        To add a variant to the item, or to update or delete the variants of the item, use the [Item Variants API](/api-reference/ticketing/ticket-management/dynamic_content_item_variants/#update-many-variants).

        #### Allowed For

        * Admins, Agents
      operationId: UpdateDynamicContentItem
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicContentResponse'
              examples:
                default:
                  $ref: '#/components/examples/DynamicContentUpdateResponseExample'
    delete:
      tags:
      - Dynamic Content
      summary: Delete Item
      description: |
        #### Allowed For

        * Admins, Agents
      operationId: DeleteDynamicContentItem
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/DynamicContentItemId'
  /api/v2/dynamic_content/items/{dynamic_content_item_id}/variants:
    get:
      tags:
      - Dynamic Content Item Variants
      summary: List Variants
      description: |
        Returns all the variants of the specified dynamic content item.

        #### Allowed For

        * Admins
        * Agents who have permission to manage dynamic content

        #### Pagination

        * Cursor pagination

        See [Pagination](/api-reference/introduction/pagination/).
      operationId: DynamicContentListVariants
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicContentVariantsResponse'
              examples:
                default:
                  $ref: '#/components/examples/DynamicContentVariantsResponseExample'
    post:
      tags:
      - Dynamic Content Item Variants
      summary: Create Variant
      description: |
        You can only create one variant for each locale id. If a locale variant already exists, the request is rejected.

        #### Allowed For

        * Admins, Agents
      operationId: CreateDynamicContentVariant
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicContentVariantResponse'
              examples:
                default:
                  $ref: '#/components/examples/DynamicContentVariantResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/DynamicContentItemId'
  /api/v2/dynamic_content/items/{dynamic_content_item_id}/variants/{dynammic_content_variant_id}:
    get:
      tags:
      - Dynamic Content Item Variants
      summary: Show Variant
      description: |
        #### Allowed For

        * Admins, Agents
      operationId: ShowDynamicContentVariant
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicContentVariantResponse'
              examples:
                default:
                  $ref: '#/components/examples/DynamicContentVariantResponseExample'
    put:
      tags:
      - Dynamic Content Item Variants
      summary: Update Variant
      description: |
        Updates the specified variant. You don't need to include all the properties. If you just want to update content, for example, then include just that.

        You can't switch the active state of the default variant of an item. Similarly, you can't switch the default to false if the variant is the default. You must make another variant default instead.

        #### Allowed For

        * Admins, Agents
      operationId: UpdateDynamicContentVariant
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicContentVariantResponse'
              examples:
                default:
                  $ref: '#/components/examples/DynamicContentVariantUpdateResponseExample'
    delete:
      tags:
      - Dynamic Content Item Variants
      summary: Delete Variant
      description: |
        #### Allowed For

        * Admins, Agents
      operationId: DeleteDynamicContentVariant
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/DynamicContentItemId'
    - $ref: '#/components/parameters/DynamicContentVariantId'
  /api/v2/dynamic_content/items/{dynamic_content_item_id}/variants/create_many:
    post:
      tags:
      - Dynamic Content Item Variants
      summary: Create Many Variants
      description: |
        #### Allowed For

        * Admins, Agents
      operationId: CreateManyDynamicContentVariants
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicContentVariantsResponse'
              examples:
                default:
                  $ref: '#/components/examples/DynamicContentVariantsCreateManyResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/DynamicContentItemId'
  /api/v2/dynamic_content/items/{dynamic_content_item_id}/variants/update_many:
    put:
      tags:
      - Dynamic Content Item Variants
      summary: Update Many Variants
      description: |
        Updates one or more variants. See [Update Variant](/api-reference/ticketing/ticket-management/dynamic_content_item_variants/#update-variant).

        You must specify the variants by id in the body. To get the variant ids, see [List Variants](/api-reference/ticketing/ticket-management/dynamic_content_item_variants/#list-variants).

        #### Allowed For

        * Admins, Agents
      operationId: UpdateManyDynamicContentVariants
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicContentVariantsResponse'
              examples:
                default:
                  $ref: '#/components/examples/DynamicContentVariantsUpdateManyResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/DynamicContentItemId'
  /api/v2/dynamic_content/items/show_many:
    get:
      tags:
      - Dynamic Content
      summary: Show Many Items
      description: |
        #### Stability

        * Development

        #### Allowed For

        * Admins, Agents
      operationId: ShowManyDynamicContents
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: identifiers
        in: query
        description: Identifiers for the dynamic contents
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "item1,item2"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicContentsResponse'
              examples:
                default:
                  $ref: '#/components/examples/DynamicContentsResponseExample'
  /api/v2/group_memberships:
    get:
      tags:
      - Group Memberships
      summary: List Memberships
      description: |
        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For:

        * Agents
      operationId: ListGroupMemberships
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMembershipsResponse'
              examples:
                default:
                  $ref: '#/components/examples/GroupMembershipsResponseExample'
    post:
      tags:
      - Group Memberships
      summary: Create Membership
      description: |
        Assigns an agent to a given group.

        #### Allowed For

        * Admins
        * Agents assigned to a custom role with permissions to manage group memberships (Enterprise only)
      operationId: CreateGroupMembership
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMembershipResponse'
              examples:
                default:
                  $ref: '#/components/examples/GroupMembershipResponseExample'
  /api/v2/group_memberships/{group_membership_id}:
    get:
      tags:
      - Group Memberships
      summary: Show Membership
      description: |
        The 'id' is the group membership id, not a group id.

        #### Allowed For

        * Agents
      operationId: ShowGroupMembershipById
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMembershipResponse'
              examples:
                default:
                  $ref: '#/components/examples/GroupMembershipResponseExample'
    delete:
      tags:
      - Group Memberships
      summary: Delete Membership
      description: |
        Immediately removes a user from a group and schedules a job to unassign all working tickets that are assigned to the given user and group combination.

        #### Allowed For

        * Admins
        * Agents assigned to a custom role with permissions to manage group memberships (Enterprise only)
      operationId: DeleteGroupMembership
      responses:
        "204":
          description: No content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/GroupMembershipId'
    - $ref: '#/components/parameters/UserId'
  /api/v2/group_memberships/assignable:
    get:
      tags:
      - Group Memberships
      summary: List Assignable Memberships
      description: |
        Returns a maximum of 100 group memberships per page.

        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For:

        * Agents
      operationId: ListAssignableGroupMemberships
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMembershipsResponse'
              examples:
                default:
                  $ref: '#/components/examples/GroupMembershipsResponseExample'
  /api/v2/group_memberships/create_many:
    post:
      tags:
      - Group Memberships
      summary: Bulk Create Memberships
      description: |
        Assigns up to 100 agents to given groups.

        #### Allowed For

        * Admins
        * Agents assigned to a custom role with permissions to manage group memberships (Enterprise only)

        #### Response

        This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion.
      operationId: GroupMembershipBulkCreate
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/JobStatusResponseExample'
  /api/v2/group_memberships/destroy_many:
    delete:
      tags:
      - Group Memberships
      summary: Bulk Delete Memberships
      description: |
        Immediately removes users from groups and schedules a job to unassign all working tickets that are assigned to the given user and group combinations.

        #### Allowed For

        * Admins
        * Agents assigned to a custom role with permissions to manage group memberships (Enterprise only)
      operationId: GroupMembershipBulkDelete
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: ids
        in: query
        description: Id of the group memberships to delete. Comma separated
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "1,2,3"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/JobStatusBulkDeleteResponseExample'
  /api/v2/group_slas/policies:
    get:
      tags:
      - Group SLA Policies
      summary: List Group SLA Policies
      description: |
        #### Allowed For

        * Admins
      operationId: ListGroupSLAPolicies
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupSLAPoliciesResponse'
              examples:
                default:
                  $ref: '#/components/examples/GroupSLAPoliciesResponseExample'
    post:
      tags:
      - Group SLA Policies
      summary: Create Group SLA Policy
      description: |
        #### Allowed For

        * Admins
      operationId: CreateGroupSLAPolicy
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupSLAPolicyResponse'
              examples:
                default:
                  $ref: '#/components/examples/GroupSLAPolicyCreateResponse'
  /api/v2/group_slas/policies/{group_sla_policy_id}:
    get:
      tags:
      - Group SLA Policies
      summary: Show Group SLA Policy
      description: |
        #### Allowed For

        * Admins
      operationId: ShowGroupSLAPolicy
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupSLAPolicyResponse'
              examples:
                default:
                  $ref: '#/components/examples/GroupSLAPolicyResponseExample'
    put:
      tags:
      - Group SLA Policies
      summary: Update Group SLA Policy
      description: |
        Updates the specified policy.

        #### Allowed For

        * Admins
      operationId: UpdateGroupSLAPolicy
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupSLAPolicyResponse'
              examples:
                default:
                  $ref: '#/components/examples/GroupSLAPolicyUpdateResponse'
    delete:
      tags:
      - Group SLA Policies
      summary: Delete Group SLA Policy
      description: |
        #### Allowed For

        * Admins
      operationId: DeleteGroupSLAPolicy
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/GroupSLAPolicyId'
  /api/v2/group_slas/policies/definitions:
    get:
      tags:
      - Group SLA Policies
      summary: Retrieve Supported Filter Definition Items
      description: |
        #### Allowed For

        * Admins
      operationId: RetrieveGroupSLAPolicyFilterDefinitionItems
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupSLAPolicyFilterDefinitionResponse'
              examples:
                default:
                  $ref: '#/components/examples/GroupSLAPolicyFilterDefinitionResponseExample'
  /api/v2/group_slas/policies/reorder:
    put:
      tags:
      - Group SLA Policies
      summary: Reorder Group SLA Policies
      description: |
        #### Allowed For

        * Admins
      operationId: ReorderGroupSLAPolicies
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: group_sla_policy_ids
        in: query
        description: The ids of the Group SLA policies to reorder
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
        x-ballerina-name: groupSlaPolicyIds
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
  /api/v2/groups:
    get:
      tags:
      - Groups
      summary: List Groups
      description: |
        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For

        * Admins
        * Agents
      operationId: ListGroups
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/UserId'
      - $ref: '#/components/parameters/ExcludeDeleted'
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupsResponse'
              examples:
                default:
                  $ref: '#/components/examples/GroupsResponseExample'
    post:
      tags:
      - Groups
      summary: Create Group
      description: |
        #### Allowed For

        * Admins
        * Agents assigned to a custom role with permissions to manage groups (Enterprise only)
      operationId: CreateGroup
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
              examples:
                default:
                  $ref: '#/components/examples/GroupCreateResponseExample'
  /api/v2/groups/{group_id}:
    get:
      tags:
      - Groups
      summary: Show Group
      description: |
        #### Allowed For

        * Admins
        * Agents
      operationId: ShowGroupById
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
              examples:
                default:
                  $ref: '#/components/examples/GroupResponseExample'
    put:
      tags:
      - Groups
      summary: Update Group
      description: |
        #### Allowed For

        * Admins
      operationId: UpdateGroup
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
              examples:
                default:
                  $ref: '#/components/examples/GroupUpdateResponseExample'
    delete:
      tags:
      - Groups
      summary: Delete Group
      description: |
        #### Allowed For

        * Admins
        * Agents assigned to a custom role with permissions to manage groups (Enterprise only)
      operationId: DeleteGroup
      responses:
        "204":
          description: No content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/GroupId'
  /api/v2/groups/{group_id}/memberships:
    get:
      tags:
      - Group Memberships
      summary: List Memberships
      description: |
        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For:

        * Agents
      operationId: ListGroupMembershipsByGroupId
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMembershipsResponse'
              examples:
                default:
                  $ref: '#/components/examples/GroupMembershipsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/GroupId'
  /api/v2/groups/assignable:
    get:
      tags:
      - Groups
      summary: List Assignable Groups
      description: |
        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For

        * Admins
        * Agents
      operationId: ListAssignableGroups
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupsResponse'
              examples:
                default:
                  $ref: '#/components/examples/GroupsResponseExample'
  /api/v2/groups/count:
    get:
      tags:
      - Groups
      summary: Count Groups
      description: |
        Returns an approximate count of groups. If the count exceeds 100,000, it is updated every 24 hours.

        The `refreshed_at` property of the `count` object is a timestamp that indicates when the count was last updated.

        **Note**: When the count exceeds 100,000, `refreshed_at` may occasionally be null. This indicates that the count is being updated in the background, and the `value` property of the `count` object is limited to 100,000 until the update is complete.

        #### Allowed For

        * Admins
        * Agents
      operationId: CountGroups
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupsCountObject'
              examples:
                default:
                  $ref: '#/components/examples/GroupsCountResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserId'
  /api/v2/imports/tickets:
    post:
      tags:
      - Ticket Import
      summary: Ticket Import
      description: |-
        #### Allowed For

        * Admins
      operationId: TicketImport
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/ArchiveImmediately'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketImportRequest'
            examples:
              default:
                $ref: '#/components/examples/TicketImportRequestExample'
      responses:
        "201":
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketResponseExample'
  /api/v2/imports/tickets/create_many:
    post:
      tags:
      - Ticket Import
      summary: Ticket Bulk Import
      description: |-
        Accepts an array of up to 100 ticket objects.

        #### Allowed For

        * Admins
      operationId: TicketBulkImport
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/ArchiveImmediately'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketBulkImportRequest'
            examples:
              default:
                $ref: '#/components/examples/TicketBulkImportRequestExample'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/JobStatusResponseExample'
  /api/v2/incremental/{incremental_resource}/sample:
    get:
      tags:
      - Incremental Export
      summary: Incremental Sample Export
      description: |
        Use this endpoint to test the incremental export format. It's more strict in terms of rate limiting,
        at 10 requests per 20 minutes instead of 10 requests per minute. It also returns only up to 50
        results per request. Otherwise, it's identical to the above APIs.

        Use the `incremental_resource` parameter to specify the resource. Possible values are "tickets", "ticket_events", "users", or "organizations".
      operationId: IncrementalSampleExport
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeBasedExportIncrementalTicketsResponse'
              examples:
                default:
                  $ref: '#/components/examples/TimeBasedExportIncrementalTicketsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/IncrementalUnixTime'
    - $ref: '#/components/parameters/IncrementalResource'
  /api/v2/incremental/organizations:
    get:
      tags:
      - Incremental Export
      summary: Incremental Organization Export
      description: |
        #### Allowed For

         * Admins

        #### Sideloading

        See [Organizations sideloads](/documentation/ticketing/using-the-zendesk-api/side_loading/#supported-endpoints).
      operationId: IncrementalOrganizationExport
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportIncrementalOrganizationsResponse'
              examples:
                default:
                  $ref: '#/components/examples/ExportIncrementalOrganizationsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/IncrementalUnixTime'
  /api/v2/incremental/routing/attribute_values:
    get:
      tags:
      - Incremental Skill Based Routing
      summary: Incremental Attributes Values Export
      description: |
        Returns a stream of changes that occurred on routing attribute values.

        #### Allowed For

        * Admins

        #### Parameters

        Optional

        | Name   | Type   | Comment
        | ------ | ------ | -------
        | cursor | string | The `cursor` parameter is a non-human-readable argument you can use to move forward or backward in time. The cursor is a read-only URL parameter that's only available in API responses. See [Pagination](#pagination).
      operationId: IncrementalSkilBasedRoutingAttributeValuesExport
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncrementalSkillBasedRouting'
              examples:
                default:
                  $ref: '#/components/examples/IncrementalSkillBasedRoutingAttributeValuesExample'
  /api/v2/incremental/routing/attributes:
    get:
      tags:
      - Incremental Skill Based Routing
      summary: Incremental Attributes Export
      description: |
        Returns a stream of changes that occurred on routing attributes.

        #### Allowed For

        * Admins

        #### Parameters

        Optional


        | Name   | Type   | Comment
        | ------ | ------ | -------
        | cursor | string | The `cursor` parameter is a non-human-readable argument you can use to move forward or backward in time. The cursor is a read-only URL parameter that's only available in API responses. See [Pagination](#pagination).
      operationId: IncrementalSkilBasedRoutingAttributesExport
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncrementalSkillBasedRouting'
              examples:
                default:
                  $ref: '#/components/examples/IncrementalSkillBasedRoutingAttributesExample'
  /api/v2/incremental/routing/instance_values:
    get:
      tags:
      - Incremental Skill Based Routing
      summary: Incremental Instance Values Export
      description: |
        Returns a stream of changes that occurred on routing instance values. Changes are grouped by `attribute_value_id`,
        with unassociate type events listed with associate type events by the associate event’s timestamp.

        #### Allowed For

        * Admins

        #### Parameters

        Optional

        | Name   | Type   | Comment
        | ------ | ------ | -------
        | cursor | string | The `cursor` parameter is a non-human-readable argument you can use to move forward or backward in time. The cursor is a read-only URL parameter that's only available in API responses. See [Pagination](#pagination).
      operationId: IncrementalSkilBasedRoutingInstanceValuesExport
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncrementalSkillBasedRouting'
              examples:
                default:
                  $ref: '#/components/examples/IncrementalSkillBasedRoutingInstanceValuesExample'
  /api/v2/incremental/ticket_events:
    get:
      tags:
      - Incremental Export
      summary: Incremental Ticket Event Export
      description: |
        Returns a stream of changes that occurred on tickets. Each event is tied
        to an update on a ticket and contains all the fields that were updated in that
        change. For more information, see:

        - [Exporting ticket events](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#exporting-ticket-events) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api)
        - [Time-based incremental exports](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#time-based-incremental-exports) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api)

        You can include comments in the event stream by using the `comment_events`
        sideload. See Sideloading below. If you don't specify the sideload, any comment
        present in the ticket update is described only by Boolean `comment_present`
        and `comment_public` object properties in the event's `child_events` array.
        The comment itself is not included.

        #### Allowed For

         * Admins

        #### Sideloading

        The endpoint supports the `comment_events` sideload. Any comment present in the ticket
        update is listed as an object in the event's `child_events` array. Example:

        ```js
        "child_events": [
          {
            "id": 91048994488,
            "via": {
              "channel": "api",
              "source": {"from":{},"to":{},"rel":null}},
            "via_reference_id":null,
            "type": "Comment",
            "author_id": 5031726587,
            "body": "This is a comment",
            "html_body": "&lt;div class="zd-comment"&gt;&lt;p dir="auto"&gt;This is a comment&lt;/p&gt;",
            "public": true,
            "attachments": [],
            "audit_id": 91048994468,
            "created_at": "2009-06-25T10:15:18Z",
            "event_type": "Comment"
          },
          ...
        ],
        ...
        ```
      operationId: IncrementalTicketEvents
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportIncrementalTicketEventsResponse'
              examples:
                default:
                  $ref: '#/components/examples/ExportIncrementalTicketEventsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/IncrementalUnixTime'
  /api/v2/incremental/ticket_metric_events:
    get:
      tags:
      - Ticket Metric Events
      summary: List Ticket Metric Events
      description: |-
        Returns ticket metric events that occurred on or after the start time.

        Cursor pagination returns a maximum of 100 records per page. Events are listed in chronological order.

        If the results are not paginated, events will be returned as a time-based incremental export.

        See [Time-based incremental exports](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#time-based-incremental-exports).

        #### Pagination
        * Cursor pagination

        See [Pagination](/api-reference/introduction/pagination/).

        #### Allowed For

        * Admins
      operationId: ListTicketMetricEvents
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: start_time
        in: query
        description: "The Unix UTC epoch time of the oldest event you're interested\
          \ in. Example: 1332034771"
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 1332034771
        x-ballerina-name: startTime
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketMetricEventsResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketMetricEventsResponseExample'
  /api/v2/incremental/tickets:
    get:
      tags:
      - Incremental Export
      summary: "Incremental Ticket Export, Time Based"
      description: |
        Returns the tickets that changed since the start time. For more information,
        see [Exporting tickets](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#exporting-tickets) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api).

        This endpoint supports time-based incremental exports.
        For more information, see [Time-based incremental exports](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#time-based-incremental-exports) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api). You can also return tickets using cursor-based pagination. See [Incremental Ticket Export, Cursor Based](#incremental-ticket-export-cursor-based).

        The results include tickets that were updated by the system. See
        [Excluding system-updated tickets](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#excluding-system-updated-tickets-time-based-exports) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api).

        The endpoint can return tickets with an `updated_at` time that's earlier than the
        `start_time` time. The reason is that the API compares the `start_time` with the ticket's
        `generated_timestamp` value, not its `updated_at` value. The `updated_at` value is
        updated only if the update generates a [ticket event](#incremental-ticket-event-export).
        The `generated_timestamp` value is updated for all ticket updates, including system
        updates. If a system update occurs after a ticket event, the unchanged
        `updated_at` time will become earlier relative to the updated `generated_timestamp`
        time.

        #### Allowed For

         * Admins

        #### Sideloading

        See [Tickets sideloads](/documentation/ticketing/using-the-zendesk-api/side_loading/#supported-endpoints). For performance reasons,
        `last_audits` sideloads aren't supported.
      operationId: IncrementalTicketExportTime
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeBasedExportIncrementalTicketsResponse'
              examples:
                default:
                  $ref: '#/components/examples/TimeBasedExportIncrementalTicketsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/IncrementalUnixTime'
  /api/v2/incremental/tickets/cursor:
    get:
      tags:
      - Incremental Export
      summary: "Incremental Ticket Export, Cursor Based"
      description: |
        Returns the tickets that changed since the start time. For more information,
        see [Exporting tickets](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#exporting-tickets) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api).

        This endpoint supports cursor-based incremental exports.
        Cursor-based exports are highly encouraged because they provide more consistent performance and
        response body sizes. For more information, see [Cursor-based incremental exports](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#cursor-based-incremental-exports) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api).



        #### Allowed For

         * Admins

        #### Sideloading

        See [Tickets sideloads](/documentation/ticketing/using-the-zendesk-api/side_loading/#supported-endpoints). For performance reasons,
        `last_audits` sideloads aren't supported.
      operationId: IncrementalTicketExportCursor
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CursorBasedExportIncrementalTicketsResponse'
              examples:
                default:
                  $ref: '#/components/examples/CursorBasedExportIncrementalTicketsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/IncrementalUnixTime'
    - $ref: '#/components/parameters/IncrementalCursor'
  /api/v2/incremental/users:
    get:
      tags:
      - Incremental Export
      summary: "Incremental User Export, Time Based"
      description: |
        #### Allowed For

         * Admins

        #### Sideloading

        See [Users sideloads](/documentation/ticketing/using-the-zendesk-api/side_loading/#supported-endpoints).
      operationId: IncrementalUserExportTime
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeBasedExportIncrementalUsersResponse'
              examples:
                default:
                  $ref: '#/components/examples/TimeBasedExportIncrementalUsersResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/IncrementalUnixTime'
    - $ref: '#/components/parameters/IncrementalPage'
  /api/v2/incremental/users/cursor:
    get:
      tags:
      - Incremental Export
      summary: "Incremental User Export, Cursor Based"
      description: |
        #### Allowed For

         * Admins

        #### Sideloading

        See [Users sideloads](/documentation/ticketing/using-the-zendesk-api/side_loading/#supported-endpoints).
      operationId: IncrementalUserExportCursor
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CursorBasedExportIncrementalUsersResponse'
              examples:
                default:
                  $ref: '#/components/examples/CursorBasedExportIncrementalUsersResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/IncrementalUnixTime'
    - $ref: '#/components/parameters/IncrementalCursor'
    - $ref: '#/components/parameters/IncrementalPage'
  /api/v2/job_statuses:
    get:
      tags:
      - Job Statuses
      summary: List Job Statuses
      description: |
        Shows the statuses for background jobs. Statuses are sorted first by completion date and then by creation date in descending order.

        #### Allowed For:

        * Agents

        #### Pagination

        * Cursor pagination

        See [Pagination](/api-reference/introduction/pagination/).
      operationId: ListJobStatuses
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusesResponse'
              examples:
                default:
                  $ref: '#/components/examples/JobStatusesResponseExample'
  /api/v2/job_statuses/{job_status_id}:
    get:
      tags:
      - Job Statuses
      summary: Show Job Status
      description: |
        Shows the status of a background job.

        #### Allowed For:

        * Agents
      operationId: ShowJobStatus
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/ShowJobStatusResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/JobStatusId'
  /api/v2/job_statuses/show_many:
    get:
      tags:
      - Job Statuses
      summary: Show Many Job Statuses
      description: |
        Accepts a comma-separated list of job status ids.

        #### Allowed For:

        * Agents
      operationId: ShowManyJobStatuses
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: ids
        in: query
        description: Comma-separated list of job status ids
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: "8b726e606741012ffc2d782bcb7848fe,e7665094164c498781ebe4c8db6d2af5"
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusesResponse'
              examples:
                default:
                  $ref: '#/components/examples/JobStatusesResponseExample'
  /api/v2/locales:
    get:
      tags:
      - Locales
      summary: List Locales
      description: |
        Lists the translation locales available for the account.

        **Note**: You can alter the list by passing an updated `locale_ids` array to the [Update Account Settings](/api-reference/ticketing/account-configuration/account_settings/#update-account-settings) endpoint.

        #### Allowed For

        * Anyone
      operationId: ListLocales
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalesResponse'
              examples:
                default:
                  $ref: '#/components/examples/LocalesResponseExample'
  /api/v2/locales/{locale_id}:
    get:
      tags:
      - Locales
      summary: Show Locale
      description: |
        #### Allowed For

        * Anyone
      operationId: ShowLocaleById
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocaleResponse'
              examples:
                default:
                  $ref: '#/components/examples/LocaleResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/LocaleId'
  /api/v2/locales/agent:
    get:
      tags:
      - Locales
      summary: List Locales for Agent
      description: |
        Lists the translation locales that have been localized for agents on a specific account.

        #### Allowed For

        * Anyone
      operationId: ListLocalesForAgent
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalesResponse'
              examples:
                default:
                  $ref: '#/components/examples/LocalesResponseExample'
  /api/v2/locales/current:
    get:
      tags:
      - Locales
      summary: Show Current Locale
      description: |
        This works like [Show Locale](#show-locale), but instead of taking a locale id as an argument, it renders the locale of the user performing the request.

        #### Allowed For

        * Anyone
      operationId: ShowCurrentLocale
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocaleResponse'
              examples:
                default:
                  $ref: '#/components/examples/LocaleResponseExample'
  /api/v2/locales/detect_best_locale:
    get:
      tags:
      - Locales
      summary: Detect Best Language for User
      description: |
        #### Allowed For

        * Anyone
      operationId: DetectBestLocale
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocaleResponse'
              examples:
                default:
                  $ref: '#/components/examples/LocaleDetectBestLanguageResponseExample'
  /api/v2/locales/public:
    get:
      tags:
      - Locales
      summary: List Available Public Locales
      description: |
        Lists the translation locales that are available to all accounts.

        #### Allowed For

        * Anyone
      operationId: ListAvailablePublicLocales
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalesResponse'
              examples:
                default:
                  $ref: '#/components/examples/LocalesResponseExample'
  /api/v2/macros:
    get:
      tags:
      - Macros
      summary: List Macros
      description: |
        Lists all shared and personal macros available to the current user. For admins, the API returns all macros for the account, including the personal macros of agents and other admins.

        #### Pagination

        - Cursor pagination (recommended)
        - Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For
        * Agents
      operationId: ListMacros
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/MacroInclude'
      - $ref: '#/components/parameters/MacroAccess'
      - $ref: '#/components/parameters/MacroActive'
      - $ref: '#/components/parameters/MacroCategory'
      - $ref: '#/components/parameters/MacroGroupId'
      - $ref: '#/components/parameters/MacroOnlyViewable'
      - $ref: '#/components/parameters/MacroSortBy'
      - $ref: '#/components/parameters/MacroSortOrder'
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MacrosResponse'
              examples:
                default:
                  $ref: '#/components/examples/MacrosResponseExample'
    post:
      tags:
      - Macros
      summary: Create Macro
      description: |
        #### Allowed For
        * Agents
      operationId: CreateMacro
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V2MacrosBody'
            examples:
              default:
                value:
                  macro:
                    actions:
                    - field: status
                      value: solved
                    title: Roger Wilco
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineResponse2002'
              examples:
                default:
                  $ref: '#/components/examples/CreateMacroResponseExample'
  /api/v2/macros/{macro_id}:
    get:
      tags:
      - Macros
      summary: Show Macro
      description: |
        #### Allowed For
        * Agents
      operationId: ShowMacro
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MacroResponse'
              examples:
                default:
                  $ref: '#/components/examples/MacroResponseExample'
    put:
      tags:
      - Macros
      summary: Update Macro
      description: |
        #### Allowed For
        * Agents
      operationId: UpdateMacro
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MacrosmacroIdBody'
            examples:
              default:
                value:
                  macro:
                    actions:
                    - field: status
                      value: solved
                    title: Sets the ticket status to `solved`
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineResponse2003'
              examples:
                default:
                  $ref: '#/components/examples/UpdateMacroResponseExample'
    delete:
      tags:
      - Macros
      summary: Delete Macro
      description: |
        #### Allowed For
        * Agents, with restrictions applying on certain actions
      operationId: DeleteMacro
      responses:
        "204":
          description: No Content
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/MacroId'
  /api/v2/macros/{macro_id}/apply:
    get:
      tags:
      - Macros
      summary: Show Changes to Ticket
      description: |
        Returns the changes the macro would make to a ticket. It doesn't actually
        change a ticket. You can use the response data in a subsequent API call
        to the [Tickets](/api-reference/ticketing/tickets/tickets/) endpoint to update the ticket.

        The response includes only the ticket fields that would be changed by the
        macro. To get the full ticket object after the macro is applied,
        see [Show Ticket After Changes](#show-ticket-after-changes).

        #### Allowed For
        * Agents
      operationId: ShowChangesToTicket
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MacroApplyTicketResponse'
              examples:
                default:
                  $ref: '#/components/examples/MacroChangesToTicketsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/MacroId'
  /api/v2/macros/{macro_id}/attachments:
    get:
      tags:
      - Macros
      summary: List Macro Attachments
      description: |
        Lists the attachments associated with a macro.

        #### Allowed For
        * Agents
      operationId: ListMacroAttachments
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MacroAttachmentsResponse'
              examples:
                default:
                  $ref: '#/components/examples/MacroAttachmentsResponseExample'
    post:
      tags:
      - Macros
      summary: Create Macro Attachment
      description: |
        Allows an attachment to be uploaded and associated with a macro at the same time.

        **Note:** A macro can be associated with up to five attachments.

        #### Allowed For

        * Agents
      operationId: CreateAssociatedMacroAttachment
      responses:
        "201":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MacroAttachmentResponse'
              examples:
                default:
                  $ref: '#/components/examples/MacroAttachmentResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/MacroId'
  /api/v2/macros/actions:
    get:
      tags:
      - Macros
      summary: List Supported Actions for Macros
      description: |
        #### Allowed For
        * Agents
      operationId: ListMacrosActions
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineResponse2004'
              examples:
                default:
                  $ref: '#/components/examples/MacroActionsResponseExample'
  /api/v2/macros/active:
    get:
      tags:
      - Macros
      summary: List Active Macros
      description: |
        Lists all active shared and personal macros available to the current user.

        #### Allowed For
        * Agents
      operationId: ListActiveMacros
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/MacroInclude'
      - $ref: '#/components/parameters/MacroAccess'
      - $ref: '#/components/parameters/MacroCategory'
      - $ref: '#/components/parameters/MacroGroupId'
      - $ref: '#/components/parameters/MacroSortBy'
      - $ref: '#/components/parameters/MacroSortOrder'
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MacrosResponse'
              examples:
                default:
                  $ref: '#/components/examples/MacrosResponseExample'
  /api/v2/macros/attachments:
    post:
      tags:
      - Macros
      summary: Create Unassociated Macro Attachment
      description: |
        Allows an attachment to be uploaded that can be associated with a macro at a later time.

        **Note:** To ensure an uploaded attachment is not lost, associate it with a macro as soon as possible. From time to time, old attachments that are not not associated with any macro are purged.

        #### Allowed For

        * Agents
      operationId: CreateMacroAttachment
      responses:
        "201":
          description: Created Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MacroAttachmentResponse'
              examples:
                default:
                  $ref: '#/components/examples/MacroAttachmentResponseExample'
  /api/v2/macros/attachments/{attachment_id}:
    get:
      tags:
      - Macros
      summary: Show Macro Attachment
      description: |
        Shows the properties of the specified macro attachment.

        #### Allowed For
        * Agents
      operationId: ShowMacroAttachment
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MacroAttachmentResponse'
              examples:
                default:
                  $ref: '#/components/examples/MacroAttachmentResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/AttachmentId'
  /api/v2/macros/categories:
    get:
      tags:
      - Macros
      summary: List Macro Categories
      description: |
        Lists all macro categories available to the current user.

        #### Allowed For
        * Agents
      operationId: ListMacroCategories
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MacroCategoriesResponse'
              examples:
                default:
                  $ref: '#/components/examples/MacroCategoriesResponseExample'
  /api/v2/macros/definitions:
    get:
      tags:
      - Macros
      summary: List Macro Action Definitions
      description: |
        Returns the definitions of the actions a macro can perform. For example,
        one action can set the status of a ticket. The definition of the action
        includes a title ("Status"), a type ("list"), and possible values. For a
        list of support actions, see [Actions reference](/documentation/ticketing/reference-guides/actions-reference).

        #### Allowed For

        * Agents
      operationId: ListMacroActionDefinitions
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineResponse2005'
              examples:
                default:
                  $ref: '#/components/examples/ShowDerivedMacroResponseExample'
  /api/v2/macros/destroy_many:
    delete:
      tags:
      - Macros
      summary: Bulk Delete Macros
      description: |
        Deletes the macros corresponding to the provided comma-separated list of IDs.

        #### Allowed For
        * Agents
      operationId: DeleteManyMacros
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: ids
        in: query
        description: The IDs of the macros to delete
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
        example:
        - 1
        - 2
        - 3
      responses:
        "204":
          description: No Content
  /api/v2/macros/new:
    get:
      tags:
      - Macros
      summary: Show Macro Replica
      description: |
        Returns an unpersisted macro representation derived from a ticket or macro.

        The endpoint takes one of the following query parameters: `macro_id` or `ticket_id`. If you include both, `macro_id` is used.

        #### Allowed For
        * Agents
      operationId: ShowDerivedMacro
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MacroResponse'
              examples:
                default:
                  $ref: '#/components/examples/MacroResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/MacroIdQuery'
    - name: ticket_id
      in: query
      description: The ID of the ticket from which to build a macro replica
      required: true
      style: form
      explode: true
      schema:
        type: integer
      example: 35436
  /api/v2/macros/search:
    get:
      tags:
      - Macros
      summary: Search Macros
      description: |
        #### Pagination

        * Offset pagination only

        See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).

        #### Allowed For
        * Agents
      operationId: SearchMacro
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MacrosResponse'
              examples:
                default:
                  $ref: '#/components/examples/MacrosResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/MacroInclude'
    - $ref: '#/components/parameters/MacroAccess'
    - $ref: '#/components/parameters/MacroActive'
    - $ref: '#/components/parameters/MacroCategory'
    - $ref: '#/components/parameters/MacroGroupId'
    - $ref: '#/components/parameters/MacroOnlyViewable'
    - $ref: '#/components/parameters/MacroSortBy'
    - $ref: '#/components/parameters/MacroSortOrder'
    - $ref: '#/components/parameters/MacroQuery'
  /api/v2/macros/update_many:
    put:
      tags:
      - Macros
      summary: Update Many Macros
      description: |
        Updates the provided macros with the specified changes.

        #### Allowed For
        * Agents
      operationId: UpdateManyMacros
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MacroUpdateManyInput'
            examples:
              default:
                value:
                  macros:
                  - active: false
                    id: 25
                  - id: 23
                    position: 5
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MacrosResponse'
              examples:
                default:
                  $ref: '#/components/examples/MacrosResponseExample'
  /api/v2/object_layouts/{object_type}/essentials_card:
    get:
      tags:
      - Essentials Card
      summary: Show Essentials Card
      description: |
        Gets the essentials card for an object type.
        #### Allowed For
        * Admins and agents
      operationId: ShowEssentialsCard
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EssentialsCardResponse'
              examples:
                default:
                  $ref: '#/components/examples/EssentialsCardExample'
    put:
      tags:
      - Essentials Card
      summary: Update Essentials Card
      description: |
        Updates the essentials card for an object type.
        #### Allowed For
        * Admins
      operationId: UpdateEssentialsCard
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EssentialsCardResponse'
              examples:
                default:
                  $ref: '#/components/examples/EssentialsCardExample'
    delete:
      tags:
      - Essentials Card
      summary: Delete Essentials Card
      description: |
        Delete the essentials card for an object type.
        #### Allowed For
        * Admins and agents
      operationId: DeleteEssentialsCard
      responses:
        "204":
          description: Success response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/EssentialsCardKey'
  /api/v2/object_layouts/essentials_cards:
    get:
      tags:
      - Essentials Card
      summary: List of Essentials Cards
      description: |
        Gets the list of essentials cards.
        #### Allowed For
        * Admins
      operationId: ShowEssentialsCards
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EssentialsCardsResponse'
              examples:
                default:
                  $ref: '#/components/examples/EssentialsCardsExample'
  /api/v2/organization_fields:
    get:
      tags:
      - Organization Fields
      summary: List Organization Fields
      description: |
        Returns a list of custom organization fields in your account. Fields are returned in the order that you specify in your organization fields configuration in Zendesk Support. Clients should cache this resource for the duration of their API usage and map the key for each organization field to the values returned under the `organization_fields` attribute on the [organization](/api-reference/ticketing/organizations/organizations/) resource.

        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For

        * Agents
      operationId: ListOrganizationFields
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationFieldsResponse'
              examples:
                default:
                  $ref: '#/components/examples/OrganizationFieldsResponseExample'
    post:
      tags:
      - Organization Fields
      summary: Create Organization Field
      description: |
        Creates any of the following custom field types:

        * text (default when no "type" is specified)
        * textarea
        * checkbox
        * date
        * integer
        * decimal
        * regexp
        * dropdown
        * lookup

        See [About custom field types](https://support.zendesk.com/hc/en-us/articles/203661866) in Zendesk help.

        #### Allowed For

        * Admins
      operationId: CreateOrganizationField
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationFieldResponse'
              examples:
                default:
                  $ref: '#/components/examples/OrganizationFieldCreateResponseExample'
  /api/v2/organization_fields/{organization_field_id}:
    get:
      tags:
      - Organization Fields
      summary: Show Organization Field
      description: |
        #### Allowed for

        * Agents
      operationId: ShowOrganizationField
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationFieldResponse'
              examples:
                default:
                  $ref: '#/components/examples/OrganizationFieldResponseExample'
    put:
      tags:
      - Organization Fields
      summary: Update Organization Field
      description: |
        #### Updating a Drop-down (Tagger) Field

        Drop-down fields return an array of `custom_field_options` which specify the name, value, and order of drop-down options. When updating a drop-down field, note the following information:

        - All options must be passed on update. Options that are not passed will be removed. As a result, these values will be removed from any organizations
        - To create a new option, pass a null `id` along with the `name` and `value`
        - To update an existing option, pass its `id` along with the `name` and `value`
        - To reorder an option, reposition it in the `custom_field_options` array relative to the other options
        - To remove an option, omit it from the list of options upon update

        #### Example Request

        ```bash
        curl https://{subdomain}.zendesk.com/api/v2/organization_fields/{organization_field_id}.json \
          -H "Content-Type: application/json" -X PUT \
          -d '{"organization_field": {"custom_field_options": [{"id": 124, "name": "Option 2", "value": "option_2"}, {"id": 123, "name": "Option 1", "value": "option_1"}, {"id": 125, "name": "Option 3", "value": "option_3"}]}}' \
          -v -u {email_address}:{password}
        ```
        #### Allowed for

        * Admins
      operationId: UpdateOrganizationField
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationFieldResponse'
              examples:
                default:
                  $ref: '#/components/examples/OrganizationFieldUpdateResponseExample'
    delete:
      tags:
      - Organization Fields
      summary: Delete Organization Field
      description: |
        #### Allowed for

        * Admins
      operationId: DeleteOrganizationField
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/OrganizationFieldId'
  /api/v2/organization_fields/reorder:
    put:
      tags:
      - Organization Fields
      summary: Reorder Organization Field
      description: |
        #### Allowed For

        * Admins
      operationId: ReorderOrganizationField
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
  /api/v2/organization_memberships:
    get:
      tags:
      - Organization Memberships
      summary: List Memberships
      description: |
        Returns a list of organization memberships for the account, user or organization in question.

        **Note**: When returning organization memberships for a user, organization memberships are sorted with the default organization first, and then by organization name.

        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For

        - Agents
        - End users
      operationId: ListOrganizationMemberships
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationMembershipsResponse'
              examples:
                default:
                  $ref: '#/components/examples/OrganizationMembershipsResponseExample'
    post:
      tags:
      - Organization Memberships
      summary: Create Membership
      description: |
        Assigns a user to a given organization. Returns an error with status 422 if the user is already assigned to the organization.

        #### Allowed For

        * Admins
        * Agents when creating a new organization membership for an end user
      operationId: CreateOrganizationMembership
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationMembershipResponse'
              examples:
                default:
                  $ref: '#/components/examples/OrganizationMembershipCreateResponseExample'
  /api/v2/organization_memberships/{organization_membership_id}:
    get:
      tags:
      - Organization Memberships
      summary: Show Membership
      description: |
        #### Allowed for

        * Agents
      operationId: ShowOrganizationMembershipById
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationMembershipResponse'
              examples:
                default:
                  $ref: '#/components/examples/OrganizationMembershipResponseExample'
    delete:
      tags:
      - Organization Memberships
      summary: Delete Membership
      description: |
        Immediately removes a user from an organization and schedules a job to unassign all working tickets currently assigned to the user and organization combination. The `organization_id` of the unassigned tickets is set to null.

        #### Allowed for

        * Admins
        * Agents when deleting an organization membership for an end user
      operationId: DeleteOrganizationMembership
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/OrganizationMembershipId'
  /api/v2/organization_memberships/create_many:
    post:
      tags:
      - Organization Memberships
      summary: Create Many Memberships
      description: |
        This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.

        #### Allowed For
        * Admins
        * Agents
      operationId: CreateManyOrganizationMemberships
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/OrganizationMembershipCreateManyResponseExample'
  /api/v2/organization_memberships/destroy_many:
    delete:
      tags:
      - Organization Memberships
      summary: Bulk Delete Memberships
      description: |
        Immediately removes a user from an organization and schedules a job to unassign all working tickets currently assigned to the user and organization combination. The `organization_id` of the unassigned tickets is set to null.

        #### Response

        This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.

        #### Allowed For

        * Agents
      operationId: DeleteManyOrganizationMemberships
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: ids
        in: query
        description: The IDs of the organization memberships to delete
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/JobStatusBulkDeleteResponseExample'
  /api/v2/organization_subscriptions:
    get:
      tags:
      - Organization Subscriptions
      summary: List Organization Subscriptions
      description: |-
        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For:

        * Agents
        * End users

        For end users, the response will only list the subscriptions created by the requesting end user.
      operationId: ListOrganizationSubscriptions
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationSubscriptionsResponse'
              examples:
                default:
                  $ref: '#/components/examples/OrganizationSubscriptionsResponseExample'
    post:
      tags:
      - Organization Subscriptions
      summary: Create Organization Subscription
      description: |-
        #### Allowed For:

        * Agents
        * End users

        End users can only subscribe to shared organizations in which they're members.
      operationId: CreateOrganizationSubscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationSubscriptionCreateRequest'
            examples:
              default:
                $ref: '#/components/examples/OrganizationSubscriptionCreateRequestExample'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationSubscriptionResponse'
              examples:
                default:
                  $ref: '#/components/examples/OrganizationSubscriptionResponseExample'
  /api/v2/organization_subscriptions/{organization_subscription_id}:
    get:
      tags:
      - Organization Subscriptions
      summary: Show Organization Subscription
      description: |-
        #### Allowed For:

        * Agents
        * End users

        For end users, the response will only list the subscriptions created by the requesting end user.
      operationId: ShowOrganizationSubscription
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/OrganizationSubscriptionId'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationSubscriptionResponse'
              examples:
                default:
                  $ref: '#/components/examples/OrganizationSubscriptionResponseExample'
    delete:
      tags:
      - Organization Subscriptions
      summary: Delete Organization Subscription
      description: |-
        #### Allowed For:

        * Agents
        * End users
      operationId: DeleteOrganizationSubscription
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/OrganizationSubscriptionId'
      responses:
        "204":
          description: No content
  /api/v2/organizations:
    get:
      tags:
      - Organizations
      summary: List Organizations
      description: |
        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For

        * Agents, with certain restrictions

        If the agent has a custom agent role that restricts their access to only users in their own organization, a 403 Forbidden error is returned. See [Creating custom agent roles](https://support.zendesk.com/hc/en-us/articles/203662026-Creating-custom-roles-and-assigning-agents#topic_cxn_hig_bd) in Zendesk help.
      operationId: ListOrganizations
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsResponse'
              examples:
                default:
                  $ref: '#/components/examples/OrganizationsResponseExample'
    post:
      tags:
      - Organizations
      summary: Create Organization
      description: |
        You must provide a unique `name` for each organization. Normally
        the system doesn't allow records to be created with identical names.
        However, a race condition can occur if you make two or more identical
        POSTs very close to each other, causing the records to have identical
        organization names.

        #### Allowed For

        * Admins
        * Agents assigned to a custom role with permissions to manage organizations (Enterprise only)
      operationId: CreateOrganization
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
              examples:
                default:
                  $ref: '#/components/examples/CreatedOrganizationResponseExample'
  /api/v2/organizations/{organization_id}:
    get:
      tags:
      - Organizations
      summary: Show Organization
      description: |
        #### Allowed For

        * Admins
        * Agents
      operationId: ShowOrganization
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
              examples:
                default:
                  $ref: '#/components/examples/OrganizationResponseExample'
    put:
      tags:
      - Organizations
      summary: Update Organization
      description: |
        #### Allowed For

        * Admins
        * Agents

        Agents with no permissions restrictions can only update "notes" on organizations.

        **Note:** Updating an organization's `domain_names` property overwrites all existing `domain_names` values. To prevent this, submit a complete list of `domain_names` for the organization in your request.

        #### Example Request

        ```js
        {
          "organization": {
            "notes": "Something interesting"
          }
        }
        ```
      operationId: UpdateOrganization
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
              examples:
                default:
                  $ref: '#/components/examples/UpdateOrganizationResponseExample'
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              examples:
                default:
                  value:
                    errors:
                    - code: TooManyRequests
                      title: Too many requests to update
    delete:
      tags:
      - Organizations
      summary: Delete Organization
      description: |
        #### Allowed For

        * Admins
        * Agents assigned to a custom role with permissions to manage organizations (Enterprise only)
      operationId: DeleteOrganization
      responses:
        "204":
          description: No Content Response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/OrganizationId'
  /api/v2/organizations/{organization_id}/related:
    get:
      tags:
      - Organizations
      summary: Show Organization's Related Information
      description: |
        #### Allowed For

        * Agents
      operationId: OrganizationRelated
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsRelatedResponse'
              examples:
                default:
                  $ref: '#/components/examples/OrganizationsRelatedResponse'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/OrganizationId'
  /api/v2/organizations/autocomplete:
    get:
      tags:
      - Organizations
      summary: Autocomplete Organizations
      description: |
        Returns an array of organizations whose name starts with the
        value specified in the `name` parameter.

        #### Pagination

        * Offset pagination only

        See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).

        #### Allowed For

        * Agents
      operationId: AutocompleteOrganizations
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsResponse'
              examples:
                default:
                  $ref: '#/components/examples/AutocompleteOrganizationsResponseExample'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              examples:
                default:
                  value:
                    errors:
                    - code: QueryError
                      title: Invalid type:sample_type
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              examples:
                default:
                  value:
                    errors:
                    - code: TooManyRequests
                      title: Too many requests to autocomplete
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              examples:
                default:
                  value:
                    errors:
                    - code: Unavailable
                      title: Internal Server Error
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/OrganizationQueryFragment'
    - $ref: '#/components/parameters/LookupRelationshipAutocompleteFieldIdFragment'
    - $ref: '#/components/parameters/LookupRelationshipAutocompleteSourceFragment'
  /api/v2/organizations/count:
    get:
      tags:
      - Organizations
      summary: Count Organizations
      description: |
        Returns an approximate count of organizations. If the count exceeds
        100,000, it is updated every 24 hours.

        The `refreshed_at` property of the `count` object is a timestamp that indicates
        when the count was last updated.

        When the count exceeds 100,000, the `refreshed_at` property may
        occasionally be null. This indicates that the count is being
        updated in the background and the `value` property of the `count` object is limited to
        100,000 until the update is complete.

        #### Allowed For

        * Agents
      operationId: CountOrganizations
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountOrganizationResponse'
              examples:
                default:
                  $ref: '#/components/examples/CountOrganizationsResponseExample'
  /api/v2/organizations/create_many:
    post:
      tags:
      - Organizations
      summary: Create Many Organizations
      description: |
        Accepts an array of up to 100 organization objects.

        #### Response

        This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.

        #### Allowed For

        * Agents, with restrictions applying on certain actions
      operationId: CreateManyOrganizations
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/ShowJobStatusResponseExample'
  /api/v2/organizations/create_or_update:
    post:
      tags:
      - Organizations
      summary: Create Or Update Organization
      description: |
        Creates an organization if it doesn't already exist, or updates
        an existing organization. Using this method means one less call
        to check if an organization exists before creating it. You need
        to specify the id or external id when updating
        an organization to avoid a duplicate error response. Name is
        not available as a matching criteria.

        #### Allowed For

        * Agents, with restrictions on certain actions
      operationId: CreateOrUpdateOrganization
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
              examples:
                default:
                  $ref: '#/components/examples/CreatedOrganizationResponseExample'
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
              examples:
                default:
                  $ref: '#/components/examples/CreatedOrganizationResponseExample'
  /api/v2/organizations/destroy_many:
    delete:
      tags:
      - Organizations
      summary: Bulk Delete Organizations
      description: |
        Accepts a comma-separated list of up to 100 organization ids or external ids.

        #### Response

        This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.

        #### Allowed For

        * Admins
        * Agents assigned to a custom role with permissions to manage organizations (Enterprise only)
      operationId: DeleteManyOrganizations
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/JobStatusBulkDeleteResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/OrganizationIds'
    - $ref: '#/components/parameters/OrganizationExternalIds'
  /api/v2/organizations/search:
    get:
      tags:
      - Organizations
      summary: Search Organizations
      description: |
        Returns an array of organizations matching the criteria. You may search by an organization's `external_id` or `name`, but not both:

        #### Searching by `external_id`

        If you set the `external_id` value of an organization to associate it to an external record, you can use it to search for the organization.

        For an organization to be returned, its `external_id` must exactly match the value provided (case insensitive).

        #### Searching by `name`

        For an organization to be returned, its `name` must exactly match the value provided (case insensitive).

        #### Allowed For:

        * Admins
        * Agents assigned to a custom role with permissions to add or modify organizations (Enterprise only)

        See [Creating custom agent roles](https://support.zendesk.com/hc/en-us/articles/203662026#topic_cxn_hig_bd) in the Support Help Center.
      operationId: SearchOrganizations
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsResponse'
              examples:
                default:
                  $ref: '#/components/examples/OrganizationsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/OrganizationExternalId'
    - $ref: '#/components/parameters/OrganizationName'
  /api/v2/organizations/show_many:
    get:
      tags:
      - Organizations
      summary: Show Many Organizations
      description: |
        Accepts a comma-separated list of up to 100 organization ids or external ids.

        #### Allowed For

        * Admins
        * Agents
      operationId: ShowManyOrganizations
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsResponse'
              examples:
                default:
                  $ref: '#/components/examples/AutocompleteOrganizationsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/OrganizationIds'
    - $ref: '#/components/parameters/OrganizationExternalIds'
  /api/v2/organizations/update_many:
    put:
      tags:
      - Organizations
      summary: Update Many Organizations
      description: |
        Bulk or batch updates up to 100 organizations.

        #### Bulk update

        To make the same change to multiple organizations, use the following endpoint and data format:

        `https://{subdomain}.zendesk.com/api/v2/organizations/update_many.json?ids=1,2,3`

        ```js
        {
          "organization": {
            "notes": "Priority"
          }
        }
        ```

        #### Batch update

        To make different changes to multiple organizations, use the following endpoint and data format:

        `https://{subdomain}.zendesk.com/api/v2/organizations/update_many.json`

        ```js
        {
          "organizations": [
            { "id": 1, "notes": "Priority" },
            { "id": 2, "notes": "Normal" }
          ]
        }
        ```

        #### Response

        This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.

        #### Allowed For

        * Admins
        * Agents

        Agents with no permissions restrictions can only update "notes" on organizations.
      operationId: UpdateManyOrganizations
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/ShowJobStatusResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/OrganizationIds'
    - $ref: '#/components/parameters/OrganizationExternalIds'
  /api/v2/problems:
    get:
      tags:
      - Tickets
      summary: List Ticket Problems
      description: |-
        The response is always ordered by `updated_at` in descending order

        #### Allowed For

        * Agents

        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).
      operationId: ListTicketProblems
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTicketProblemsResponse'
              examples:
                default:
                  $ref: '#/components/examples/ListTicketProblemsResponseExample'
  /api/v2/problems/autocomplete:
    post:
      tags:
      - Tickets
      summary: Autocomplete Problems
      description: |-
        Returns tickets whose type is "problem" and whose subject contains the string specified in the `text` parameter.

        You can specify the `text` parameter in the request body rather than the query string. Example:

        `{"text": "fire"}`

        #### Allowed For

        * Agents
      operationId: AutocompleteProblems
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: text
        in: query
        description: The text to search for
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProblemsAutocompleteBody'
            example:
              text: fire
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTicketProblemsResponse'
              examples:
                default:
                  $ref: '#/components/examples/ListTicketProblemsResponseExample'
  /api/v2/push_notification_devices/destroy_many:
    post:
      tags:
      - Push Notification Devices
      summary: Bulk Unregister Push Notification Devices
      description: |-
        Unregisters the mobile devices that are receiving push notifications. Specify the devices as an array of mobile device tokens.

        #### Allowed for

        * Admins
      operationId: PushNotificationDevices
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushNotificationDevicesRequest'
            examples:
              default:
                $ref: '#/components/examples/PushNotificationDevicesRequestExample'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: string
                description: empty
                example: ""
              example: ""
  /api/v2/queues:
    get:
      tags:
      - Omnichannel Routing Queues
      summary: List queues
      description: |
        #### Allowed For

        * Admins
      operationId: ListQueues
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuesResponse'
              examples:
                default:
                  $ref: '#/components/examples/QueuesResponseExample'
    post:
      tags:
      - Omnichannel Routing Queues
      summary: Create queue
      description: |
        #### Allowed For

        * Admins
      operationId: CreateQueue
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueResponse'
              examples:
                default:
                  $ref: '#/components/examples/QueueCreateResponseExample'
  /api/v2/queues/{queue_id}:
    get:
      tags:
      - Omnichannel Routing Queues
      summary: Show Queue
      description: |
        #### Allowed For

        * Admins
      operationId: ShowQueueById
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueResponse'
              examples:
                default:
                  $ref: '#/components/examples/QueueResponseExample'
    put:
      tags:
      - Omnichannel Routing Queues
      summary: Update queue
      description: |
        #### Allowed For

        * Admins
      operationId: UpdateQueue
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueResponse'
              examples:
                default:
                  $ref: '#/components/examples/QueuesUpdateResponseExample'
    delete:
      tags:
      - Omnichannel Routing Queues
      summary: Delete queue
      description: |
        #### Allowed For

        * Admins
      operationId: DeleteQueue
      responses:
        "204":
          description: No content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/OcrQueueId'
  /api/v2/queues/definitions:
    get:
      tags:
      - Omnichannel Routing Queues
      summary: List queue definitions
      description: |
        #### Allowed For

        * Admins
      operationId: ListQueueDefinitions
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefinitionsResponse'
              examples:
                default:
                  $ref: '#/components/examples/DefinitionsResponseExample'
  /api/v2/recipient_addresses:
    get:
      tags:
      - Support Addresses
      summary: List Support Addresses
      description: |
        Lists all the support addresses for the account.

        #### Pagination

        - Cursor pagination (recommended)
        - Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For

        * Admins
        * Agents
      operationId: ListSupportAddresses
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportAddressesResponse'
              examples:
                default:
                  $ref: '#/components/examples/SupportAddressesResponseExample'
    post:
      tags:
      - Support Addresses
      summary: Create Support Address
      description: |
        Adds a Zendesk or external support address to your account.

        To add a Zendesk address, use the following syntax: `{local-part}@{accountname}.zendesk.com`.
        Example: 'sales-team@example.zendesk.com'. The [local-part](https://en.wikipedia.org/wiki/Email_address#Local-part) can be anything you like.

        To add an external email address such as help@omniwearshop.com, the email must already exist and you must set up forwarding on your email server. The exact steps depend on your mail server. See [Forwarding incoming email to Zendesk Support](https://support.zendesk.com/hc/en-us/articles/203663266). After setting up forwarding, run the [Verify Support Address Forwarding](#verify-support-address-forwarding) endpoint. The address won't work in Zendesk Support until it's been verified.

        #### Allowed For

        * Admins
        * Agents with permission to manage channels and extensions. See the system permissions in [Creating custom roles and assigning agents (Enterprise)](https://support.zendesk.com/hc/en-us/articles/203662026-Creating-custom-roles-and-assigning-agents-Enterprise-#topic_cxn_hig_bd) in the Support Help Center
      operationId: CreateSupportAddress
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportAddressResponse'
              examples:
                default:
                  $ref: '#/components/examples/SupportAddressCreateResponseExample'
  /api/v2/recipient_addresses/{support_address_id}:
    get:
      tags:
      - Support Addresses
      summary: Show Support Address
      description: |
        #### Allowed For

        * Admins
        * Agents
      operationId: ShowSupportAddress
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportAddressResponse'
              examples:
                default:
                  $ref: '#/components/examples/SupportAddressResponseExample'
    put:
      tags:
      - Support Addresses
      summary: Update Support Address
      description: |
        Updates an existing support address for your account.

        You can't use this endpoint to update a support address's `email` property.
        Instead, you can create a new address using the [Create Support
        Address](#create-support-address) endpoint.

        #### Allowed For

        * Admins
        * Agents with permission to manage channels and extensions. See the system permissions in [Creating custom roles and assigning agents (Enterprise)](https://support.zendesk.com/hc/en-us/articles/203662026-Creating-custom-roles-and-assigning-agents-Enterprise-#topic_cxn_hig_bd) in the Support Help Center
      operationId: UpdateSupportAddress
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportAddressResponse'
              examples:
                default:
                  $ref: '#/components/examples/SupportAddressUpdateResponseExample'
    delete:
      tags:
      - Support Addresses
      summary: Delete Support Address
      description: |
        Deletes a support address.

        #### Allowed For

        * Admins
        * Agents with permission to manage channels and extensions. See the system permissions in [Creating custom roles and assigning agents (Enterprise)](https://support.zendesk.com/hc/en-us/articles/203662026-Creating-custom-roles-and-assigning-agents-Enterprise-#topic_cxn_hig_bd) in the Support Help Center
      operationId: DeleteRecipientAddress
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/SupportAddressId'
  /api/v2/recipient_addresses/{support_address_id}/verify:
    put:
      tags:
      - Support Addresses
      summary: Verify Support Address Forwarding
      description: |
        Sends a test email to the specified support address to verify that email forwarding for the address works. An external support address won't work in Zendesk Support until it's verified.

        **Note**: You don't need to verify Zendesk system support addresses.

        The endpoint takes the following body: `{"type": "forwarding"}`. The value of the `type` property defaults to "forwarding" if none is specified, but the values "spf" and "dns" are also accepted.

        Use this endpoint after [adding](#create-support-address) an external support address to Zendesk Support and setting up forwarding on your email server. See [Forwarding incoming email to Zendesk Support](https://support.zendesk.com/hc/en-us/articles/203663266).

        The endpoint doesn't return the results of the test. Instead, use the [Show Support Address](#show-support-address) endpoint to check that the `forwarding_status` property is "verified".

        Other verification checks can also be performed using this API. These include SPF checks and DNS checks.

        When calling the endpoint with `type` set to "spf", it will queries the DNS records to check that the SPF records for Zendesk are present for outbound emails.

        When calling the endpoint with `type` set to "dns", it runs checks on your CNAME records to make sure they are set up properly in your DNS.

        #### Allowed For

        * Admins
        * Agents with permission to manage channels and extensions. See the system permissions in [Creating custom roles and assigning agents (Enterprise)](https://support.zendesk.com/hc/en-us/articles/203662026-Creating-custom-roles-and-assigning-agents-Enterprise-#topic_cxn_hig_bd) in the Support Help Center
      operationId: VerifySupportAddressForwarding
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/SupportAddressId'
  /api/v2/relationships/definitions/{targetType}:
    get:
      tags:
      - Lookup Relationships
      summary: Filter Definitions
      description: |
        Returns filter definitions based on the given target type.  Target types
        include users (zen:user), tickets (zen:ticket), organizations (zen:organization), or custom objects (zen:custom_object:CUSTOM_OBJECT_KEY).
        The returned filter definitions are the options that you can use to build a custom field or ticket field's
        `relationship_filter`.
      operationId: GetRelationshipFilterDefinitions
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: targetType
        in: path
        description: |
          The target type for which you would like to see filter definitions.
          The options are "zen:user", "zen:ticket", "zen:organization", and "zen:custom_object:CUSTOM_OBJECT_KEY"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: zen:custom_object:apartment
      - name: source_type
        in: query
        description: |
          The source type for which you would like to see filter definitions.
          The options are "zen:user", "zen:ticket", and "zen:organization"
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: zen:user
        x-ballerina-name: sourceType
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipFilterDefinitionResponse'
              examples:
                default:
                  $ref: '#/components/examples/RelationshipFilterDefinitionExample'
  /api/v2/requests:
    get:
      tags:
      - Requests
      summary: List Requests
      description: |
        #### Allowed for

        * End Users

        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).
      operationId: ListRequests
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: sort_by
        in: query
        description: "Possible values are \"updated_at\", \"created_at\""
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: sortBy
      - name: sort_order
        in: query
        description: "One of \"asc\", \"desc\". Defaults to \"asc\""
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: sortOrder
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestsResponse'
              examples:
                default:
                  $ref: '#/components/examples/RequestsResponseExample'
    post:
      tags:
      - Requests
      summary: Create Request
      description: |
        Accepts a `request` object that sets one or more properties.

        #### Allowed for

        * End users
        * Anonymous users (rate limit of 5 requests per hour for [trial accounts](/documentation/developer-tools/getting-started/getting-a-trial-or-sponsored-account-for-development/))

        #### Additional properties

        In addition to the writable request properties in the [JSON Format table](#json-format) above, you can set the following properties when creating a request.

        | Name                | Type   | Mandatory | Comment
        | ----------------    | -------| --------- | -------
        | comment             | object | yes       | Describes the problem, incident, question, or task. See [Request comments](#request-comments)
        | collaborators       | array  | no        | Adds collaborators (cc's) to the request. An email notification is sent to them when the ticket is created. See [Setting collaborators](/documentation/ticketing/managing-tickets/creating-and-managing-requests#setting-collaborators)
        | requester           | object | yes*      | \*Required for anonymous requests. Specifies the requester of the anonymous request. See [Creating anonymous requests](/documentation/ticketing/managing-tickets/creating-and-managing-requests#creating-anonymous-requests)

        #### Creating follow-up requests

        Once a ticket is closed (as distinct from solved), it can't be reopened. However, you can create a new request that references the closed ticket. To create the follow-up request, include a `via_followup_source_id` property in the `request` object that specifies the closed ticket. The parameter only works with closed tickets. It has no effect with other tickets.
      operationId: CreateRequest
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestResponse'
              examples:
                default:
                  $ref: '#/components/examples/RequestCreateResponseExample'
  /api/v2/requests/{request_id}:
    get:
      tags:
      - Requests
      summary: Show Request
      description: |
        #### Sideloads

        The following sideloads are supported:

        | Name             | Will sideload
        | ---------------- | -------------
        | users            | The email ccs for a request by side-loading users

        #### Allowed For

        * End Users
      operationId: ShowRequest
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestResponse'
              examples:
                default:
                  $ref: '#/components/examples/RequestResponseExample'
    put:
      tags:
      - Requests
      summary: Update Request
      description: |
        Updates a request with a comment or collaborators (cc's). The end user who created the request can also use it to mark the request as solved. The endpoint can't be used to update other request attributes.

        #### Writable properties
        This endpoint can only update the following properties in the request.

        | Name                     | Type    | Required | Description                                          |
        | ------------------------ | ------- | -------- | ---------------------------------------------------- |
        | comment                  | object  | no       | Adds a comment to the request. See [Request comments](#request-comments) |
        | solved                   | boolean | no       | Marks the request as solved. Example: `{"request": {"solved": "true"}}`. End users can mark requests as solved only if the request's `can_be_solved_by_me` property is true. The property is true only when the ticket is assigned to an agent and the ticket type is not a problem but a question, task, or incident |
        | additional_collaborators | array   | no       | Adds collaborators to the request. An email notification is sent to them when the ticket is updated. See [Adding collaborators](/documentation/ticketing/managing-tickets/creating-and-managing-requests#adding-collaborators) |

        #### Allowed For

        * End users
      operationId: UpdateRequest
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestResponse'
              examples:
                default:
                  $ref: '#/components/examples/RequestCreateResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/RequestId'
  /api/v2/requests/{request_id}/comments:
    get:
      tags:
      - Requests
      summary: Listing Comments
      description: |
        #### Pagination

        - Cursor pagination (recommended)
        - Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        #### Sorting

        By default, comments are sorted by creation date in ascending order.

        When using cursor pagination, use the following parameter to change the sort order:

        | Name   | Type   | Required | Comments
        | ------ | ------ | -------- | --------
        | `sort` | string | no       | Possible values are "created_at" (ascending order) or "-created_at" (descending order)

        When using offset pagination, use the following parameters to change the sort order:

        | Name         | Type   | Required | Comments
        | ------------ | ------ | -------- | --------
        | `sort_by`    | string | no       | One of `created_at`, `updated_at`
        | `sort_order` | string | no       | One of `asc`, `desc`

        #### Allowed For

        * End Users
      operationId: ListComments
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: since
        in: query
        description: Filters the comments from the given datetime
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: role
        in: query
        description: "One of \"agent\", \"end_user\". If not specified it does not\
          \ filter"
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketCommentsResponse'
              examples:
                default:
                  $ref: '#/components/examples/RequestListCommentsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/RequestId'
  /api/v2/requests/{request_id}/comments/{ticket_comment_id}:
    get:
      tags:
      - Requests
      summary: Getting Comments
      description: |
        #### Allowed For

        * End Users
      operationId: ShowComment
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketCommentResponse'
              examples:
                default:
                  $ref: '#/components/examples/RequestGetCommentResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/RequestId'
    - $ref: '#/components/parameters/TicketCommentId'
  /api/v2/requests/search:
    get:
      tags:
      - Requests
      summary: Search Requests
      description: |
        Examples:

        * `GET /api/v2/requests/search.json?query=printer`
        * `GET /api/v2/requests/search.json?query=printer&organization_id=1`
        * `GET /api/v2/requests/search.json?query=printer&cc_id=true`
        * `GET /api/v2/requests/search.json?query=printer&status=hold,open`

        #### Pagination

        * Offset pagination only

        See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).

        #### Results limit

        The Search Requests endpoint returns up to 1,000 results per query, with a maximum of 100 results per page. See [Pagination](/api-reference/ticketing/introduction/#pagination). If you request a page past the limit (`page=11` at 100 results per page), a 422 Insufficient Resource Error is returned.

        #### Allowed For

        * End Users
      operationId: SearchRequests
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: query
        in: query
        description: "The syntax and matching logic for the string is detailed in\
          \ the [Zendesk Support search reference](https://support.zendesk.com/hc/en-us/articles/203663226).\
          \ See also [Query basics](/api-reference/ticketing/ticket-management/search/#query-basics)\
          \ in the Tickets API doc"
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestsResponse'
              examples:
                default:
                  $ref: '#/components/examples/RequestsResponseExample'
  /api/v2/resource_collections:
    get:
      tags:
      - Resource Collections
      summary: List Resource Collections
      description: |
        Lists resource collections for the account.

        #### Allowed for

        * Admins
      operationId: ListResourceCollections
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionsResponse'
              examples:
                default:
                  $ref: '#/components/examples/ResourceCollectionsResponseExample'
    post:
      tags:
      - Resource Collections
      summary: Create Resource Collection
      description: |
        Creates a resource collection from a provided `payload` object. The `payload` object is specified the same way as the content of a requirements.json file in a Zendesk app. See [Specifying Apps Requirements](/documentation/apps/app-developer-guide/apps_requirements/) in the Zendesk Apps framework docs.

        The response includes a [job
        status](/api-reference/ticketing/ticket-management/job_statuses/) for creation of the specified resources.

        #### Allowed for

        * Admins
      operationId: CreateResourceCollection
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/ResourceCollectionCreateResponseExample'
  /api/v2/resource_collections/{resource_collection_id}:
    get:
      tags:
      - Resource Collections
      summary: Show Resource Collection
      description: |
        Retrieves details for a specified resource collection.

        #### Allowed for

        * Admins
      operationId: RetrieveResourceCollection
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionResponse'
              examples:
                default:
                  $ref: '#/components/examples/ResourceCollectionResponseExample'
    put:
      tags:
      - Resource Collections
      summary: Update Resource Collection
      description: |
        Updates a resource collection using a provided `payload` object. The `payload` object  is specified the same way as the content of a requirements.json file in a Zendesk app. See [Specifying Apps Requirements](/documentation/apps/app-developer-guide/apps_requirements/) in the Zendesk Apps framework docs.

        The response includes a [job
        status](/api-reference/ticketing/ticket-management/job_statuses/) for the resource updates.

        #### Allowed for

        * Admins
      operationId: UpdateResourceCollection
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/ResourceCollectionUpdateResponseExample'
    delete:
      tags:
      - Resource Collections
      summary: Delete Resource Collection
      description: |
        Deletes a specified resource collection.

        The response includes a [job
        status](/api-reference/ticketing/ticket-management/job_statuses/) for deletion of the collection's resources.

        #### Allowed for

        * Admins
      operationId: DeleteResourceCollection
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/ResourceCollectionDeleteResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/ResourceCollectionId'
  /api/v2/routing/agents/{user_id}/instance_values:
    get:
      tags:
      - Skill Based Routing
      summary: List Agent Attribute Values
      description: |
        Returns an attribute value.

        #### Allowed For

        * Agents and admins
      operationId: ListAGentAttributeValues
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillBasedRoutingAttributeValuesResponse'
              examples:
                default:
                  $ref: '#/components/examples/SkillBasedRoutingAttributeValuesResponseExample'
    post:
      tags:
      - Skill Based Routing
      summary: Set Agent Attribute Values
      description: |
        Adds the specified attributes if no attributes exists, or replaces all existing attributes with the specified attributes.

        #### Allowed For

        * Admins
      operationId: SetAgentAttributeValues
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillBasedRoutingAttributeValuesResponse'
              examples:
                default:
                  $ref: '#/components/examples/SkillBasedRoutingAttributeValuesResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserId'
  /api/v2/routing/attributes:
    get:
      tags:
      - Skill Based Routing
      summary: List Account Attributes
      description: |
        Returns a list of attributes for the account.

        #### Sideloads

        The following sideloads are supported:

        | Name             | Will sideload
        | ---------------- | -------------
        | attribute_values | The attribute values available on the account

        #### Allowed For

        * Agents and admins
      operationId: ListAccountAttributes
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillBasedRoutingAttributesResponse'
              examples:
                default:
                  $ref: '#/components/examples/SkillBasedRoutingAttributesResponseExample'
    post:
      tags:
      - Skill Based Routing
      summary: Create Attribute
      description: |
        Creates an attribute.

        #### Allowed For

        * Agents
      operationId: CreateAttribute
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillBasedRoutingAttributeResponse'
              examples:
                default:
                  $ref: '#/components/examples/SkillBasedRoutingAttributeCreateResponseExample'
  /api/v2/routing/attributes/{attribute_id}:
    get:
      tags:
      - Skill Based Routing
      summary: Show Attribute
      description: |
        Returns an attribute.

        #### Allowed For

        * Admins
      operationId: ShowAttribute
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillBasedRoutingAttributeResponse'
              examples:
                default:
                  $ref: '#/components/examples/SkillBasedRoutingAttributeResponseExample'
    put:
      tags:
      - Skill Based Routing
      summary: Update Attribute
      description: |
        Updates an attribute.

        #### Allowed For

        * Admins
      operationId: UpdateAttribute
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillBasedRoutingAttributeResponse'
              examples:
                default:
                  $ref: '#/components/examples/SkillBasedRoutingAttributeUpdateResponseExample'
    delete:
      tags:
      - Skill Based Routing
      summary: Delete Attribute
      description: |
        Deletes an attribute.

        #### Allowed For

        * Admins
      operationId: DeleteAttribute
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/SkillBasedRoutingAttributeId'
  /api/v2/routing/attributes/{attribute_id}/values:
    get:
      tags:
      - Skill Based Routing
      summary: List Attribute Values for an Attribute
      description: |
        Returns a list of attribute values for a provided attribute.

        #### Allowed For

        * Admins
      operationId: ListAttributeValues
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillBasedRoutingAttributeValuesResponse'
              examples:
                default:
                  $ref: '#/components/examples/SkillBasedRoutingAttributeValuesResponseExample'
    post:
      tags:
      - Skill Based Routing
      summary: Create Attribute Value
      description: |
        Creates an attribute value.

        #### Allowed For

        * Admins
      operationId: CreateAttributeValue
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillBasedRoutingAttributeValueResponse'
              examples:
                default:
                  $ref: '#/components/examples/SkillBasedRoutingAttributeValueCreateResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/SkillBasedRoutingAttributeId'
  /api/v2/routing/attributes/{attribute_id}/values/{attribute_value_id}:
    get:
      tags:
      - Skill Based Routing
      summary: Show Attribute Value
      description: |
        Returns an attribute value.

        #### Allowed For

        * Admins
      operationId: ShowAttributeValue
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillBasedRoutingAttributeValueResponse'
              examples:
                default:
                  $ref: '#/components/examples/SkillBasedRoutingAttributeValueResponseExample'
    delete:
      tags:
      - Skill Based Routing
      summary: Delete Attribute Value
      description: |
        Deletes an attribute value.

        #### Allowed For

        * Agents
      operationId: DeleteAttributeValue
      responses:
        "204":
          description: No Content response
    patch:
      tags:
      - Skill Based Routing
      summary: Update Attribute Value
      description: |
        Updates an attribute value.

        #### Allowed For

        * Admins
      operationId: UpdateAttributeValue
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillBasedRoutingAttributeValueResponse'
              examples:
                default:
                  $ref: '#/components/examples/SkillBasedRoutingAttributeValueUpdateResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/SkillBasedRoutingAttributeId'
    - $ref: '#/components/parameters/SkillBasedRoutingAttributeValueId'
  /api/v2/routing/attributes/definitions:
    get:
      tags:
      - Skill Based Routing
      summary: List Routing Attribute Definitions
      description: |
        Returns the condition definitions that can be configured to apply attributes to a ticket.

        #### Allowed For

        * Admins
      operationId: ListRoutingAttributeDefinitions
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillBasedRoutingAttributeDefinitions'
              examples:
                default:
                  $ref: '#/components/examples/SkillBasedRoutingAttributeDefinitionsExample'
  /api/v2/routing/requirements/fulfilled:
    get:
      tags:
      - Skill Based Routing
      summary: List Tickets Fulfilled by a User
      description: |
        Returns a list of ticket ids that contain attributes matching the current user's attributes. Accepts a `ticket_ids` parameter for relevant tickets to check for matching attributes.

        #### Allowed For

        * Agents and admins
      operationId: ListTicketsFullfilledByUser
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: ticket_ids
        in: query
        description: The IDs of the relevant tickets to check for matching attributes
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 1
        x-ballerina-name: ticketIds
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillBasedRoutingTicketFulfilledResponse'
              examples:
                default:
                  $ref: '#/components/examples/SkillBasedRoutingTicketFulfilledResponseExample'
  /api/v2/routing/tickets/{ticket_id}/instance_values:
    get:
      tags:
      - Skill Based Routing
      summary: List Ticket Attribute Values
      description: |
        Returns a list of attributes values for the ticket.

        #### Allowed For

        * Agents and admins
      operationId: ListTicketAttributeValues
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillBasedRoutingAttributeValuesResponse'
              examples:
                default:
                  $ref: '#/components/examples/SkillBasedRoutingTicketAttributesResponseExample'
    post:
      tags:
      - Skill Based Routing
      summary: Set Ticket Attribute Values
      description: |
        Adds the specified attributes if no attributes exists, or replaces all existing attributes with the specified attributes.

        Invalid or deleted attributes are ignored.

        #### Allowed For

        * Admins
      operationId: SetTicketAttributeValues
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillBasedRoutingAttributeValuesResponse'
              examples:
                default:
                  $ref: '#/components/examples/SkillBasedRoutingTicketAttributesResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TicketId'
  /api/v2/satisfaction_ratings:
    get:
      tags:
      - Satisfaction Ratings
      summary: List Satisfaction Ratings
      description: |
        #### Allowed For
        * Agents

        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        #### Filters

        | Parameter  | Value
        | ---------- | -----
        | score      | offered, unoffered, received, received\_with\_comment, received\_without\_comment,<br/>good, good\_with\_comment, good\_without\_comment,<br/>bad, bad\_with\_comment, bad\_without\_comment
        | start_time | Time of the oldest satisfaction rating, as a [Unix epoch time](https://www.epochconverter.com/)
        | end_time   | Time of the most recent satisfaction rating, as a [Unix epoch time](https://www.epochconverter.com/)

        If you specify an unqualified score such as `good`, the results include all the records with and without comments.

        Examples:

        * `/api/v2/satisfaction_ratings.json?score=bad`
        * `/api/v2/satisfaction_ratings.json?score=bad&start_time=1498151194`
        * `/api/v2/satisfaction_ratings.json?start_time=1340384793&end_time=1371920793`
      operationId: ListSatisfactionRatings
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SatisfactionRatingsResponse'
              examples:
                default:
                  $ref: '#/components/examples/SatisfactionRatingsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
  /api/v2/satisfaction_ratings/{satisfactionRatingId}:
    get:
      tags:
      - Satisfaction Ratings
      summary: Show Satisfaction Rating
      description: |
        Returns a specific satisfaction rating. You can get the id from
        the [List Satisfaction Ratings](#list-satisfaction-ratings) endpoint.

        #### Allowed For

         * Admins
      operationId: ShowSatisfactionRating
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: satisfactionRatingId
        in: path
        description: The id of the satisfaction rating to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
        example: 35436
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SatisfactionRatingResponse'
              examples:
                default:
                  $ref: '#/components/examples/SatisfactionRatingResponseExample'
  /api/v2/satisfaction_ratings/count:
    get:
      tags:
      - Satisfaction Ratings
      summary: Count Satisfaction Ratings
      description: |-
        Returns an approximate count of satisfaction ratings in the account. If the count exceeds 100,000, the count will return a cached result. This cached result will update every 24 hours.

        The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.

        **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
        This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.

        #### Allowed For
        * Agents
      operationId: CountSatisfactionRatings
      responses:
        "200":
          description: Count of satisfaction ratings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SatisfactionRatingsCountResponse'
              examples:
                default:
                  $ref: '#/components/examples/SatisfactionRatingsCountResponseExample'
  /api/v2/satisfaction_reasons:
    get:
      tags:
      - Satisfaction Reasons
      summary: List Reasons for Satisfaction Rating
      description: |
        List all reasons for an account

        #### Allowed For

        * Admins
      operationId: ListSatisfactionRatingReasons
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SatisfactionReasonsResponse'
              examples:
                default:
                  $ref: '#/components/examples/SatisfactionReasonsResponseExample'
  /api/v2/satisfaction_reasons/{satisfactionReasonId}:
    get:
      tags:
      - Satisfaction Reasons
      summary: Show Reason for Satisfaction Rating
      description: |
        #### Allowed For

        * Admins
      operationId: ShowSatisfactionRatings
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: satisfactionReasonId
        in: path
        description: The id of the satisfaction rating reason
        required: true
        style: simple
        explode: false
        schema:
          type: integer
        example: 35121
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SatisfactionReasonResponse'
              examples:
                default:
                  $ref: '#/components/examples/SatisfactionReasonResponseExample'
  /api/v2/search:
    get:
      tags:
      - Search
      summary: List Search Results
      description: "Use the ampersand character (&) to append the `sort_by` or `sort_order`\
        \ parameters to the URL.\n\nFor examples, see [Searching with Zendesk API](/documentation/ticketing/using-the-zendesk-api/searching-with-the-zendesk-api).\n\
        \n#### Pagination\n\n* Offset pagination only\n\nOffset pagination may result\
        \ in duplicate results when paging. You can also use the \n[Export Search\
        \ Results](/api-reference/ticketing/ticket-management/search/#export-search-results)\
        \ endpoint, which \nuses cursor-based pagination and doesn't return duplicate\
        \ results. See \n[Pagination](/api-reference/introduction/pagination/) for\
        \ more information.\n\n#### Allowed For\n\n* Admins, Agents and Light Agents\n\
        \n\n#### Errors JSON Format\n\nErrors are represented as JSON objects which\
        \ have the following keys:\n\n| Name                  | Type             \
        \    | Comment\n| --------------------- | ---------------------| --------------------\n\
        | error                 | string               | The type of error. Examples:\
        \ \"unavailable\", \"invalid\"\n| description           | string         \
        \      |\n\n##### Example Error\n```js\n{\n  \"error\": \"unavailable\",\n\
        \  \"description\": \"Sorry, we could not complete your search query. Please\
        \ try again in a moment.\"\n}\n```\n"
      operationId: ListSearchResults
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: query
        in: query
        description: "The search query. See [Query basics](#query-basics) above. For\
          \ details on the query syntax, see the [Zendesk Support search reference](https://support.zendesk.com/hc/en-us/articles/203663226)"
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: https://subdomain.zendesk.com/api/v2/search.json?query=type:ticket
          status:closed&sort_by=status&sort_order=desc
      - name: sort_by
        in: query
        description: "One of `updated_at`, `created_at`, `priority`, `status`, or\
          \ `ticket_type`. Defaults to sorting by relevance"
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: sortBy
      - name: sort_order
        in: query
        description: One of `asc` or `desc`.  Defaults to `desc`
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: sortOrder
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
              examples:
                default:
                  $ref: '#/components/examples/SearchResponseExample'
  /api/v2/search/count:
    get:
      tags:
      - Search
      summary: Show Results Count
      description: |
        Returns the number of items matching the query rather than the items. The search string works the same as a regular search.
      operationId: CountSearchResults
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: query
        in: query
        description: The search query
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: https://subdomain.zendesk.com/api/v2/search.json?query=type:ticket
          status:closed
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchCountResponse'
              examples:
                default:
                  $ref: '#/components/examples/SearchCountResponseExample'
  /api/v2/search/export:
    get:
      tags:
      - Search
      summary: Export Search Results
      description: |
        Exports a set of results. See [Query basics](#query-basics) for the syntax of the `query` parameter.

        This endpoint is for search queries that will return more than 1000 results. The result set is ordered only by the `created_at` attribute.

        The search only returns results of a single object type. The following object types are supported: ticket, organization, user, or group.

        You must specify the type in the `filter[type]` parameter. Searches with type in the query string will result in an error.

        #### Allowed For

        - Agents

        #### Pagination

        - Cursor pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 1000 records per page. The number of results shown in a page is determined by the `page[size]` parameter.

        **Note**: You may experience a speed reduction or a timeout if you request 1000 results per page and you have many archived tickets in the results. Try reducing the number of results per page. We recommend 100 results per page.

        The cursor specified by the `after_cursor` property in a response expires after one hour.

        For more information on cursor-based pagination, see the following articles:

        - [Comparing cursor pagination and offset pagination](/documentation/developer-tools/pagination/comparing-cursor-pagination-and-offset-pagination)
        - [Paginating through lists using cursor pagination](/documentation/developer-tools/pagination/paginating-through-lists-using-cursor-pagination)

        #### Limits

        This API endpoint is rate-limited to 100 requests per minute per account. The limit also counts towards the global API rate limit.

        #### Response Format

        | Name                  | Type                 | Comment
        | --------------------- | ---------------------| --------------------
        | links[next]           | string               | URL to the next page of results
        | meta[has_more]        | string               | Boolean indicating if there are more results
        | meta[after_cursor]    | string               | Cursor object returned from the Search Service
        | results               | array                | May consist of tickets, users, groups, or organizations, as specified by the `filter_type` parameter

        The response is similar to the response of `GET /api/v2/search.json?`, with a few changes:

        * `links` - Has the following nested properties: `prev` and `next`. These replace the `next_page` and `prev_page` links. The `prev` property is always null because backward pagination is not supported. The `next` property may include an auto-generated link to the next page of results.
        * `meta` - Has the following nested properties: `has_more` and `after_cursor`. The `has_more` property indicates whether the next page has more results. The `after_cursor` property is the cursor used to paginate to the next page. It expires after one hour.

        There's no `count` property.
      operationId: ExportSearchResults
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: query
        in: query
        description: "The search query. See [Query basics](#query-basics) above. For\
          \ details on the query syntax, see the [Zendesk Support search reference](https://support.zendesk.com/hc/en-us/articles/203663226)"
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: https://subdomain.zendesk.com/api/v2/search.json?query=type:ticket
          status:closed&sort_by=status&sort_order=desc
      - name: "page[size]"
        in: query
        description: The number of results shown in a page
        required: false
        style: form
        explode: true
        schema:
          type: integer
        x-ballerina-name: pageSize
      - name: "filter[type]"
        in: query
        description: "The object type returned by the export query. Can be `ticket`,\
          \ `organization`, `user`, or `group`"
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: filterType
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchExportResponse'
              examples:
                default:
                  $ref: '#/components/examples/SearchExportResponseExample'
  /api/v2/sessions:
    get:
      tags:
      - Sessions
      summary: List Sessions
      description: |
        If authenticated as an admin, returns all the account's sessions. If authenticated as an agent or end user, returns only the sessions of the user making the request.

        #### Pagination

        - Cursor pagination (recommended)
        - Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        #### Allowed For

        * Admins, Agents, End users
      operationId: ListSessions
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionsResponse'
              examples:
                default:
                  $ref: '#/components/examples/SessionsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserId'
  /api/v2/sharing_agreements:
    get:
      tags:
      - Sharing Agreements
      summary: List Sharing Agreements
      description: |
        #### Allowed For

        * Agents
      operationId: ListSharingAgreements
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharingAgreementsResponse'
              examples:
                default:
                  $ref: '#/components/examples/SharingAgreementsResponseExample'
    post:
      tags:
      - Sharing Agreements
      summary: Create Sharing Agreement
      description: |
        #### Allowed For

        * Admins
      operationId: CreateSharingAgreement
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharingAgreementResponse'
              examples:
                default:
                  $ref: '#/components/examples/SharingAgreementResponseExample'
  /api/v2/sharing_agreements/{sharing_agreement_id}:
    get:
      tags:
      - Sharing Agreements
      summary: Show a Sharing Agreement
      description: |
        Returns a sharing agreement for your account.

        #### Allowed For

        * Agents
      operationId: ShowSharingAgreement
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharingAgreementResponse'
              examples:
                default:
                  $ref: '#/components/examples/SharingAgreementResponseExample'
    put:
      tags:
      - Sharing Agreements
      summary: Update a Sharing Agreement
      description: |
        Returns an updated sharing agreement. Only `status` is allowed to be updated.

        #### Allowed For

        * Admins
      operationId: UpdateSharingAgreement
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharingAgreementResponse'
              examples:
                default:
                  $ref: '#/components/examples/SharingAgreementUpdateResponseExample'
    delete:
      tags:
      - Sharing Agreements
      summary: Delete a Sharing Agreement
      description: |
        Deletes a sharing agreement.

        #### Allowed For

        * Admins
      operationId: DeleteSharingAgreement
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/SharingAgreementId'
  /api/v2/skips:
    post:
      tags:
      - Ticket Skips
      summary: Record a New Skip for the Current User
      description: |
        Record a new ticket skip for the current user.

        #### Allowed For

        * Agents
      operationId: RecordNewSkip
      responses:
        "201":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketSkipCreation'
              examples:
                default:
                  $ref: '#/components/examples/TicketSkipCreationExample'
  /api/v2/slas/policies:
    get:
      tags:
      - SLA Policies
      summary: List SLA Policies
      description: |
        #### Availability

        * Accounts on the Support Professional or Suite Growth plan or above

        #### Allowed For

        * Admins
      operationId: ListSLAPolicies
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLAPoliciesResponse'
              examples:
                default:
                  $ref: '#/components/examples/SLAPoliciesResponseExample'
    post:
      tags:
      - SLA Policies
      summary: Create SLA Policy
      description: |
        #### Availability

        * Accounts on the Support Professional or Suite Growth plan or above

        #### Allowed For

        * Admins
      operationId: CreateSLAPolicy
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLAPolicyResponse'
              examples:
                default:
                  $ref: '#/components/examples/SLAPolicyCreateResponse'
  /api/v2/slas/policies/{sla_policy_id}:
    get:
      tags:
      - SLA Policies
      summary: Show SLA Policy
      description: |
        #### Availability

        * Accounts on the Support Professional or Suite Growth plan or above

        #### Allowed For

        * Admins
      operationId: ShowSLAPolicy
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLAPolicyResponse'
              examples:
                default:
                  $ref: '#/components/examples/SLAPolicyResponseExample'
    put:
      tags:
      - SLA Policies
      summary: Update SLA Policy
      description: |
        Updates the specified policy.

        #### Availability

        * Accounts on the Support Professional or Suite Growth plan or above

        #### Allowed For

        * Admins
      operationId: UpdateSLAPolicy
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLAPolicyResponse'
              examples:
                default:
                  $ref: '#/components/examples/SLAPolicyUpdateResponse'
    delete:
      tags:
      - SLA Policies
      summary: Delete SLA Policy
      description: |
        #### Availability

        * Accounts on the Support Professional or Suite Growth plan or above

        #### Allowed For

        * Admins
      operationId: DeleteSLAPolicy
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/SLAPolicyId'
  /api/v2/slas/policies/definitions:
    get:
      tags:
      - SLA Policies
      summary: Retrieve Supported Filter Definition Items
      description: |
        #### Availability

        * Accounts on the Support Professional or Suite Growth plan or above

        #### Allowed For

        * Admins
      operationId: RetrieveSLAPolicyFilterDefinitionItems
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLAPolicyFilterDefinitionResponse'
              examples:
                default:
                  $ref: '#/components/examples/SLAPolicyFilterDefinitionResponseExample'
  /api/v2/slas/policies/reorder:
    put:
      tags:
      - SLA Policies
      summary: Reorder SLA Policies
      description: |
        #### Availability

        * Accounts on the Support Professional or Suite Growth plan or above

        #### Allowed For

        * Admins
      operationId: ReorderSLAPolicies
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: sla_policy_ids
        in: query
        description: The IDs of the SLA Policies to reorder
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
        x-ballerina-name: slaPolicyIds
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
  /api/v2/suspended_tickets:
    get:
      tags:
      - Suspended Tickets
      summary: List Suspended Tickets
      description: |
        #### Allowed For

        * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
        * Unrestricted agents on all other plans

        #### Sorting

        You can sort the tickets with the `sort_by` and `sort_order` query string parameters.

        #### Pagination

        * Cursor pagination

        See [Pagination](/api-reference/introduction/pagination/).
      operationId: ListSuspendedTickets
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuspendedTicketsResponse'
              examples:
                default:
                  $ref: '#/components/examples/SuspendedTicketsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/SuspendedTicketsSortBy'
    - $ref: '#/components/parameters/SuspendedTicketsSortOrder'
  /api/v2/suspended_tickets/{id}:
    get:
      tags:
      - Suspended Tickets
      summary: Show Suspended Ticket
      description: |
        #### Allowed For

        * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
        * Unrestricted agents on all other plans
      operationId: ShowSuspendedTickets
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/SuspendedTicketId'
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuspendedTicketsResponse'
              examples:
                default:
                  $ref: '#/components/examples/SuspendedTicketsResponseExample'
    delete:
      tags:
      - Suspended Tickets
      summary: Delete Suspended Ticket
      description: |
        #### Allowed For

        * Unrestricted agents
      operationId: DeleteSuspendedTicket
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/SuspendedTicketId'
      responses:
        "204":
          description: No Content response
  /api/v2/suspended_tickets/{id}/recover:
    put:
      tags:
      - Suspended Tickets
      summary: Recover Suspended Ticket
      description: |
        **Note**: During recovery, the API sets the requester to the authenticated agent who called the API, not the original requester. This prevents the ticket from being re-suspended after recovery. To preserve the original requester, use the [Recover Multiple Suspended Tickets](#recover-multiple-suspended-tickets) endpoint with the single ticket.

        This endpoint does not queue an asynchronous job that can be tracked from [Job Statuses](/api-reference/ticketing/ticket-management/job_statuses/). Instead, it processes the request with a synchronous response.
           - If all recoveries are successful, it returns a 200 with a `tickets` array in the response.
           - If all recoveries fail, it returns a 422 with a `suspended_tickets` array in the response.
           - If there is a mixture of successes and failures in a single call, it returns a 422 with a `suspended_tickets` array of the failures in the response.

        #### Allowed For

        * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
        * Unrestricted agents on all other plans
      operationId: RecoverSuspendedTicket
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/SuspendedTicketId'
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecoverSuspendedTicketResponse'
              examples:
                default:
                  $ref: '#/components/examples/RecoverSuspendedTicketResponseExample'
        "422":
          description: Recovery failed response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecoverSuspendedTicketUnprocessableContentResponse'
              examples:
                default:
                  $ref: '#/components/examples/RecoverSuspendedTicketUnprocessableContentResponseExample'
  /api/v2/suspended_tickets/attachments:
    post:
      tags:
      - Suspended Tickets
      summary: Suspended Ticket Attachments
      description: |
        Makes copies of any attachments on a suspended ticket and returns them as [attachment tokens](/api-reference/ticketing/tickets/ticket-attachments/). If the  ticket is manually recovered, you can include the attachment tokens on the new ticket.

        #### Allowed For

        * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
        * Unrestricted agents on all other plans
      operationId: SuspendedTicketsAttachments
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuspendedTicketsAttachmentsResponse'
              examples:
                default:
                  $ref: '#/components/examples/SuspendedTicketsAttachmentsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/SuspendedTicketId'
  /api/v2/suspended_tickets/destroy_many:
    delete:
      tags:
      - Suspended Tickets
      summary: Delete Multiple Suspended Tickets
      description: |
        Accepts up to 100 ids (the auto-generated id, not the ticket id.)

        #### Allowed For

        * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
        * Unrestricted agents on all other plans
      operationId: DeleteSuspendedTickets
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/SuspendedTicketsDeleteIds'
  /api/v2/suspended_tickets/export:
    post:
      tags:
      - Suspended Tickets
      summary: Export Suspended Tickets
      description: |
        Exports a list of suspended tickets for the Zendesk Support instance. To export the list, the endpoint enqueues a job to create a CSV file with the data. When done, Zendesk sends the requester an email containing a link to the CSV file. In the CSV, tickets are sorted by the update timestamp in ascending order.

         #### Allowed For

         * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
         * Unrestricted agents on all other plans

         #### Rate limits

         Limited to one request per minute and up to one million records in return. The rate-limiting mechanism behaves identically to the one described in [Usage limits](/api-reference/ticketing/account-configuration/usage_limits/#monitoring-your-request-activity).
         We recommend using the `Retry-After` header value as described in [Catching errors caused by rate limiting](/documentation/ticketing/using-the-zendesk-api/best-practices-for-avoiding-rate-limiting#catch).
      operationId: ExportSuspendedTickets
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuspendedTicketsExportResponse'
              examples:
                default:
                  $ref: '#/components/examples/SuspendedTicketsExportResponseExample'
  /api/v2/suspended_tickets/recover_many:
    put:
      tags:
      - Suspended Tickets
      summary: Recover Multiple Suspended Tickets
      description: |
        Accepts up to 100 ids (the auto-generated id, not the ticket id.) Note that suspended tickets that fail to be recovered are still included in the response.

        #### Allowed For

        * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
        * Unrestricted agents on all other plans
      operationId: RecoverSuspendedTickets
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecoverSuspendedTicketsResponse'
              examples:
                default:
                  $ref: '#/components/examples/RecoverSuspendedTicketsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/SuspendedTicketsRecoverIds'
  /api/v2/tags:
    get:
      tags:
      - Tags
      summary: List Tags
      description: |
        Lists up to the 20,000 most popular tags in the last 60 days, in decreasing popularity.

        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For

        * Agents
      operationId: ListTags
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsResponse'
              examples:
                default:
                  $ref: '#/components/examples/TagsResponseExample'
  /api/v2/tags/count:
    get:
      tags:
      - Tags
      summary: Count Tags
      description: |
        Returns an approximate count of tags. If the count exceeds 100,000, it
        is updated every 24 hours.

        The `refreshed_at` property of the `count` object is a timestamp that indicates when
        the count was last updated.

        **Note**: When the count exceeds 100,000, the `refreshed_at` property in the `count` object may
        occasionally be null. This indicates that the count is being
        updated in the background and the `value` property in the `count` object is limited to
        100,000 until the update is complete.

        #### Allowed For

        * Admins
      operationId: CountTags
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagCountResponse'
              examples:
                default:
                  $ref: '#/components/examples/TagCountResponseExample'
  /api/v2/target_failures:
    get:
      tags:
      - Target Failures
      summary: List Target Failures
      description: |
        Returns the 25 most recent target failures, per target.

        #### Stability

        * Development

        #### Allowed For

        * Admins
      operationId: ListTargetFailures
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetFailuresResponse'
              examples:
                default:
                  $ref: '#/components/examples/TargetFailuresResponseExample'
  /api/v2/target_failures/{target_failure_id}:
    get:
      tags:
      - Target Failures
      summary: Show Target Failure
      description: |
        #### Stability

        * Development

        #### Allowed For

        * Admins
      operationId: ShowTargetFailure
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetFailureResponse'
              examples:
                default:
                  $ref: '#/components/examples/TargetFailureResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TargetFailureId'
  /api/v2/targets:
    get:
      tags:
      - Targets
      summary: List Targets
      description: |
        #### Allowed For

        * Agents
      operationId: ListTargets
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetsResponse'
              examples:
                default:
                  $ref: '#/components/examples/TargetsResponseExample'
    post:
      tags:
      - Targets
      summary: Create Target
      description: |
        #### Allowed For

        * Admins
      operationId: CreateTarget
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetResponse'
              examples:
                default:
                  $ref: '#/components/examples/TargetCreateResponseExample'
  /api/v2/targets/{target_id}:
    get:
      tags:
      - Targets
      summary: Show Target
      description: |
        #### Allowed For

        * Agents
      operationId: ShowTarget
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetResponse'
              examples:
                default:
                  $ref: '#/components/examples/TargetResponseExample'
    put:
      tags:
      - Targets
      summary: Update Target
      description: |
        #### Allowed For
        * Admins
      operationId: UpdateTarget
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetResponse'
              examples:
                default:
                  $ref: '#/components/examples/TargetUpdateResponseExample'
    delete:
      tags:
      - Targets
      summary: Delete Target
      description: |
        #### Allowed For
        * Admins
      operationId: DeleteTarget
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TargetId'
  /api/v2/ticket_audits:
    get:
      tags:
      - Ticket Audits
      summary: List All Ticket Audits
      description: "Returns ticket audits. Archived tickets are not included in the\
        \ response. Use the [List Audits for a Ticket](#list-audits-for-a-ticket)\
        \ endpoint to \nretrieve audit records for an archived ticket. To learn more\
        \ about archived tickets, see [About archived tickets](https://support.zendesk.com/hc/en-us/articles/203657756).\n\
        \nThis endpoint should not be used for capturing change data. When continually\
        \ chasing the tail of a cursor, some records will be skipped. For this use\
        \ case, use the [Incremental Ticket Event Export API](/api-reference/ticketing/ticket-management/incremental_exports/#incremental-ticket-event-export).\n\
        \n#### Pagination\n\n- Cursor pagination\n\nSee [Pagination](/api-reference/introduction/pagination/).\n\
        \nReturns a maximum of 100 records per page.\n\n#### Allowed For\n\n* Admins\n"
      operationId: ListTicketAudits
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: limit
        in: query
        description: Maximum number of results returned
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketAuditsResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketAuditsResponseExample'
  /api/v2/ticket_fields:
    get:
      tags:
      - Ticket Fields
      summary: List Ticket Fields
      description: |
        Returns a list of all system and custom ticket fields in your account.

        Cursor pagination returns a maximum of 100 records per page and fields are returned in the order specified by their id.

        If the results are not paginated every field is returned in the response and fields are returned in the order specified by the position and id.

        For accounts without access to multiple ticket forms, positions can be changed using the [Update Ticket Field](/api-reference/ticketing/tickets/ticket_fields/#update-ticket-field) endpoint or the Ticket Forms page in Zendesk Support (**Admin** > **Manage** > **Ticket Forms**). The Ticket Forms page shows the fields for the account. The order of the fields is used in the different products to show the field values in the tickets.

        For accounts with access to multiple ticket forms, positions can only be changed using the [Update Ticket Field](/api-reference/ticketing/tickets/ticket_fields/#update-ticket-field) endpoint because products use the order defined on each form to show the field values instead of the general position of the ticket field in the account.

        Consider caching this resource to use with the [Tickets](/api-reference/ticketing/tickets/tickets/#json-format) API.

        #### Pagination

        - Cursor pagination (recommended)
        - No pagination

        See [Pagination](/api-reference/introduction/pagination/).

        #### Sideloads

        The following sideloads are supported:

        | Name             | Will sideload
        | ---------------- | -------------
        | users            | The user or users that created the ticket field

        #### Allowed For

        * Agents
      operationId: ListTicketFields
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: locale
        in: query
        description: |
          Forces the `title_in_portal` property to return a dynamic content variant for the specified locale.
           Only accepts [active locale ids](/api-reference/ticketing/account-configuration/locales/#list-locales).
          Example: `locale="de"`
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: creator
        in: query
        description: |
          Displays the `creator_user_id` and `creator_app_name` properties. If the ticket field is created
           by an app, `creator_app_name` is the name of the app and `creator_user_id` is `-1`. If the ticket field
           is not created by an app, `creator_app_name` is null
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketFieldsResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketFieldsResponseExample'
    post:
      tags:
      - Ticket Fields
      summary: Create Ticket Field
      description: |
        Creates any of the following custom field types:

        | Custom field type | Description                                                                                                                                                     |
        |-------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|
        | text              | Default custom field type when `type` is not specified                                                                                                          |
        | textarea          | For multi-line text                                                                                                                                             |
        | checkbox          | To capture a boolean value. Allowed values are true or false                                                                                                    |
        | date              | Example: 2021-04-16                                                                                                                                   |
        | integer           | String composed of numbers. May contain an optional decimal point                                                                                               |
        | decimal           | For numbers containing decimals                                                                                                                                 |
        | regexp            | Matches the Regex pattern found in the custom field settings                                                                                                    |
        | partialcreditcard | A credit card number. Only the last 4 digits are retained                                                                                                                                      |
        | multiselect       | Enables users to choose multiple options from a dropdown menu                                                                                                |
        | tagger            | Single-select dropdown menu. It contains one or more tag values belonging to the field's options. Example: ( {"id": 21938362, "value": ["hd_3000", "hd_5555"]}) |
        | lookup            | A field to create a relationship (see [lookup relationships](/api-reference/ticketing/lookup_relationships/lookup_relationships/)) to another object such as a user, ticket, or organization |

        See [About custom field types](https://support.zendesk.com/hc/en-us/articles/203661866) in the Zendesk Help Center.

        #### Allowed For

        * Admins

        #### Field limits

        We recommend the following best practices for ticket fields limits. Creating more than these amounts can affect performance.

        * 400 ticket fields per account if your account doesn't have ticket forms
        * 400 ticket fields per ticket form if your account has ticket forms
      operationId: CreateTicketField
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketFieldResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketFieldResponseExample'
  /api/v2/ticket_fields/{ticket_field_id}:
    get:
      tags:
      - Ticket Fields
      summary: Show Ticket Field
      description: |
        #### Allowed for

        * Agents

        #### Sideloads

        The following sideloads are supported:

        | Name             | Will sideload
        | ---------------- | -------------
        | users            | The user or users that created the ticket field
      operationId: ShowTicketfield
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketFieldResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketFieldResponseExample'
    put:
      tags:
      - Ticket Fields
      summary: Update Ticket Field
      description: |
        #### Updating drop-down field options

        You can also use the update endpoint to add, update, or remove options in a drop-down custom field. Updating field options for multi-select fields works exactly the same as drop-down field options.

        **Important**: Unless you want to remove some options, you must specify all existing options in any update request. Omitting an option removes it from the drop-down field, which removes its values from any tickets or macros.

        Use the `custom_field_options` attribute to update the options. The attribute consists of an array of option objects, with each object consisting of a `name` and `value` property. The properties correspond to the "Title" and "Tag" text boxes in the admin interface. Example request body:

        ```json
        {"ticket_field": {
            "custom_field_options": [
              {"name": "Apple Pie", "value": "apple"},
              {"name": "Pecan Pie", "value": "pecan"}
            ]
          }
        }
        ```

        #### Example Request

        ```bash
        curl https://{subdomain}.zendesk.com/api/v2/ticket_fields/{id}.json \
          -d '{"ticket_field": {"custom_field_options": [{"name": "Apple Pie", "value": "apple"}, {"name": "Pecan Pie", "value": "pecan"}]}}' \
          -H "Content-Type: application/json" -X PUT \
          -v -u {email_address}:{password}
        ```

        #### Example Response

        ```http
        Status: 200 OK

        {
          "ticket_field": {
            "id":21938362,
            "type":"tagger",
            "title":"Pies",
            ...
            "custom_field_options": [
              {
                "id":21029772,
                "name":"Apple Pie",
                "raw_name":"Apple Pie",
                "value":"apple",
                "default":false
              },
              ...
            ]
          }
        }
        ```

        #### Allowed for

        * Admins
      operationId: UpdateTicketField
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketFieldResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketFieldUpdateResponseExample'
    delete:
      tags:
      - Ticket Fields
      summary: Delete Ticket Field
      description: |
        #### Allowed for

        * Admins
      operationId: DeleteTicketField
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TicketFieldId'
    - $ref: '#/components/parameters/Creator'
  /api/v2/ticket_fields/{ticket_field_id}/options:
    get:
      tags:
      - Ticket Fields
      summary: List Ticket Field Options
      description: |
        Returns a list of custom ticket field options for the given drop-down ticket field.

        #### Allowed For

        * Agents

        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).
      operationId: ListTicketFieldOptions
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldOptionsResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomTicketFieldOptionsResponseExample'
    post:
      tags:
      - Ticket Fields
      summary: Create or Update Ticket Field Option
      description: |
        Creates or updates an option for the given drop-down ticket field.

        To update an option, include the id of the option in the `custom_field_option` object. Example:

        `{"custom_field_option": {"id": 10002, "name": "Pineapples", ... }`

        If an option exists for the given ID, the option will be updated. Otherwise, a new option will be created.

        #### Response

        Returns one of the following status codes:

        - 200 with `Location: /api/v2/ticket_fields/{ticket_field_id}/options.json` if the ticket field option already exists in the database
        - 201 with `Location: /api/v2/ticket_fields/{ticket_field_id}/options.json` if the ticket field option is new

        #### Allowed For

        * Admins

        #### Rate Limit
        You can make 100 requests every 1 minute using this endpoint.
        The rate limiting mechanism behaves as described in
        [Monitoring your request activity](/api-reference/ticketing/account-configuration/usage_limits/#monitoring-your-request-activity) in the API introduction.

        #### Field Option Limits

        * 2000 options per ticket field
      operationId: CreateOrUpdateTicketFieldOption
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldOptionResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomTicketFieldOptionUpdateResponseExample'
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldOptionResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomTicketFieldOptionCreateResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TicketFieldId'
  /api/v2/ticket_fields/{ticket_field_id}/options/{ticket_field_option_id}:
    get:
      tags:
      - Ticket Fields
      summary: Show Ticket Field Option
      description: |
        #### Allowed for
        * Agents
      operationId: ShowTicketFieldOption
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldOptionResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomTicketFieldOptionResponseExample'
    delete:
      tags:
      - Ticket Fields
      summary: Delete Ticket Field Option
      description: |
        #### Allowed for
        * Admins
      operationId: DeleteTicketFieldOption
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TicketFieldId'
    - $ref: '#/components/parameters/TicketFieldOptionId'
  /api/v2/ticket_fields/count:
    get:
      tags:
      - Ticket Fields
      summary: Count Ticket Fields
      description: |-
        Returns an approximate count of system and custom ticket fields in the account. If the count exceeds 100,000, the count will return a cached result.  This cached result will update every 24 hours.

        The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.

        **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
        This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.

        #### Allowed For
        * Agents
      operationId: CountTicketFields
      responses:
        "200":
          description: Count of ticket fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketFieldCountResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketFieldCountResponseExample'
  /api/v2/ticket_forms:
    get:
      tags:
      - Ticket Forms
      summary: List Ticket Forms
      description: |
        Returns a list of all ticket forms for your account if accessed as an admin or agent. End users only see ticket forms that have `end_user_visible` set to true.

        #### Allowed For

        * Anyone
      operationId: ListTicketForms
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: active
        in: query
        description: "true returns active ticket forms; false returns inactive ticket\
          \ forms. If not present, returns both"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: end_user_visible
        in: query
        description: "true returns ticket forms where `end_user_visible`; false returns\
          \ ticket forms that are not end-user visible. If not present, returns both"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        x-ballerina-name: endUserVisible
      - name: fallback_to_default
        in: query
        description: true returns the default ticket form when the criteria defined
          by the parameters results in a set without active and end-user visible ticket
          forms
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        x-ballerina-name: fallbackToDefault
      - name: associated_to_brand
        in: query
        description: true returns the ticket forms of the brand specified by the url's
          subdomain
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        x-ballerina-name: associatedToBrand
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketFormsResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketFormsResponseExample'
    post:
      tags:
      - Ticket Forms
      summary: Create Ticket Form
      description: |
        #### Allowed For

        * Admins
      operationId: CreateTicketForm
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketFormResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketFormCreateResponseExample'
  /api/v2/ticket_forms/{ticket_form_id}:
    get:
      tags:
      - Ticket Forms
      summary: Show Ticket Form
      description: |
        #### Allowed For

        * Admins, Agents, and End Users
      operationId: ShowTicketForm
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketFormResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketFormResponseExample'
    put:
      tags:
      - Ticket Forms
      summary: Update Ticket Form
      description: |
        #### Allowed For
        * Admins
      operationId: UpdateTicketForm
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketFormResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketFormUpdateResponseExample'
    delete:
      tags:
      - Ticket Forms
      summary: Delete Ticket Form
      description: |
        #### Allowed For
        * Admins
      operationId: DeleteTicketForm
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TicketFormId'
  /api/v2/ticket_forms/{ticket_form_id}/clone:
    post:
      tags:
      - Ticket Forms
      summary: Clone an Already Existing Ticket Form
      description: |
        #### Allowed For

        * Admins
      operationId: CloneTicketForm
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketFormResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketFormResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TicketFormId'
  /api/v2/ticket_forms/reorder:
    put:
      tags:
      - Ticket Forms
      summary: Reorder Ticket Forms
      description: |
        #### Allowed For
        * Admins

        #### Request Parameters

        You can pass in the following parameter in the payload:

        | Name                | Type   | Comment
        | ------------------- | ------ | --------
        | ticket_form_ids     | array  | An array of ticket form ids. Example: "[2, 23, 46, 50]"
      operationId: ReorderTicketForms
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketFormsResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketFormsResponseExample'
  /api/v2/ticket_forms/show_many:
    get:
      tags:
      - Ticket Forms
      summary: Show Many Ticket Forms
      description: |
        Takes an `ids` query parameter that accepts a comma-separated list of up to 100 ticket form ids. This endpoint is used primarily by the [mobile SDK](/documentation/classic-web-widget-sdks/) and the [Web Widget](/api-reference/widget/introduction/).

        #### Allowed For

        * Anyone
      operationId: ShowManyTicketForms
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: ids
        in: query
        description: IDs of the ticket forms to be shown
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: "1,2,3"
      - name: active
        in: query
        description: "true returns active ticket forms; false returns inactive ticket\
          \ forms. If not present, returns both"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: end_user_visible
        in: query
        description: "true returns ticket forms where `end_user_visible`; false returns\
          \ ticket forms that are not end-user visible. If not present, returns both"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        x-ballerina-name: endUserVisible
      - name: fallback_to_default
        in: query
        description: true returns the default ticket form when the criteria defined
          by the parameters results in a set without active and end-user visible ticket
          forms
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        x-ballerina-name: fallbackToDefault
      - name: associated_to_brand
        in: query
        description: true returns the ticket forms of the brand specified by the url's
          subdomain
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        x-ballerina-name: associatedToBrand
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketFormsResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketFormsResponseExample'
  /api/v2/ticket_metrics:
    get:
      tags:
      - Ticket Metrics
      summary: List Ticket Metrics
      description: |
        Returns a list of tickets with their metrics.

        Tickets are ordered chronologically by created date, from newest to oldest.
        The last ticket listed may not be the absolute oldest ticket in your account
        due to ticket archiving.

        Archived tickets are not included in the response. See
        [About archived tickets](https://support.zendesk.com/hc/en-us/articles/203657756) in
        Zendesk help.

        #### Pagination

        - Cursor pagination (recommended)
        - Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.


        #### Allowed For

        * Agents
      operationId: ListTicketMetrics
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketMetricsResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketMetricsResponseExample'
  /api/v2/ticket_metrics/{ticketMetricId}:
    get:
      tags:
      - Ticket Metrics
      summary: Show Ticket Metrics
      description: |
        Returns a specific metric, or the metrics of a specific ticket.

        #### Pagination

        - Cursor pagination (recommended)
        - Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For

        * Agents
      operationId: ShowTicketMetrics
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: ticketMetricId
        in: path
        description: The id of the ticket metric to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: "10001"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketMetricsByTicketMetricIdResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketMetricResponseExample'
  /api/v2/tickets:
    get:
      tags:
      - Tickets
      summary: List Tickets
      operationId: ListTickets
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: external_id
        in: query
        description: "Lists tickets by external id. External ids don't have to be\
          \ unique for each ticket. As a result, the request may return multiple tickets\
          \ with the same external id"
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: externalId
      responses:
        "200":
          description: List tickets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketsResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketsResponseExample'
    post:
      tags:
      - Tickets
      summary: Create Ticket
      operationId: CreateTicket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketCreateRequest'
            examples:
              default:
                $ref: '#/components/examples/TicketCreateRequestExample'
      responses:
        "201":
          description: Create ticket
          headers:
            Location:
              description: The URL of the created ticket
              style: simple
              explode: false
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketResponseExample'
  /api/v2/tickets/{ticket_id}:
    get:
      tags:
      - Tickets
      summary: Show Ticket
      description: |-
        Returns a number of ticket properties though not the ticket comments. To get the comments, use [List Comments](/api-reference/ticketing/tickets/ticket_comments/#list-comments)

        #### Allowed For
        * Agents
      operationId: ShowTicket
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TicketId'
      responses:
        "200":
          description: Ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketResponseExample'
    put:
      tags:
      - Tickets
      summary: Update Ticket
      operationId: UpdateTicket
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TicketId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketUpdateRequest'
            examples:
              default:
                $ref: '#/components/examples/TicketUpdateRequestExample'
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketUpdateResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketUpdateResponseExample'
    delete:
      tags:
      - Tickets
      summary: Delete Ticket
      description: |-
        #### Allowed For

        * Admins
        * Agents with permission to delete tickets

        Agent delete permissions are set in Support. See
        [Deleting tickets](https://support.zendesk.com/hc/en-us/articles/203690936)
        in the Support Help Center.

        #### Ticket deletion rate limit

        You can delete 400 tickets every 1 minute using this endpoint.
        The rate limiting mechanism behaves as described in
        [Rate limits](/api-reference/introduction/rate-limits/) in the API introduction.
        Zendesk recommends that you obey the Retry-After header values.
        To delete many tickets, you may use [Bulk Delete Tickets](/api-reference/ticketing/tickets/tickets/#bulk-delete-tickets).
      operationId: DeleteTicket
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TicketId'
      responses:
        "204":
          description: No content
  /api/v2/tickets/{ticket_id}/audits:
    get:
      tags:
      - Ticket Audits
      summary: List Audits for a Ticket
      description: |
        Lists the audits for a specified ticket.

        #### Pagination

        - Cursor pagination (recommended)
        - Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        **Note**: Audits for [Archived Tickets](https://support.zendesk.com/hc/en-us/articles/4408887617050) do not support pagination for this endpoint.

        #### Allowed for

        * Agents
      operationId: ListAuditsForTicket
      responses:
        "200":
          description: OK response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketAuditsResponseNoneCursor'
              examples:
                default:
                  $ref: '#/components/examples/TicketAuditsForTicketResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TicketId'
  /api/v2/tickets/{ticket_id}/audits/{ticket_audit_id}:
    get:
      tags:
      - Ticket Audits
      summary: Show Audit
      description: |
        #### Allowed for

        * Agents
      operationId: ShowTicketAudit
      responses:
        "200":
          description: OK response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketAuditResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketAuditResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TicketId'
    - $ref: '#/components/parameters/TicketAuditId'
  /api/v2/tickets/{ticket_id}/audits/{ticket_audit_id}/make_private:
    put:
      tags:
      - Ticket Audits
      summary: Change a Comment From Public To Private
      description: |
        #### Allowed for

        * Agents
      operationId: MakeTicketCommentPrivateFromAudits
      responses:
        "200":
          description: description
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TicketId'
    - $ref: '#/components/parameters/TicketAuditId'
  /api/v2/tickets/{ticket_id}/audits/count:
    get:
      tags:
      - Ticket Audits
      summary: Count Audits for a Ticket
      description: |
        Returns an approximate count of audits for a specified ticket. If the count exceeds 100,000, the count will return a cached result.  This cached result will update every 24 hours.

        The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.

        **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
        This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.

        #### Allowed for

        * Agents
      operationId: CountAuditsForTicket
      responses:
        "200":
          description: Count of audits on a ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketAuditsCountResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketAuditsCountResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TicketId'
  /api/v2/tickets/{ticket_id}/collaborators:
    get:
      tags:
      - Tickets
      summary: List Collaborators for a Ticket
      description: |-
        #### Allowed For

        * Agents
      operationId: ListTicketCollaborators
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TicketId'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTicketCollaboratorsResponse'
              examples:
                default:
                  $ref: '#/components/examples/ListTicketCollaboratorsResponseExample'
  /api/v2/tickets/{ticket_id}/comments:
    get:
      tags:
      - Ticket Comments
      summary: List Comments
      description: |
        Returns the comments added to the ticket.

        Each comment may include a `content_url` for an attachment or a `recording_url` for a voice comment that points to a file that may be hosted externally. For security reasons, take care not to inadvertently send Zendesk authentication credentials to third parties when attempting to access these files. See [Working with url properties](/documentation/ticketing/managing-tickets/working-with-url-properties).

        #### Pagination

        - Cursor pagination (recommended)
        - Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Sorting

        By default, comments are sorted by creation date in ascending order.

        When using cursor pagination, use the following parameter to change the sort order:

        | Name   | Type   | Required | Comments
        | ------ | ------ | -------- | --------
        | `sort` | string | no       | Possible values are "created_at" (ascending order) or "-created_at" (descending order)

        When using offset pagination, use the following parameters to change the sort order:

        | Name         | Type   | Required | Comments
        | ------------ | ------ | -------- | --------
        | `sort_order` | string | no       | One of `asc`, `desc`. Defaults to `asc`

        #### Allowed For

        * Agents
      operationId: ListTicketComments
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: include_inline_images
        in: query
        description: "Default is false. When true, inline images are also listed as\
          \ attachments in the response"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        x-ballerina-name: includeInlineImages
      - name: include
        in: query
        description: "Accepts \"users\". Use this parameter to list email CCs by side-loading\
          \ users. Example: `?include=users`. **Note**: If the comment source is email,\
          \ a deleted user will be represented as the CCd email address. If the comment\
          \ source is anything else, a deleted user will be represented as the user\
          \ name"
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketCommentsResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketCommentsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TicketId'
  /api/v2/tickets/{ticket_id}/comments/{comment_id}/attachments/{attachment_id}/redact:
    put:
      tags:
      - Attachments
      summary: Redact Comment Attachment
      description: |
        Redaction allows you to permanently remove attachments from an existing comment on a ticket. Once removed from a comment, the attachment is replaced with an empty "redacted.txt" file.

        The redaction is permanent. It is not possible to undo redaction or see what was removed. Once a ticket is closed, redacting its attachments is no longer possible.

        Also, if you want to redact an inline attachment, you can use the `include_inline_images` parameter in the [List Comments](/api-reference/ticketing/tickets/ticket_comments/#list-comments) operation to obtain the inline attachment ID, and use it in the request URL.

        #### Allowed For

        * Admins
        * Agents when [deleting tickets is enabled for agents on professional accounts](https://support.zendesk.com/hc/en-us/articles/360002128107)
        * Agents assigned to a custom role with permissions to redact ticket content (Enterprise only)
      operationId: RedactCommentAttachment
      responses:
        "200":
          description: OK response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentResponse'
              examples:
                default:
                  $ref: '#/components/examples/AttachmentResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TicketId'
    - $ref: '#/components/parameters/CommentId'
    - $ref: '#/components/parameters/AttachmentId'
  /api/v2/tickets/{ticket_id}/comments/{ticket_comment_id}/make_private:
    put:
      tags:
      - Ticket Comments
      summary: Make Comment Private
      description: |
        #### Allowed For

        * Agents
      operationId: MakeTicketCommentPrivate
      responses:
        "200":
          description: description
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TicketId'
    - $ref: '#/components/parameters/TicketCommentId'
  /api/v2/tickets/{ticket_id}/comments/{ticket_comment_id}/redact:
    put:
      tags:
      - Ticket Comments
      summary: Redact String in Comment
      description: |
        Permanently removes words or strings from a ticket comment. Specify the string to redact in an object with a `text` property. Example: `'{"text": "987-65-4320"}'`. The characters of the word or string are replaced by the ▇ symbol.

        If the comment was made by email, the endpoint also attempts to redact the string from the original email retained by Zendesk for audit purposes.

        **Note**: If you use the rich text editor, support for redacting formatted text (bold, italics, hyperlinks) is limited.

        Redaction is permanent. You can't undo the redaction or see *what* was removed. Once a ticket is closed, you can no longer redact strings from its comments.

        To use this endpoint, the "Agents can delete tickets" option must be enabled in the Zendesk Support admin interface at **Admin** > **Settings** > **Agents**.

        #### Allowed For

        * Agents
      operationId: RedactStringInComment
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketCommentResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketCommentStringRedactResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TicketId'
    - $ref: '#/components/parameters/TicketCommentId'
  /api/v2/tickets/{ticket_id}/comments/count:
    get:
      tags:
      - Ticket Comments
      summary: Count Ticket Comments
      description: |-
        Returns an approximate count of the comments added to the ticket. If the count exceeds 100,000, the count will return a cached result.  This cached result will update every 24 hours.

        The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.

        **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
        This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.

        #### Allowed For
        * Agents
      operationId: CountTicketComments
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TicketId'
      responses:
        "200":
          description: Count of ticket comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketCommentsCountResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketCommentsCountResponseExample'
  /api/v2/tickets/{ticket_id}/email_ccs:
    get:
      tags:
      - Tickets
      summary: List Email CCs for a Ticket
      description: |-
        Returns any users cc'd on the ticket.

        #### Availability

        The [CCs and Followers](https://support.zendesk.com/hc/en-us/articles/203690846) feature must be enabled in Zendesk Support.

        If the feature is not enabled, the default CC functionality is used. In that case, use [List Collaborators](/api-reference/ticketing/tickets/tickets/#list-collaborators-for-a-ticket) to list the users cc'ed on the ticket.

        #### Allowed For

        * Agents
      operationId: ListTicketEmailCCs
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TicketId'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTicketEmailCCsResponse'
              examples:
                default:
                  $ref: '#/components/examples/ListTicketEmailCCsResponseExample'
  /api/v2/tickets/{ticket_id}/followers:
    get:
      tags:
      - Tickets
      summary: List Followers for a Ticket
      description: |-
        Returns any users who follow the ticket.

        #### Availability

        The [CCs and Followers](https://support.zendesk.com/hc/en-us/articles/203690846) feature must be enabled in Zendesk Support.

        #### Allowed For

        * Agents
      operationId: ListTicketFollowers
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TicketId'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTicketFollowersResponse'
              examples:
                default:
                  $ref: '#/components/examples/ListTicketFollowersResponseExample'
  /api/v2/tickets/{ticket_id}/incidents:
    get:
      tags:
      - Tickets
      summary: List Ticket Incidents
      description: |-
        #### Allowed For

        * Agents

        #### Pagination
        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).
      operationId: ListTicketIncidents
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TicketId'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTicketIncidentsResponse'
              examples:
                default:
                  $ref: '#/components/examples/ListTicketIncidentsResponseExample'
  /api/v2/tickets/{ticket_id}/macros/{macro_id}/apply:
    get:
      tags:
      - Macros
      summary: Show Ticket After Changes
      description: |
        Returns the full ticket object as it would be after applying the macro to the ticket.
        It doesn't actually change the ticket.

        To get only the ticket fields that would be changed by the macro,
        see [Show Changes to Ticket](#show-changes-to-ticket).

        #### Allowed For

        * Agents
      operationId: ShowTicketAfterChanges
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MacroApplyTicketResponse'
              examples:
                default:
                  $ref: '#/components/examples/MacroChangesToTicketsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/MacroId'
    - name: ticket_id
      in: path
      description: The ID of the ticket
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 35436
  /api/v2/tickets/{ticket_id}/mark_as_spam:
    put:
      tags:
      - Tickets
      summary: Mark Ticket as Spam and Suspend Requester
      description: |-
        #### Allowed For

        * Agents
      operationId: MarkTicketAsSpamAndSuspendRequester
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TicketId'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: string
                example: ""
              example: ""
  /api/v2/tickets/{ticket_id}/merge:
    post:
      tags:
      - Tickets
      summary: Merge Tickets into Target Ticket
      description: |-
        Merges one or more tickets into the ticket with the specified id.

        See [Merging tickets](https://support.zendesk.com/hc/en-us/articles/203690916)
        in the Support Help Center for ticket merging rules.

        Any attachment to the source ticket is copied to the target ticket.

        This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.

        #### Allowed For

        * Agents

        Agents in the Enterprise account must have merge permissions.
        See [Creating custom roles and assigning agents (Enterprise)](https://support.zendesk.com/hc/en-us/articles/203662026)
        in the Support Help Center.

        #### Available parameters

        The request takes a data object with the following properties:

        | Name                     | Type    | Required | Comments                                                |
        | ------------------------ | ------- | -------- | ------------------------------------------------------- |
        | ids                      | array   | yes      | Ids of tickets to merge into the target ticket          |
        | target_comment           | string  | no       | Private comment to add to the target ticket. This comment is optional but strongly recommended |
        | source_comment           | string  | no       | Private comment to add to the source ticket. This comment is optional but strongly recommended |
        | target_comment_is_public | boolean | no       | Whether comments in the target ticket are public or private   |
        | source_comment_is_public | boolean | no       | Whether comments in the source tickets are public or private |

        `target_comment` and `source_comment` can be used to provide a reason for the merge for recordkeeping purposes. If the source ticket has attachments, they are included in `target_comment`.

        Comments are private and can't be modified in the following cases:

          * Any of the sources or target tickets are private
          * Any of the sources or target tickets were created through X (formerly Twitter), Facebook or the Channel framework

        In any other case, comments default to private but can be modified with the comment privacy parameters.
      operationId: MergeTicketsIntoTargetTicket
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TicketId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketMergeInput'
            examples:
              default:
                $ref: '#/components/examples/TicketMergeInputExample'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/JobStatusResponseExample'
  /api/v2/tickets/{ticket_id}/related:
    get:
      tags:
      - Tickets
      summary: Ticket Related Information
      description: |-
        The request returns a data object with the following properties:

        | Name                | Type    | Comment
        | ------------------- | ------- | -------
        | topic_id            | string  | Related topic in the Web portal (deprecated feature)
        | followup_source_ids | array   | Sources to follow up
        | from_archive        | boolean | Is true if the current ticket is archived
        | incidents           | integer | A count of related incident occurrences
        | twitter             | object  | X (formerly Twitter) information associated with the ticket

        #### Allowed For

        * Agents
      operationId: TicketRelatedInformation
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TicketId'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketRelatedInformation'
              examples:
                default:
                  $ref: '#/components/examples/TicketRelatedInformationExample'
  /api/v2/tickets/{ticket_id}/satisfaction_rating:
    post:
      tags:
      - Satisfaction Ratings
      summary: Create a Satisfaction Rating
      description: |
        Creates a CSAT rating for a solved ticket, or for a ticket that was previously
        solved and then reopened.

        Only the end user listed as the ticket requester can create a satisfaction rating for the ticket.

        #### Allowed For

        * End user who requested the ticket

        The end user must be a verified user.
      operationId: CreateTicketSatisfactionRating
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SatisfactionRatingResponse'
              examples:
                default:
                  $ref: '#/components/examples/SatisfactionRatingResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - name: ticket_id
      in: path
      description: The id of the ticket
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 35436
  /api/v2/tickets/{ticket_id}/tags:
    get:
      tags:
      - Tags
      summary: List Resource Tags
      description: |
        #### Allowed For

        * Agents
      operationId: ListResourceTags
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsByObjectIdResponse'
              examples:
                default:
                  $ref: '#/components/examples/TagsByObjectIdResponse'
    put:
      tags:
      - Tags
      summary: Add Tags
      description: |
        You can also add tags to multiple tickets with the [Update Many
        Tickets](/api-reference/ticketing/tickets/tickets/#update-many-tickets) endpoint.

        #### Safe Update

        If the same ticket is updated by multiple API requests at
        the same time, some tags could be lost because of ticket
        update collisions. Include `updated_stamp` and `safe_update`
        properties in the request body to make a safe update.

        For `updated_stamp`, retrieve and specify the ticket's
        latest `updated_at` timestamp. The tag update only occurs
        if the `updated_stamp` timestamp matches the ticket's
        actual `updated_at` timestamp at the time of the request.
        If the timestamps don't match (in other words, if the
        ticket was updated since you retrieved the ticket's
        last `updated_at` timestamp), the request returns a
        409 Conflict error.

        #### Example

        ```js
        {
          "tags": ["customer"],
          "updated_stamp":"2019-09-12T21:45:16Z",
          "safe_update":"true"
        }
        ```

        For details, see [Protecting against ticket update collisions](/api-reference/ticketing/tickets/tickets/#protecting-against-ticket-update-collisions).

        #### Allowed For

        * Agents
      operationId: PutTagsTicket
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsByObjectIdResponse'
              examples:
                default:
                  $ref: '#/components/examples/TagsByObjectIdResponse'
    post:
      tags:
      - Tags
      summary: Set Tags
      description: |
        #### Allowed For

        * Agents
      operationId: SetTagsTicket
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsByObjectIdResponse'
              examples:
                default:
                  $ref: '#/components/examples/TagsByObjectIdResponse'
    delete:
      tags:
      - Tags
      summary: Remove Tags
      description: |
        You can also delete tags from multiple tickets with the
        [Update Many Tickets](/api-reference/ticketing/tickets/tickets/#update-many-tickets) endpoint.

        This endpoint supports safe updates. See [Safe Update](/api-reference/ticketing/ticket-management/tags/#safe-update).

        #### Allowed For

        * Agents
      operationId: DeleteTagsTicket
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TicketId'
  /api/v2/tickets/count:
    get:
      tags:
      - Tickets
      summary: Count Tickets
      description: |-
        Returns an approximate count of tickets in the account. If the count exceeds 100,000, it is updated every 24 hours.

        `ccd` lists tickets that the specified user is cc'd on.

        The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.

        **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
        This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.

        #### Allowed For
        * Agents
      operationId: CountTickets
      responses:
        "200":
          description: Count of tickets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineResponse2006'
              examples:
                default:
                  value:
                    count:
                      refreshed_at: 2020-04-06T02:18:17Z
                      value: 102
  /api/v2/tickets/create_many:
    post:
      tags:
      - Tickets
      summary: Create Many Tickets
      description: |-
        Accepts an array of up to 100 ticket objects. **Note**: Every ticket created with this endpoint may be affected by your business rules, which can include sending email notifications to your end users. If you are importing historical tickets or creating more than 1000 tickets, consider using the [Ticket Bulk Import](/api-reference/ticketing/tickets/ticket_import/#ticket-bulk-import) endpoint.

        This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.

        #### Allowed For
        * Agents
      operationId: TicketsCreateMany
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketsCreateRequest'
            examples:
              default:
                $ref: '#/components/examples/TicketsCreateRequestExample'
      responses:
        "200":
          description: Create many tickets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/JobStatusResponseExample'
  /api/v2/tickets/destroy_many:
    delete:
      tags:
      - Tickets
      summary: Bulk Delete Tickets
      description: |-
        Accepts a comma-separated list of up to 100 ticket ids.

        #### Allowed For

        * Admins
        * Agents with permission to delete tickets

        Agent delete permissions are set in Support. See
        [Deleting tickets](https://support.zendesk.com/hc/en-us/articles/203690936)
        in the Support Help Center.

        This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
      operationId: BulkDeleteTickets
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TicketIds'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/JobStatusResponseExample'
  /api/v2/tickets/mark_many_as_spam:
    put:
      tags:
      - Tickets
      summary: Bulk Mark Tickets as Spam
      description: |-
        Accepts a comma-separated list of up to 100 ticket ids.

        This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.

        #### Allowed For

        * Agents
      operationId: MarkManyTicketsAsSpam
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TicketIds'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/JobStatusResponseExample'
  /api/v2/tickets/show_many:
    get:
      tags:
      - Tickets
      summary: Show Multiple Tickets
      description: |-
        Accepts a comma-separated list of ticket ids to return.

        This endpoint will return up to 100 tickets records.

        #### Allowed For
        * Agents
      operationId: TicketsShowMany
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TicketIds'
      responses:
        "200":
          description: List tickets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketsResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketsResponseExample'
  /api/v2/tickets/update_many:
    put:
      tags:
      - Tickets
      summary: Update Many Tickets
      description: "Accepts an array of up to 100 ticket objects, or a comma-separated\
        \ list of up to 100 ticket ids."
      operationId: TicketsUpdateMany
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: ids
        in: query
        description: Comma-separated list of ticket ids
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "35436,35437"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/JobStatusResponseExample'
  /api/v2/trigger_categories:
    get:
      tags:
      - Trigger Categories
      summary: List Trigger Categories
      description: |
        Returns all the trigger categories in the account.

        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).
      operationId: ListTriggerCategories
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: page
        in: query
        description: Pagination parameters
        required: false
        style: deepObject
        explode: true
        schema:
          $ref: '#/components/schemas/Page'
        example:
          after: eyJvIjoiLXNjb3JlLGlkIiwidiI6ImFRSUFBQUFBQUFBQWFRMHBJUUVBQUFBQSJ9
          before: eyJvIjoiLXNjb3JlLGlkIiwidiI6ImFRSUFBQUFBQUFBQWFRMHBJUUVBQUFBQSJ9
          size: 50
      - name: sort
        in: query
        description: Sort parameters
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - position
          - -position
          - name
          - -name
          - created_at
          - -created_at
          - updated_at
          - -updated_at
      - name: include
        in: query
        description: Allowed sideloads
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - rule_counts
      responses:
        "200":
          description: A paged array of trigger categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineResponse2007'
              example:
                links:
                  next: "https://{subdomain}.zendesk.com/api/v2/trigger_categories.json?include=rule_counts&page[after]=eyJvIjoiLXNjb3JlLGlkIiwidiI6ImFRSUFBQUFBQUFBQWFRMHBJUUVBQUFBQSJ9&page[size]=2&sort=position"
                  prev: "https://{subdomain}.zendesk.com/api/v2/trigger_categories.json?include=rule_counts&page[before]=eyJvIjoiLXNjb3JlLGlkIiwidiI6ImFRSUFBQUFBQUFBQWFRMHBJUUVBQUFBQSJ9&page[size]=2&sort=position"
                meta:
                  after_cursor: eyJvIjoiLXNjb3JlLGlkIiwidiI6ImFRSUFBQUFBQUFBQWFRMHBJUUVBQUFBQSJ9
                  before_cursor: eyJvIjoiLXNjb3JlLGlkIiwidiI6ImFRSUFBQUFBQUFBQWFRMHBJUUVBQUFBQSJ9
                  has_more: true
                trigger_categories:
                - created_at: 2020-07-17T01:30:07Z
                  id: "10001"
                  name: Email Triggers
                  position: 0
                  updated_at: 2020-07-17T01:30:07Z
                - created_at: 2020-07-17T01:30:07Z
                  id: "10002"
                  name: SMS Triggers
                  position: 1
                  updated_at: 2020-07-17T01:30:07Z
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                - code: InvalidPaginationParameter
                  title: "page[after] is not valid"
        "403":
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                - code: TriggerCategoriesNotEnabled
                  title: Trigger categories are not enabled for your account
    post:
      tags:
      - Trigger Categories
      summary: Create Trigger Category
      description: Creates a trigger category.
      operationId: CreateTriggerCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V2TriggerCategoriesBody'
            example:
              trigger_category:
                name: All Notification Triggers
                position: 0
        required: true
      responses:
        "200":
          description: The created trigger category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerCategoryResponse'
              example:
                trigger_category:
                  created_at: 2020-07-17T01:30:07Z
                  id: "10001"
                  name: All Notification Triggers
                  position: 0
                  updated_at: 2020-07-17T01:30:07Z
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                - code: InvalidTriggerCategory
                  title: Name cannot be blank
        "403":
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                - code: TriggerCategoriesNotEnabled
                  title: Trigger categories are not enabled for your account
                - code: ProductLimitExceeded
                  title: Your account has reached the limit of 500 trigger categories.
  /api/v2/trigger_categories/{triggerCategoryId}:
    get:
      tags:
      - Trigger Categories
      summary: Show Trigger Category
      description: Returns the trigger category with the specified ID.
      operationId: ShowTriggerCategoryById
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: triggerCategoryId
        in: path
        description: The id of the trigger category to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: "10001"
      responses:
        "200":
          description: The requested trigger category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerCategoryResponse'
              example:
                trigger_category:
                  created_at: 2020-07-17T01:30:07Z
                  id: "10001"
                  name: All Notification Triggers
                  position: 0
                  updated_at: 2020-07-17T01:30:07Z
        "404":
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                - code: TriggerCategoryNotFound
                  title: Category can’t be found. Check the ID and try again.
    delete:
      tags:
      - Trigger Categories
      summary: Delete Trigger Category
      description: Deletes the trigger category with the specified ID.
      operationId: DeleteTriggerCategory
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: triggerCategoryId
        in: path
        description: The id of the trigger category to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: "10001"
      responses:
        "204":
          description: No content
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                - code: TriggerCategoryNotEmpty
                  title: A category with active triggers cannot be deleted.
        "404":
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                - code: TriggerCategoryNotFound
                  title: Category can’t be found. Check the ID and try again.
    patch:
      tags:
      - Trigger Categories
      summary: Update Trigger Category
      description: Updates the trigger category with the specified ID.
      operationId: UpdateTriggerCategory
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: triggerCategoryId
        in: path
        description: The id of the trigger category to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: "10001"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerCategoriestriggerCategoryIdBody'
            example:
              trigger_category:
                name: All Notification Triggers Updated
                position: 10
        required: true
      responses:
        "200":
          description: The updated trigger category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerCategoryResponse'
              example:
                trigger_category:
                  created_at: 2020-07-17T01:30:07Z
                  id: "10001"
                  name: All Notification Triggers Updated
                  position: 10
                  updated_at: 2020-07-18T05:23:32Z
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                - code: InvalidTriggerCategory
                  title: Name cannot be blank
        "404":
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              example:
                errors:
                - code: TriggerCategoryNotFound
                  title: Category can’t be found. Check the ID and try again.
  /api/v2/trigger_categories/jobs:
    post:
      tags:
      - Trigger Categories
      summary: Create Batch Job for Trigger Categories
      description: Creates a job that performs a batch operation for the given trigger
        categories.
      operationId: BatchOperateTriggerCategories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchJobRequest'
            example:
              job:
                action: patch
                items:
                  trigger_categories:
                  - id: "10001"
                    position: 0
                  - id: "10002"
                    position: 1
                  triggers:
                  - active: false
                    category_id: "10001"
                    id: "10011"
                    position: 10
                  - active: true
                    category_id: "10002"
                    id: "10012"
                    position: 1
        required: true
      responses:
        "200":
          description: The response to the batch job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchJobResponse'
              example:
                results:
                  trigger_categories:
                  - created_at: 2020-07-18T01:24:53Z
                    id: "10001"
                    name: Notifications
                    position: 0
                    updated_at: 2020-07-20T01:30:07Z
                  - created_at: 2020-07-17T06:31:12Z
                    id: "10002"
                    name: Apply Tags
                    position: 1
                    updated_at: 2020-07-20T01:30:07Z
                  triggers:
                  - actions:
                    - {}
                    active: true
                    conditions: {}
                    created_at: 2012-09-25T22:50:26Z
                    description: Notify external target
                    id: 10012
                    position: 1
                    raw_title: Notify target
                    title: Notify Target
                    updated_at: 2020-07-20T01:30:07Z
                    url: "http://{subdomain}.zendesk.com/api/v2/triggers/10012.json"
                  - actions:
                    - {}
                    active: false
                    conditions: {}
                    created_at: 2012-09-25T22:50:26Z
                    description: Close and save a ticket
                    id: 10011
                    position: 10
                    raw_title: Close and Save
                    title: Close and Save
                    updated_at: 2020-07-20T01:30:07Z
                    url: "http://{subdomain}.zendesk.com/api/v2/triggers/10011.json"
                status: complete
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchJobResponse'
              example:
                errors:
                - code: InvalidTrigger
                  title: category_id is not valid
                  trigger_id: "10001"
                status: failed
  /api/v2/triggers:
    get:
      tags:
      - Triggers
      summary: List Triggers
      description: |
        Lists all triggers for the current account.

        #### Pagination

        - Cursor pagination (recommended)
        - Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For

        * Agents

        #### Sideloads

        The following sideloads are supported. The usage sideloads are only supported on the Support Professional or Suite Growth plan or above.

        | Name             | Will sideload
        | ---------------- | -------------
        | app_installation | The app installation that requires each trigger, if present
        | permissions      | The permissions for each trigger
        | usage_1h         | The number of times each trigger has been used in the past hour
        | usage_24h        | The number of times each trigger has been used in the past day
        | usage_7d         | The number of times each trigger has been used in the past week
        | usage_30d        | The number of times each trigger has been used in the past thirty days
      operationId: ListTriggers
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/TriggerActive'
      - $ref: '#/components/parameters/TriggerSort'
      - $ref: '#/components/parameters/TriggerSortBy'
      - $ref: '#/components/parameters/TriggerSortOrder'
      - $ref: '#/components/parameters/TriggerCategoryId'
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggersResponse'
              examples:
                default:
                  $ref: '#/components/examples/TriggersResponseExample'
    post:
      tags:
      - Triggers
      summary: Create Trigger
      description: |
        #### Allowed For

        * Agents
      operationId: CreateTrigger
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerWithCategoryRequest'
            examples:
              default:
                $ref: '#/components/examples/TriggerWithCategoryRequestExample'
        required: true
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerResponse'
              examples:
                default:
                  $ref: '#/components/examples/TriggerResponseExample'
  /api/v2/triggers/{trigger_id}:
    get:
      tags:
      - Triggers
      summary: Show Trigger
      description: |
        #### Allowed For

        * Agents

        The Via Type value is a number instead of a text string. See [Via types reference](/documentation/ticketing/reference-guides/via-types/) for the keys.
      operationId: GetTrigger
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerResponse'
              examples:
                default:
                  $ref: '#/components/examples/TriggerResponseExample'
    put:
      tags:
      - Triggers
      summary: Update Trigger
      description: |
        #### Allowed For

        * Agents

        #### Note

        Updating a condition or action updates both the conditions and actions arrays,
        clearing all existing values of both arrays. Include all your conditions
        and actions when updating any condition or action.
      operationId: UpdateTrigger
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerWithCategoryRequest'
            examples:
              default:
                $ref: '#/components/examples/TriggerWithCategoryRequestExample'
        required: true
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerResponse'
              examples:
                default:
                  $ref: '#/components/examples/TriggerResponseExample'
    delete:
      tags:
      - Triggers
      summary: Delete Trigger
      description: |
        #### Allowed For

        * Agents
      operationId: DeleteTrigger
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TriggerId'
  /api/v2/triggers/{trigger_id}/revisions:
    get:
      tags:
      - Triggers
      summary: List Trigger Revisions
      description: |
        List the revisions associated with a trigger. Trigger revision history is only available on Enterprise plans.

        #### Allowed For

         * Agents

        #### Sideloads

        The following sideloads are supported:

        | Name  | Will sideload
        | ----- | -------------
        | users | The user that authored each revision

        #### Pagination

        This endpoint uses cursor-based pagination. The records are ordered in
        descending order by the `created_at` timestamp, then by `id` on duplicate
        `created_at` values.

        The `cursor` parameter is a non-human-readable argument you can use to move
        forward or backward in time.

        Each JSON response will contain the following attributes to help you get
        more results:

        - `after_url` requests more recent results
        - `before_url` requests older results
        - `after_cursor` is the cursor to build the request yourself
        - `before_cursor` is the cursor to build the request yourself

        The properties are null if no more records are available.

        You can request a maximum of 1000 records using the `limit` parameter. If
        no `limit` parameter is supplied, it will default to 1,000.
      operationId: ListTriggerRevisions
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerRevisionsResponse'
              examples:
                default:
                  $ref: '#/components/examples/TriggerRevisionsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TriggerId'
  /api/v2/triggers/{trigger_id}/revisions/{trigger_revision_id}:
    get:
      tags:
      - Triggers
      summary: Show Trigger Revision
      description: |
        Fetches a revision associated with a trigger. Trigger revision history is only available on Enterprise plans.

        #### Allowed For

         * Agents

        #### Sideloads

        The following sideloads are supported:

        | Name  | Will sideload
        | ----- | -------------
        | users | The user that authored each revision
      operationId: TriggerRevision
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerRevisionResponse'
              examples:
                default:
                  $ref: '#/components/examples/TriggerRevisionResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TriggerId'
    - $ref: '#/components/parameters/TriggerRevisionId'
  /api/v2/triggers/active:
    get:
      tags:
      - Triggers
      summary: List Active Triggers
      description: |
        Lists all active triggers.

        #### Pagination

        - Cursor pagination (recommended)
        - Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.
        #### Allowed For

        * Agents

        #### Sideloads

        The following sideloads are supported:

        | Name             | Will sideload
        | ---------------- | -------------
        | app_installation | The app installation that requires each trigger, if present
        | permissions      | The permissions for each trigger
        | usage_1h         | The number of times each trigger has been used in the past hour
        | usage_24h        | The number of times each trigger has been used in the past day
        | usage_7d         | The number of times each trigger has been used in the past week
        | usage_30d        | The number of times each trigger has been used in the past thirty days
      operationId: ListActiveTriggers
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggersResponse'
              examples:
                default:
                  $ref: '#/components/examples/TriggersActiveResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TriggerSort'
    - $ref: '#/components/parameters/TriggerSortBy'
    - $ref: '#/components/parameters/TriggerSortOrder'
    - $ref: '#/components/parameters/TriggerCategoryId'
  /api/v2/triggers/definitions:
    get:
      tags:
      - Triggers
      summary: List Trigger Action and Condition Definitions
      description: |
        Returns the definitions of the actions a trigger can perform and the
        definitions of the conditions under which a trigger can execute. The
        definition of the action includes a title ("Status"), a type ("list"), and
        possible values. The definition of the condition includes the same fields
        as well as the possible operators.

        For a list of supported actions, see the [Actions reference](/documentation/ticketing/reference-guides/actions-reference)
        For a list of supported conditions, see the [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference)

        #### Allowed For

        * Agents
      operationId: ListTriggerActionConditionDefinitions
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerDefinitionResponse'
              examples:
                default:
                  $ref: '#/components/examples/TriggerDefinitionResponseExample'
  /api/v2/triggers/destroy_many:
    delete:
      tags:
      - Triggers
      summary: Bulk Delete Triggers
      description: |
        Deletes the triggers corresponding to the provided comma-separated list of IDs.

        #### Allowed For

        * Agents

        #### Request Parameters

        The DELETE request takes one parameter, an `ids` object that lists the
        triggers to delete.

        | Name | Description
        | ---- | -----------
        | ids  | The IDs of the triggers to delete

        #### Example request

        ```js
        {
          "ids": "25,23,27,22"
        }
        ```
      operationId: DeleteManyTriggers
      responses:
        "204":
          description: No content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TriggerIds'
  /api/v2/triggers/reorder:
    put:
      tags:
      - Triggers
      summary: Reorder Triggers
      description: |
        Alters the firing order of triggers in the account. See
        [Reordering and sorting triggers](https://support.zendesk.com/hc/en-us/articles/115015696088)
        in the Zendesk Help Center. The firing order is set in a `trigger_ids` array in the request body.

        You must include every trigger id in your account to reorder the triggers. If not, the endpoint will return 404 Forbidden.

        Reordering triggers via the API is not permitted if you have more than one trigger category. If there is more than one
        trigger category, the endpoint will return a `LimitOneCategory` error.

        #### Allowed For

        * Agents
      operationId: ReorderTriggers
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerResponse'
              examples:
                default:
                  $ref: '#/components/examples/TriggerResponseExample'
  /api/v2/triggers/search:
    get:
      tags:
      - Triggers
      summary: Search Triggers
      description: |
        #### Pagination

        * Offset pagination only

        See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).

        #### Allowed For

        * Agents

        #### Sideloads

        The following sideloads are supported. For more information, see [Side-loading](/documentation/ticketing/using-the-zendesk-api/side_loading/).

        | Name             | Will sideload
        | ---------------- | -------------
        | app_installation | The app installation that requires each trigger, if present
        | permissions      | The permissions for each trigger
        | usage_1h         | The number of times each trigger has been used in the past hour
        | usage_24h        | The number of times each trigger has been used in the past day
        | usage_7d         | The number of times each trigger has been used in the past week
        | usage_30d        | The number of times each trigger has been used in the past thirty days

        #### Filter

        Use the `filter` query parameter to filter a trigger search by one or more attributes. For example, the following `filter` argument filters triggers by the `description` attribute:

        ```json
        {
          "json": {
            "description": "Close a ticket"
          }
        }
        ```
      operationId: SearchTriggers
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggersResponse'
              examples:
                default:
                  $ref: '#/components/examples/TriggersSearchResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/TriggerSearchQuery'
    - $ref: '#/components/parameters/TriggerSearchFilter'
    - $ref: '#/components/parameters/TriggerActive'
    - $ref: '#/components/parameters/TriggerSort'
    - $ref: '#/components/parameters/TriggerSortBy'
    - $ref: '#/components/parameters/TriggerSortOrder'
    - $ref: '#/components/parameters/TriggerInclude'
  /api/v2/triggers/update_many:
    put:
      tags:
      - Triggers
      summary: Update Many Triggers
      description: |
        Updates the position or the active status of multiple triggers. Any additional properties are ignored.

        #### Allowed For

        * Agents

        #### Request Parameters

        The PUT request expects a `triggers` object that lists the triggers to update.

        Each trigger may have the following properties:

        | Name        | Mandatory | Description
        | --------    | --------- | -----------
        | id          | yes       | The ID of the trigger to update
        | position    | no        | The new position of the trigger
        | active      | no        | The active status of the trigger (true or false)
        | category_id | no        | The ID of the new category the trigger is to be moved to

        #### Example Request

        ```js
        {
          "triggers": [
            {"id": 25, "position": 3},
            {"id": 23, "position": 5},
            {"id": 27, "position": 9},
            {"id": 22, "position": 7}
          ]
        }
        ```
      operationId: UpdateManyTriggers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerBulkUpdateRequest'
            examples:
              default:
                $ref: '#/components/examples/TriggerBulkUpdateRequestExample'
        required: true
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggersResponse'
              examples:
                default:
                  $ref: '#/components/examples/TriggersResponseExample'
  /api/v2/uploads:
    post:
      tags:
      - Attachments
      summary: Upload Files
      description: |
        Uploads a file that can be attached to a ticket comment. It doesn't attach the file to the comment. For details and examples, see [Attaching ticket comments with the API](/documentation/ticketing/using-the-zendesk-api/adding-ticket-attachments-with-the-api).

        The endpoint has a required `filename` query parameter. The parameter specifies what the file will be named when attached to the ticket comment (to give the agent more context about the file). The parameter does not specify the file on the local system to be uploaded. While the two names can be different, their file extensions must be the same. If they don't match, the agent's browser or file reader could give an error when attempting to open the attachment.

        The `Content-Type` header must contain a recognized MIME type that correctly describes the type of the uploaded file. Failing to send a recognized, correct type may cause undesired behavior. For example, in-browser audio playback may be interrupted by the browser's security mechanisms for MP3s uploaded with an incorrect type.

        Adding multiple files to the same upload is handled by splitting requests and passing the API token received from the first request to each subsequent request. The token is valid for 3 days.

        **Note**: Even if [private attachments](https://support.zendesk.com/hc/en-us/articles/204265396) are enabled in the Zendesk Support instance, uploaded files are visible to any authenticated user at the `content_URL` specified in the [JSON response](#json-format) until the upload token is consumed. Once a file is associated with a ticket or post, visibility is restricted to users with access to the ticket or post with the attachment.

        #### Allowed For

        * End users
      operationId: UploadFiles
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentUploadResponse'
              examples:
                default:
                  $ref: '#/components/examples/AttachmentUploadResponseExample'
  /api/v2/uploads/{token}:
    delete:
      tags:
      - Attachments
      summary: Delete Upload
      description: |
        #### Allowed for

        * End Users
      operationId: DeleteUpload
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: token
        in: path
        description: The token of the uploaded attachment
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 6bk3gql82em5nmf
      responses:
        "204":
          description: No Content response
  /api/v2/user_fields:
    get:
      tags:
      - User Fields
      summary: List User Fields
      description: |
        Returns a list of custom user fields in your account. Fields are returned in the order that you specify in your user fields configuration in Zendesk Support. Clients should cache this resource for the duration of their API usage and map the key for each User Field to the values returned under the `user_fields` attribute on the [User](/api-reference/ticketing/users/users/) resource.

        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For

        * Agents
      operationId: ListUserFields
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFieldsResponse'
              examples:
                default:
                  $ref: '#/components/examples/UserFieldsResponseExample'
    post:
      tags:
      - User Fields
      summary: Create User Field
      description: |
        Creates any of the following custom field types:

        * text (default when no "type" is specified)
        * textarea
        * checkbox
        * date
        * integer
        * decimal
        * regexp
        * dropdown
        * lookup

        See [About custom field types](https://support.zendesk.com/hc/en-us/articles/203661866) in Zendesk help.

        #### Allowed For

        * Admins
      operationId: CreateUserField
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFieldResponse'
              examples:
                default:
                  $ref: '#/components/examples/UserFieldCreateResponseExample'
  /api/v2/user_fields/{user_field_id}:
    get:
      tags:
      - User Fields
      summary: Show User Field
      description: |
        #### Allowed for

        * Agents
      operationId: ShowUserField
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFieldResponse'
              examples:
                default:
                  $ref: '#/components/examples/UserFieldResponseExample'
    put:
      tags:
      - User Fields
      summary: Update User Field
      description: |
        #### Updating a Dropdown (Tagger) Field

        Dropdown fields return an array of `custom_field_options` which specify the name, value and order of the list of dropdown options.
        Understand the following behavior when updating a dropdown field:

        - All options must be passed on update. Options that are not passed will be removed. As a result, these values will be removed from any organizations.
        - To create a new option, pass a null `id` along with `name` and `value`.
        - To update an existing option, pass its `id` along with `name` and `value`.
        - To re-order an option, reposition it in the `custom_field_options` array relative to the other options.
        - To remove an option, omit it from the list of options upon update.

        #### Example Request

        ```bash
        curl https://{subdomain}.zendesk.com/api/v2/user_fields/{user_field_id}.json \
          -H "Content-Type: application/json" -X PUT \
          -d '{"user_field": {"custom_field_options": [{"id": 124, "name": "Option 2", "value": "option_2"}, {"id": 123, "name": "Option 1", "value": "option_1"}, {"id": 125, "name": "Option 2", "value": "option_3"}]}}' \
          -v -u {email_address}:{password}
        ```
        #### Allowed for

        * Admins
      operationId: UpdateUserField
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFieldResponse'
              examples:
                default:
                  $ref: '#/components/examples/UserFieldUpdateResponseExample'
    delete:
      tags:
      - User Fields
      summary: Delete User Field
      description: |
        #### Allowed for

        * Admins
      operationId: DeleteUserField
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserFieldId'
  /api/v2/user_fields/{user_field_id}/options:
    get:
      tags:
      - User Fields
      summary: List User Field Options
      description: |
        Returns a list of custom user field options for the given dropdown user field.

        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For

        * Agents
      operationId: ListUserFieldOptions
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldOptionsResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomUserFieldOptionsResponseExample'
    post:
      tags:
      - User Fields
      summary: Create or Update a User Field Option
      description: |
        Creates a new option or updates an existing option for the given drop-down user field.

        To update an option, include the id of the option in the `custom_field_option` object. Example: `{"custom_field_option": {"id": 10002, "name": "Pineapples", ... }`. If an option exists for the given ID, the option will be updated. Otherwise, a new option will be created.

        #### Response

        Returns one of the following status codes:

        - 200 with `Location: /api/v2/user_fields/{user_field_id}/options.json` if the user field option already exists in the database
        - 201 with `Location: /api/v2/user_fields/{user_field_id}/options.json` if the user field option is new

        #### Allowed For

        * Admins
      operationId: CreateOrUpdateUserFieldOption
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldOptionResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomUserFieldOptionUpdateResponseExample'
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldOptionResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomUserFieldOptionCreateResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserFieldId'
  /api/v2/user_fields/{user_field_id}/options/{user_field_option_id}:
    get:
      tags:
      - User Fields
      summary: Show a User Field Option
      description: |
        #### Allowed for
        * Agents
      operationId: ShowUserFieldOption
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldOptionResponse'
              examples:
                default:
                  $ref: '#/components/examples/CustomUserFieldOptionResponseExample'
    delete:
      tags:
      - User Fields
      summary: Delete User Field Option
      description: |
        #### Allowed for
        * Admins
      operationId: DeleteUserFieldOption
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserFieldId'
    - $ref: '#/components/parameters/UserFieldOptionId'
  /api/v2/user_fields/reorder:
    put:
      tags:
      - User Fields
      summary: Reorder User Field
      description: |
        #### Allowed For

        * Admins
      operationId: ReorderUserField
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
  /api/v2/users:
    get:
      tags:
      - Users
      summary: List Users
      description: |
        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For

        * Admins, Agents and Light Agents
      operationId: ListUsers
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/UserRoleFilter'
      - $ref: '#/components/parameters/UserRolesFilter'
      - $ref: '#/components/parameters/UserPermissionSetFilter'
      - $ref: '#/components/parameters/UserExternalIdFilter'
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
              examples:
                default:
                  $ref: '#/components/examples/UsersResponseExample'
    post:
      tags:
      - Users
      summary: Create User
      operationId: CreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
            examples:
              default:
                $ref: '#/components/examples/UserRequestExample'
        required: true
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              examples:
                default:
                  $ref: '#/components/examples/UserCreateResponseExample'
  /api/v2/users/{user_id}:
    get:
      tags:
      - Users
      summary: Show User
      description: |
        #### Allowed For

        * Agents
      operationId: ShowUser
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              examples:
                default:
                  $ref: '#/components/examples/UserResponseExample'
    put:
      tags:
      - Users
      summary: Update User
      operationId: UpdateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
            examples:
              default:
                $ref: '#/components/examples/UpdateUserRequestExample'
        required: true
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              examples:
                default:
                  $ref: '#/components/examples/UpdateUserResponseExample'
    delete:
      tags:
      - Users
      summary: Delete User
      description: |
        Deletes the user and associated records from the account.

        **Warning**:

        * Deleted users are not recoverable.
        * Both agents and administrators can soft delete users in the agent interface in Zendesk Support. Agents with permission can delete end users, while administrators can delete all users except the account owner.

        To comply with GDPR, a further step is needed. See [Permanently Delete User](/api-reference/ticketing/users/users/#permanently-delete-user).

        #### Allowed For

        * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage end users or team members
      operationId: DeleteUser
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              examples:
                default:
                  $ref: '#/components/examples/DeleteUserResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserId'
  /api/v2/users/{user_id}/compliance_deletion_statuses:
    get:
      tags:
      - Users
      summary: Show Compliance Deletion Statuses
      description: |
        Returns the GDPR status for each user per area of compliance. A Zendesk area of compliance is typically a product like "support/explore" but can be more fine-grained for areas within the product lines.

        If the user is not in the account, the request returns a 404 status.

        ```http
        Status: 404
        {
          "error":"RecordNotFound",
          "description":"Not found"
        }
        ```

        #### Allowed For

        * Agents, with restrictions

        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).
      operationId: ShowUserComplianceDeletionStatuses
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: application
        in: query
        description: Area of compliance
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: chat
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComplianceDeletionStatusesResponse'
              examples:
                default:
                  $ref: '#/components/examples/ComplianceDeletionStatusesResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserId'
  /api/v2/users/{user_id}/group_memberships:
    get:
      tags:
      - Group Memberships
      summary: List Memberships
      description: |
        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For:

        * Agents
      operationId: ListGroupMembershipsByUserId
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMembershipsResponse'
              examples:
                default:
                  $ref: '#/components/examples/GroupMembershipsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserId'
  /api/v2/users/{user_id}/group_memberships/{group_membership_id}/make_default:
    put:
      tags:
      - Group Memberships
      summary: Set Membership as Default
      description: |
        #### Allowed For:

        * Agents
      operationId: GroupMembershipSetDefault
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMembershipsResponse'
              examples:
                default:
                  $ref: '#/components/examples/GroupMembershipsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserId'
    - $ref: '#/components/parameters/GroupMembershipId'
  /api/v2/users/{user_id}/identities:
    get:
      tags:
      - User Identities
      summary: List Identities
      description: |
        Returns a list of identities for the given user.

        Use the first endpoint if authenticating as an agent. Use the second if authenticating as an end user. End users can only list email and phone number identities.

        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For

        * Agents
        * Verified end users
      operationId: ListUserIdentities
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdentitiesResponse'
              examples:
                default:
                  $ref: '#/components/examples/UserIdentitiesResponseExample'
    post:
      tags:
      - User Identities
      summary: Create Identity
      description: |
        Adds an identity to a user's profile. An agent can add an identity to any user profile.

        Supported identity types:

        | Type             | Example |
        | ---------------- | ------- |
        | email            | `{ "type" : "email", "value" : "someone@example.com" }` |
        | twitter          | `{ "type" : "twitter", "value" : "screen_name" }` |
        | facebook         | `{ "type" : "facebook", "value" : "855769377321" }` |
        | google           | `{ "type" : "google", "value" : "example@gmail.com" }` |
        | agent_forwarding | `{ "type" : "agent_forwarding", "value" : "+1 555-123-4567" }` |
        | phone_number     | `{ "type" : "phone_number", "value" : "+1 555-123-4567" }` |

        To create an identity without sending out a verification email, include a `"skip_verify_email": true` property.

        #### Allowed For

        * Agents
      operationId: CreateUserIdentity
      responses:
        "201":
          description: Created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdentityResponse'
              examples:
                default:
                  $ref: '#/components/examples/UserIdentityCreateResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserId'
  /api/v2/users/{user_id}/identities/{user_identity_id}:
    get:
      tags:
      - User Identities
      summary: Show Identity
      description: |
        Shows the identity with the given id for a given user.

        Use the first endpoint if authenticating as an agent. Use the second if authenticating as an end user. End users can only view email or phone number identity.

        #### Allowed For

        * Agents
        * Verified end users
      operationId: ShowUserIdentity
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdentityResponse'
              examples:
                default:
                  $ref: '#/components/examples/UserIdentityResponseExample'
    put:
      tags:
      - User Identities
      summary: Update Identity
      description: |
        This endpoint allows you to:

        * Set the specified identity as verified (but you cannot unverify a verified identity)
        * Update the `value` property of the specified identity

        You can't change an identity's `primary` attribute with this endpoint. You must use the [Make Identity Primary](#make-identity-primary) endpoint instead.

        #### Allowed For

        * Agents
      operationId: UpdateUserIdentity
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdentityResponse'
              examples:
                default:
                  $ref: '#/components/examples/UserIdentityUpdateResponseExample'
    delete:
      tags:
      - User Identities
      summary: Delete Identity
      description: |
        Deletes the identity for a given user.
        In certain cases, a phone number associated with an identity is still visible on the user profile after the identity has been deleted via API. You can remove the phone number from the user profile by updating the `phone` attribute of the user to an empty string. See [Update User via API](/api-reference/ticketing/users/users/#update-user) for details and examples.

        #### Allowed For
        * Agents
      operationId: DeleteUserIdentity
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserId'
    - $ref: '#/components/parameters/UserIdentityId'
  /api/v2/users/{user_id}/identities/{user_identity_id}/make_primary:
    put:
      tags:
      - User Identities
      summary: Make Identity Primary
      description: |
        Sets the specified identity as primary. To change other attributes, use the [Update  Identity](#update-identity) endpoint. This is a collection-level operation and the correct behavior for an API client is to subsequently reload the entire collection.

        The first endpoint is the preferred option if authenticating as an agent. If authenticating as an end user, you can only use the second endpoint. In addition, an end user can only make an email identity primary if the email is verified.

        #### Allowed For

        * Agents
        * Verified end users
      operationId: MakeUserIdentityPrimary
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdentitiesResponse'
              examples:
                default:
                  $ref: '#/components/examples/UserIdentitiesResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserId'
    - $ref: '#/components/parameters/UserIdentityId'
  /api/v2/users/{user_id}/identities/{user_identity_id}/request_verification:
    put:
      tags:
      - User Identities
      summary: Request User Verification
      description: |
        Sends the user a verification email with a link to verify ownership of the email address.

        #### Allowed For

        * Agents
      operationId: RequestUserVerfication
      responses:
        "200":
          description: Success description
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserId'
    - $ref: '#/components/parameters/UserIdentityId'
  /api/v2/users/{user_id}/identities/{user_identity_id}/verify:
    put:
      tags:
      - User Identities
      summary: Verify Identity
      description: |
        Sets the specified identity as verified.

        For security reasons, you can't use this endpoint to update the email identity of the account owner. To verify the person's identity, send a verification email. See [Verifying the account owner's email address](https://support.zendesk.com/hc/en-us/articles/4408828975130) in Zendesk help.

        #### Allowed For

        * Agents
      operationId: VerifyUserIdentity
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdentityResponse'
              examples:
                default:
                  $ref: '#/components/examples/UserIdentityResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserId'
    - $ref: '#/components/parameters/UserIdentityId'
  /api/v2/users/{user_id}/merge:
    put:
      tags:
      - Users
      summary: Merge End Users
      description: |
        Merges the end user specified in the path parameter into the existing end user specified in the request body.

        Any two end users can be merged with the exception of end users created by sharing agreements.

        Agents and admins cannot be merged.

        For more information about how user data is merged, see [Merging a user's duplicate account](https://support.zendesk.com/hc/en-us/articles/4408887695898) in Zendesk help.

        #### Allowed For

        * Admins or agents with permission to edit end users
      operationId: MergeEndUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
            examples:
              default:
                $ref: '#/components/examples/MergeEndUsersRequestExample'
        required: true
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              examples:
                default:
                  $ref: '#/components/examples/UserResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserId'
  /api/v2/users/{user_id}/organization_memberships/{organization_membership_id}/make_default:
    put:
      tags:
      - Organization Memberships
      summary: Set Membership as Default
      description: |
        Sets the default organization membership of a given user.

        #### Allowed for

        * Admins
        * Agents when setting the default organization membership for an end user
      operationId: SetOrganizationMembershipAsDefault
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationMembershipsResponse'
              examples:
                default:
                  $ref: '#/components/examples/OrganizationMembershipsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserId'
    - $ref: '#/components/parameters/OrganizationMembershipId'
  /api/v2/users/{user_id}/organizations/{organization_id}:
    delete:
      tags:
      - Organization Memberships
      summary: Unassign Organization
      description: |
        Immediately removes a user from an organization and schedules a job to unassign all working tickets currently assigned to the user and organization combination. The `organization_id` of the unassigned tickets is set to null.

        #### Allowed For

        * Agents
      operationId: UnassignOrganization
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/OrganizationId'
    - $ref: '#/components/parameters/UserId'
  /api/v2/users/{user_id}/organizations/{organization_id}/make_default:
    put:
      tags:
      - Organization Memberships
      summary: Set Organization as Default
      description: |
        Sets the default organization membership of a given user.

        #### Allowed For

        * Agents
      operationId: SetOrganizationAsDefault
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationMembershipResponse'
              examples:
                default:
                  $ref: '#/components/examples/OrganizationMembershipResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserId'
    - $ref: '#/components/parameters/OrganizationId'
  /api/v2/users/{user_id}/password:
    put:
      tags:
      - User Passwords
      summary: Change Your Password
      description: |
        You can only change your own password. Nobody can change the password of another user because it requires knowing the user's existing password. However, an admin can set a new password for another user without knowing the existing password. See [Set a User's Password](#set-a-users-password) above.

        #### Allowed For

        * Agents
        * End Users
      operationId: ChangeOwnPassword
      responses:
        "200":
          description: Success description
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
    post:
      tags:
      - User Passwords
      summary: Set a User's Password
      description: |
        An admin can set a user's password only if the setting is enabled in Zendesk Support under **Settings** > **Security** > **Global**. The setting is off by default. Only the account owner can access and change this setting.

        #### Allowed For

        * Admins
      operationId: SetUserPassword
      responses:
        "200":
          description: Success description
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserId'
  /api/v2/users/{user_id}/password/requirements:
    get:
      tags:
      - User Passwords
      summary: List password requirements
      description: |
        #### Allowed For

        * Agents
        * End Users
      operationId: GetUserPasswordRequirements
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPasswordRequirementsResponse'
              examples:
                default:
                  $ref: '#/components/examples/UserPasswordRequirementsResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserId'
  /api/v2/users/{user_id}/related:
    get:
      tags:
      - Users
      summary: Show User Related Information
      operationId: ShowUserRelated
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRelatedResponse'
              examples:
                default:
                  $ref: '#/components/examples/UserRelatedResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserId'
  /api/v2/users/{user_id}/sessions:
    delete:
      tags:
      - Sessions
      summary: Bulk Delete Sessions
      description: |
        Deletes all the sessions for a user.

        #### Allowed For

        * Admins, Agents, End users
      operationId: BulkDeleteSessionsByUserId
      responses:
        "204":
          description: No Content
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/UserId'
  /api/v2/users/{user_id}/sessions/{session_id}:
    get:
      tags:
      - Sessions
      summary: Show Session
      description: |
        #### Allowed For

        * Admins, Agents, End users
      operationId: ShowSession
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
              examples:
                default:
                  $ref: '#/components/examples/SessionResponseExample'
    delete:
      tags:
      - Sessions
      summary: Delete Session
      description: |
        #### Allowed For

        * Admins, Agents, End users
      operationId: DeleteSession
      responses:
        "204":
          description: No Content
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/SessionId'
    - $ref: '#/components/parameters/UserId'
  /api/v2/users/{user_id}/skips:
    get:
      tags:
      - Ticket Skips
      summary: List Ticket Skips
      description: |
        Archived tickets are not included in the response. See
        [About archived tickets](https://support.zendesk.com/hc/en-us/articles/203657756) in
        the Support Help Center.

        #### Pagination

        - Cursor pagination (recommended)
        - Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For
        * Agents with "View only" or higher reports permissions in Support.
          These permissions are distinct from Explore permissions.
        * Agents retrieving their own skips
      operationId: ListTicketSkips
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketSkipsResponse'
              examples:
                default:
                  $ref: '#/components/examples/TicketSkipResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/SkipTicketUserId'
    - $ref: '#/components/parameters/TicketSortOrder'
    - $ref: '#/components/parameters/TicketId'
  /api/v2/users/autocomplete:
    get:
      tags:
      - Users
      summary: Autocomplete Users
      description: |
        Returns an array of users whose name starts with the value specified in the `name` parameter.
        It only returns users with no foreign identities.

        #### Allowed For

        * Agents
      operationId: AutocompleteUsers
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: name
        in: query
        description: |
          The name to search for the user
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: gil
      - $ref: '#/components/parameters/LookupRelationshipAutocompleteFieldIdFragment'
      - $ref: '#/components/parameters/LookupRelationshipAutocompleteSourceFragment'
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
              examples:
                default:
                  $ref: '#/components/examples/SearchUsersResponseExample'
  /api/v2/users/count:
    get:
      tags:
      - Users
      summary: Count Users
      description: |
        Returns an approximate count of users. If the count exceeds 100,000, it is updated every 24 hours.

        The response includes a `refreshed_at` property in a `count` object that contains a timestamp indicating when the count was last updated.

        **Note**: When the count exceeds 100,000, the `refreshed_at` property may occasionally be null.
        This indicates that the count is being updated in the background. The `count` object's `value` property is limited to 100,000 until the update is complete.

        #### Allowed For

        * Admins, Agents and Light Agents
      operationId: CountUsers
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - $ref: '#/components/parameters/UserRoleFilter'
      - $ref: '#/components/parameters/UserRolesFilter'
      - $ref: '#/components/parameters/UserPermissionSetFilter'
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResponse'
              examples:
                default:
                  $ref: '#/components/examples/UserCountResponseExample'
  /api/v2/users/create_many:
    post:
      tags:
      - Users
      summary: Create Many Users
      description: |
        Accepts an array of up to 100 user objects.

        **Note**: To protect the data in your Zendesk account, bulk user imports are not enabled by default in Zendesk accounts. The account owner must contact [Zendesk Customer Support](https://support.zendesk.com/hc/en-us/articles/4408843597850) to enable the imports. A 403 Forbidden
        error is returned if data imports are not enabled.

        #### Allowed For

        * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage end users or team members

        #### Specifying an organization

        You can assign a user to an existing organization by setting an
        `organization_id` property in the user object.

        #### Response

        This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
      operationId: CreateManyUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersRequest'
            examples:
              default:
                $ref: '#/components/examples/UsersCreateManyRequestExample'
        required: true
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/JobStatusResponseExample'
  /api/v2/users/create_or_update:
    post:
      tags:
      - Users
      summary: Create Or Update User
      description: |
        Creates a user if the user does not already exist, or updates an existing user
        identified by e-mail address or external ID.

        If you don't specify a role parameter, the new user is assigned the role of end user.

        If you need to create users without sending out a verification email, include a `"skip_verify_email": true` property in the body.

        #### External ID Case Sensitivity

        When providing an external id to identify an existing user to update, the search for the user record is not case sensitive.

        However, if an existing user is found, the system will update the user's external id to match the case of the external id used to find the user.

        #### Response Status Code

        - If the user exists in Zendesk, a successful request returns a 200 status code with "Location: /api/v2/users/{user_id}.json".
        - If the user does not exist in Zendesk, a successful request returns a 201 status code with "Location: /api/v2/users/{new_user_id}.json".

        #### Allowed For

        * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage end users or team members
      operationId: CreateOrUpdateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
            examples:
              default:
                $ref: '#/components/examples/UserRequestExample'
        required: true
      responses:
        "200":
          description: "Successful response, when user exits"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              examples:
                default:
                  $ref: '#/components/examples/UserCreateResponseExample'
        "201":
          description: "Created response, when user is new"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              examples:
                default:
                  $ref: '#/components/examples/UserCreateResponseExample'
  /api/v2/users/create_or_update_many:
    post:
      tags:
      - Users
      summary: Create Or Update Many Users
      description: "Accepts an array of up to 100 user objects. For each user, the\
        \ user is created if it does not\nalready exist, or the existing user is updated.\n\
        \n**Note**: To protect the data in your Zendesk account, bulk user imports\
        \ are not enabled by default in Zendesk accounts. The account owner must contact\
        \ [Zendesk Customer Support](https://support.zendesk.com/hc/en-us/articles/4408843597850)\
        \ to enable the imports. A 403 Forbidden\nerror is returned if data imports\
        \ are not enabled.    \n\nEach individual user object can identify an existing\
        \ user by `email` or by `external_id`.\n\nThis endpoint returns a `job_status`\
        \ [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format)\
        \ and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status)\
        \ endpoint to check for the job's completion. Only a certain number of jobs\
        \ can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit)\
        \ for more information.\n\n#### Allowed For\n\n* Admins and [agents in custom\
        \ roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd)\
        \ to manage end users or team members\n"
      operationId: CreateOrUpdateManyUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersRequest'
            examples:
              default:
                $ref: '#/components/examples/UsersRequestExample'
        required: true
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/JobStatusResponseExample'
  /api/v2/users/destroy_many:
    delete:
      tags:
      - Users
      summary: Bulk Delete Users
      description: |
        Accepts a comma-separated list of up to 100 user ids.

        The request takes an `ids` or an `external_ids` query parameter.

        #### Allowed for

        - Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage end users or team members

        #### Response

        This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
      operationId: DestroyManyUsers
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: ids
        in: query
        description: Id of the users to delete. Comma separated
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "1,2,3"
      - name: external_ids
        in: query
        description: External Id of the users to delete. Comma separated
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "abc,def,ghi"
        x-ballerina-name: externalIds
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/JobStatusBulkDeleteResponseExample'
  /api/v2/users/logout_many:
    post:
      tags:
      - Users
      summary: Logout many users
      description: |
        Accepts a comma-separated list of up to 100 user ids.

        #### Allowed For:

        * Admins
      operationId: LogoutManyUsers
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: ids
        in: query
        description: |
          Accepts a comma-separated list of up to 100 user ids
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "1,2"
      responses:
        "202":
          description: Accepted response
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
  /api/v2/users/me:
    get:
      tags:
      - Users
      summary: Show Self
      description: |
        #### Allowed For

        * Anonymous users

        #### Authenticity Token

        The endpoint returns an `authenticity_token`. Zendesk API calls made by end users from a Zendesk help center must include this token in the `X-CSRF-Token` HTTP header. This helps prevent [cross-site request forgery (CSRF)](https://en.wikipedia.org/wiki/Cross-site_request_forgery) attacks.

        For an example using an authenticity token, see the AJAX request in the [Upgrading from Templating API v1](https://developer.zendesk.com/documentation/help_center/help-center-templates/v1#jquery) documentation.
      operationId: ShowCurrentUser
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUserResponse'
              examples:
                default:
                  $ref: '#/components/examples/CurrentUserResponseExample'
  /api/v2/users/me/logout:
    delete:
      tags:
      - Sessions
      summary: Delete the Authenticated Session
      description: |
        Deletes the current session. In practice, this only works when using session auth for requests, such as client-side requests
        made from a Zendesk app. When using OAuth or basic authentication, you don't have a current session so this endpoint has no effect.

        #### Allowed For

        * Admins, Agents, End users
      operationId: DeleteAuthenticatedSession
      responses:
        "204":
          description: No Content
  /api/v2/users/me/session:
    get:
      tags:
      - Sessions
      summary: Show the Currently Authenticated Session
      description: |
        #### Allowed For

        * Admins, Agents, End users
      operationId: ShowCurrentlyAuthenticatedSession
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
              examples:
                default:
                  $ref: '#/components/examples/SessionResponseExample'
  /api/v2/users/me/session/renew:
    get:
      tags:
      - Sessions
      summary: Renew the current session
      description: |
        #### Allowed For

        * Admins, Agents, End users
      operationId: RenewCurrentSession
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenewSessionResponse'
              examples:
                default:
                  $ref: '#/components/examples/RenewSessionResponseExample'
  /api/v2/users/request_create:
    post:
      tags:
      - Users
      summary: Request User Create
      description: |
        Sends the owner a reminder email to update their subscription so more agents can be created.

        #### Allowed For

        * Agents
      operationId: RequestUserCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
            examples:
              default:
                $ref: '#/components/examples/RequestUserCreateRequestExample'
        required: true
      responses:
        "200":
          description: description
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
  /api/v2/users/search:
    get:
      tags:
      - Users
      summary: Search Users
      description: |
        Returns an array of users who meet the search criteria.

        #### Pagination

        * Offset pagination only

        See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).

        #### Allowed For

        * Admins, Agents and Light Agents
      operationId: SearchUsers
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: query
        in: query
        description: |
          The `query` parameter supports the Zendesk search syntax for more advanced
          user searches. It can specify a partial or full value of any
          user property, including name, email address, notes, or phone. Example:
          `query="jdoe"`.
          See the [Search API](/api-reference/ticketing/ticket-management/search/)
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: jdoe
      - name: external_id
        in: query
        description: |
          The `external_id` parameter does not support the search syntax. It only accepts ids
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: abc124
        x-ballerina-name: externalId
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
              examples:
                default:
                  $ref: '#/components/examples/SearchUsersResponseExample'
  /api/v2/users/show_many:
    get:
      tags:
      - Users
      summary: Show Many Users
      description: |
        Accepts a comma-separated list of up to 100 user ids or external ids.

        #### Allowed For:

        * Agents
      operationId: ShowManyUsers
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: ids
        in: query
        description: |
          Accepts a comma-separated list of up to 100 user ids
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "1,2"
      - name: external_ids
        in: query
        description: |
          Accepts a comma-separated list of up to 100 external ids
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "abc,def"
        x-ballerina-name: externalIds
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
              examples:
                default:
                  $ref: '#/components/examples/ShowManyUsersResponseExample'
  /api/v2/users/update_many:
    put:
      tags:
      - Users
      summary: Update Many Users
      operationId: UpdateManyUsers
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: ids
        in: query
        description: Id of the users to update. Comma separated
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "1,2,3"
      - name: external_ids
        in: query
        description: External Id of the users to update. Comma separated
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "abc,def,ghi"
        x-ballerina-name: externalIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersUpdateManyBody'
            examples:
              default:
                $ref: '#/components/examples/UpdateManyUsersRequestExample'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
              examples:
                default:
                  $ref: '#/components/examples/JobStatusResponseExample'
  /api/v2/views:
    get:
      tags:
      - Views
      summary: List Views
      description: |
        Lists shared and personal views available to the current user.

        #### Sideloads

        The following sideloads are supported:

        | Name             | Will sideload
        | ---------------- | -------------
        | app_installation | The app installation that requires each view, if present
        | permissions      | The permissions for each view

        #### Pagination

        - Cursor pagination (recommended, but only sorts by `created_at`)
        - Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For

        * Agents
      operationId: ListViews
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: access
        in: query
        description: "Only views with given access. May be \"personal\", \"shared\"\
          , or \"account\""
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: active
        in: query
        description: "Only active views if true, inactive views if false"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: group_id
        in: query
        description: Only views belonging to given group
        required: false
        style: form
        explode: true
        schema:
          type: integer
        x-ballerina-name: groupId
      - name: sort_by
        in: query
        description: "Possible values are \"alphabetical\", \"created_at\", or \"\
          updated_at\". Defaults to \"position\""
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: sortBy
      - name: sort_order
        in: query
        description: "One of \"asc\" or \"desc\". Defaults to \"asc\" for alphabetical\
          \ and position sort, \"desc\" for all others"
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: sortOrder
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewsResponse'
              examples:
                default:
                  $ref: '#/components/examples/ViewsResponseExample'
    post:
      tags:
      - Views
      summary: Create View
      description: |
        #### Allowed For

        * Agents

        #### JSON Format

        The JSON format consists of one property, a `view` object that lists the values to set when the view is created.

        **Note**: The request must include at least one condition in the `all` array that checks one of the following fields: `status`, `type`, `group_id`, `assignee_id`, or `requester_id`.

        | Name        | Description
        | ----------- | -----------
        | title       | Required. The title of the view
        | all         | Required. An array of one or more conditions. A ticket must meet all of them to be included in the view. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference)
        | any         | An array of one or more conditions. A ticket must meet any of them to be included in the view. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference)
        | description | The description of the view
        | active      | Allowed values are true or false. Determines if the view is displayed or not
        | output      | An object that specifies the columns to display. Example: `"output": {"columns": ["status", "description", "priority"]}`. See [View columns](#view-columns)
        | restriction | An object that describes who can access the view. To give all agents access to the view, omit this property

        The `restriction` object has the following properties.

        | Name | Comment
        | ---- | -------
        | type | Allowed values are "Group" or "User"
        | id   | The numeric ID of a single group or user
        | ids  | The numeric IDs of a single or more groups. Recommended for "Group" `type`

        If `type` is "Group", the `ids` property is the preferred method of specifying the group id or ids.

        #### Example Request Body

        ```js
        {
          "view": {
            "title": "Kelly's tickets",
            "raw_title": "{{dc.tickets_assigned_to_kelly}}",
            "description": "Tickets that are assigned to Kelly",
            "active": true,
            "position": 3,
            "restriction": {
              "type": "User",
              "id": "213977756"
            },
            "all": [
              {
                "field": "status",
                "operator": "less_than",
                "value": "solved"
              },
              {
                "field": "group_id",
                "operator": "is",
                "value": "24000932"
              },
              {
                "field": "custom_fields_360011872073",
                "operator": "is",
                "value": "Canada"
              },
              ...
            ],
            "output": {
              "columns": ["status", "requester", "assignee"],
              "group_by": "assignee",
              "group_order": "desc",
              "sort_by": "status",
              "sort_order": "desc"
            }
          }
        }
        ```

        #### View columns

        The `output` request parameter lets you specify what columns to include in the view in the agent interface. Example: `"output": {"columns": ["status", "description", "priority"]}`. The following table lists possible columns for views in the agent UI and the corresponding values in the `columns` array.

        For custom fields, specify the id of the custom field in the `columns` array.

        You can specify a total of 10 columns to a view.

        | View column title in UI     | Value                |
        |---------------------------- | -------------------- |
        | Assigned                    | `assigned`           |
        | Assignee                    | `assignee`           |
        | Due Date                    | `due_date`           |
        | Group                       | `group`              |
        | ID                          | `nice_id`            |
        | Updated                     | `updated`            |
        | Assignee updated            | `updated_assignee`   |
        | Requester updated           | `updated_requester`  |
        | Updater                     | `updated_by_type`    |
        | Organization                | `organization`       |
        | Priority                    | `priority`           |
        | Requested                   | `created`            |
        | Requester                   | `requester`          |
        | Requester language          | `locale_id`          |
        | Satisfaction                | `satisfaction_score` |
        | Solved                      | `solved`             |
        | Status category             | `status`             |
        | Subject                     | `description`        |
        | Submitter                   | `submitter`          |
        | Ticket form                 | `ticket_form`        |
        | Type                        | `type`               |
        | Brand                       | `brand`              |
        | Ticket status               | `custom_status_id`   |

        #### View sorting

        You can group and sort items in the view by adding items to the `output` parameter:

        | Attribute                   | Description
        |-----------------------------| -----------
        | `group_by`, `sort_by`       | Sort or group the tickets by a column in the [View columns](#view-columns) table. The `subject` and `submitter` columns are not supported
        | `group_order`, `sort_order` | Either "asc" or "desc"
      operationId: CreateView
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewResponse'
              examples:
                default:
                  $ref: '#/components/examples/ViewCreateResponseExample'
  /api/v2/views/{view_id}:
    get:
      tags:
      - Views
      summary: Show View
      description: |
        #### Allowed For

        * Agents
      operationId: ShowView
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewResponse'
              examples:
                default:
                  $ref: '#/components/examples/ViewResponseExample'
    put:
      tags:
      - Views
      summary: Update View
      description: |
        #### Allowed For

        * Agents

        #### JSON Format

         The PUT request takes one property, a `view` object that lists the values to update. All properties are optional.

        **Note**: Updating a condition updates the containing array, clearing the other conditions. Include all your conditions when updating any condition.

        | Name        | Description
        | ----------- | -----------
        | title       | The title of the view
        | all         | An array of one or more conditions. A ticket must meet all the conditions to be included in the view. The PUT request replaces all existing conditions. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference)
        | any         | An array of one or more conditions. A ticket must meet any of them to be included in the view. At least one `all` condition must be defined with the `any` conditions. The PUT request replaces all existing `any` conditions. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference)
        | active      | Allowed values are true or false. Determines if the view is displayed or not
        | output      | An object that specifies the columns to display. Example: `"output": {"columns": ["status", "description," "priority"]}`. See [View columns](#view-columns)
        | restriction | An object that describes who can access the view. To give all agents access to the view, omit this property

        The `restriction` object has the following properties.

        | Name | Comment
        | ---- | -------
        | type | Allowed values are "Group" or "User"
        | id   | The numeric ID of a single group or user
        | ids  | The numeric IDs of a single or more groups. Recommended for "Group" `type`

        If `type` is "Group", the `ids` property is the preferred method of specifying the group id or ids.

        You can also update how items are sorted and grouped. See [View sorting](#view-sorting) in Create View.

        #### Example Request Body

        ```js
        {
          "view": {
            "title": "Code red tickets",
            "restriction": {
              "type": "Group",
              "ids": [10052, 10057, 10062, 10002]
            },
            "all": [
              {
                "field": "priority",
                "operator": "is",
                "value": "urgent"
              }
            ],
            "output": {
              "columns": ["status", "requester", "assignee", "updated"]
            }
          }
        }
        ```
      operationId: UpdateView
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewResponse'
              examples:
                default:
                  $ref: '#/components/examples/ViewUpdateResponseExample'
    delete:
      tags:
      - Views
      summary: Delete View
      description: |
        #### Allowed For
        * Agents
      operationId: DeleteView
      responses:
        "204":
          description: No Content response
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/ViewId'
  /api/v2/views/{view_id}/count:
    get:
      tags:
      - Views
      summary: Count Tickets in View
      description: |
        Returns the ticket count for a single view.

        This endpoint is rate limited to 5 requests per minute, per view, per agent.

        #### View Counts

        The view count endpoints, Count Tickets in View (this endpoint) and [Count Tickets in Views](#count-tickets-in-views), let you estimate how many tickets remain in a view without having to retrieve the entire view. They're designed to help estimate view size. From a business perspective, accuracy becomes less relevant as view size increases.

        To ensure quality of service, these counts are cached more heavily as the number of tickets in a view grows. For a view with thousands of tickets, you can expect the count to be cached for 60-90 minutes. As a result, the count may not reflect the actual number of tickets in your view.

        View counts are represented as JSON objects with the following attributes:

        | Name            | Type        | Comment
        | --------------- | ------------| -------
        | view_id         | integer     | The id of the view
        | url             | string      | The API url of the count
        | value           | integer     | The cached number of tickets in the view. Can also be null if the system is loading and caching new data. Not to be confused with 0 tickets
        | pretty          | string      | A pretty-printed text approximation of the view count
        | fresh           | boolean     | false if the cached data is stale and the system is still loading and caching new data
        | active          | boolean     | Only active views if true, inactive views if false, all views if null.

        #### Example
        ```js
        {
          "view_count": {
            "view_id": 25,
            "url":     "https://company.zendesk.com/api/v2/views/25/count.json",
            "value":   719,
            "pretty":  "~700",
            "fresh":   true
          }
        }
        ```
      operationId: GetViewCount
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCountResponse'
              examples:
                default:
                  $ref: '#/components/examples/ViewCountResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/ViewId'
  /api/v2/views/{view_id}/execute:
    get:
      tags:
      - Views
      summary: Execute View
      description: |
        Returns the column titles and the rows of the specified view.

        The `columns` array lists the view's column titles and includes only views parameters.

        The `rows` array lists the values of each column for each ticket and includes parameters from both views and tickets. Though not displayed in the view, a partial ticket object is included with each row object.

        **Note**: To get the full ticket objects for a specified view, use [List Tickets from a View](#list-tickets-from-a-view).

        This endpoint is rate limited to 5 requests per minute, per view, per agent.

        The view execution system is designed for periodic rather than high-frequency API usage. In particular, views called very frequently may be cached by Zendesk. This means that the API client will still receive a result, but that result may have been computed at any time within the last 10 minutes.

        Zendesk recommends using the Incremental Ticket Export endpoint to get the latest changes. You can call it more often, and it returns all the tickets that changed since the last poll. For details and rate limits, see [Incremental Exports](/api-reference/ticketing/ticket-management/incremental_exports/).

        View output sorting can be controlled by passing the `sort_by` and `sort_order` parameters in the format described in the table in [Preview Views](#preview-views).

        #### Allowed For

        * Agents

        #### Pagination

        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).
      operationId: ExecuteView
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: sort_by
        in: query
        description: The ticket field used for sorting. This will either be a title
          or a custom field id
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: sortBy
      - name: sort_order
        in: query
        description: The direction the tickets are sorted. May be one of 'asc' or
          'desc'
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: sortOrder
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewResponse'
              examples:
                default:
                  $ref: '#/components/examples/ViewExecuteResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/ViewId'
  /api/v2/views/{view_id}/export:
    get:
      tags:
      - Views
      summary: Export View
      description: |
        Returns the csv attachment of the specified view if possible. Enqueues a job to produce the csv if necessary.

        #### Allowed For

        * Agents
      operationId: ExportView
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewExportResponse'
              examples:
                default:
                  $ref: '#/components/examples/ViewExportResponseExample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/ViewId'
  /api/v2/views/{view_id}/tickets:
    get:
      tags:
      - Views
      summary: List Tickets From a View
      description: |
        #### Allowed For

        * Agents

        #### Pagination
        * Cursor pagination (recommended)
        * Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).
      operationId: ListTicketsFromView
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: sort_by
        in: query
        description: "Sort or group the tickets by a column in the [View columns](#view-columns)\
          \ table. The `subject` and `submitter` columns are not supported"
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: sortBy
      - name: sort_order
        in: query
        description: "One of \"asc\" or \"desc\". Defaults to \"asc\" for alphabetical\
          \ and position sort, \"desc\" for all others"
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: sortOrder
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketsResponse'
              examples:
                default:
                  $ref: '#/components/examples/ViewListTicketsResponseEXample'
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/ViewId'
  /api/v2/views/active:
    get:
      tags:
      - Views
      summary: List Active Views
      description: |
        Lists active shared and personal views available to the current user.

        #### Sideloads

        The following sideloads are supported:

        | Name             | Will sideload
        | ---------------- | -------------
        | app_installation | The app installation that requires each view, if present
        | permissions      | The permissions for each view

        #### Pagination

        - Offset pagination

        See [Pagination](/api-reference/introduction/pagination/).

        Returns a maximum of 100 records per page.

        #### Allowed For

        * Agents
      operationId: ListActiveViews
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: access
        in: query
        description: "Only views with given access. May be \"personal\", \"shared\"\
          , or \"account\""
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: group_id
        in: query
        description: Only views belonging to given group
        required: false
        style: form
        explode: true
        schema:
          type: integer
        x-ballerina-name: groupId
      - name: sort_by
        in: query
        description: "Possible values are \"alphabetical\", \"created_at\", or \"\
          updated_at\". Defaults to \"position\""
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: sortBy
      - name: sort_order
        in: query
        description: "One of \"asc\" or \"desc\". Defaults to \"asc\" for alphabetical\
          \ and position sort, \"desc\" for all others"
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: sortOrder
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewsResponse'
              examples:
                default:
                  $ref: '#/components/examples/ViewsActiveResponseExample'
  /api/v2/views/compact:
    get:
      tags:
      - Views
      summary: List Views - Compact
      description: |
        A compacted list of shared and personal views available to the current user. This endpoint never returns more than 32 records and does not respect the "per_page" option.

        #### Allowed For

        * Agents
      operationId: ListCompactViews
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewsResponse'
              examples:
                default:
                  $ref: '#/components/examples/ViewsResponseExample'
  /api/v2/views/count:
    get:
      tags:
      - Views
      summary: Count Views
      description: |-
        Returns an approximate count of shared and personal views available to the current user. If the count exceeds 100,000, the count will return a cached result.  This cached result will update every 24 hours.

        The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.

        **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
        This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.

        #### Allowed For
        * Agents
      operationId: CountViews
      responses:
        "200":
          description: Count of views
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewsCountResponse'
              examples:
                default:
                  $ref: '#/components/examples/ViewsCountResponseExample'
  /api/v2/views/count_many:
    get:
      tags:
      - Views
      summary: Count Tickets in Views
      description: |
        Returns the ticket count of each view in a list of views. Accepts up to 20 view ids per request. For the ticket count of a single view, see [Count Tickets in View](#count-tickets-in-view).

        Only returns values for personal and shared views accessible to the user performing the request.

        This endpoint is rate limited to 6 requests every 5 minutes.

        #### Allowed For

        * Agents
      operationId: GetViewCounts
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: ids
        in: query
        description: List of view's ids separated by commas
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: "1,2,3"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCountsResponse'
              examples:
                default:
                  $ref: '#/components/examples/ViewCountsResponseExample'
  /api/v2/views/destroy_many:
    delete:
      tags:
      - Views
      summary: Bulk Delete Views
      description: |
        Deletes the views corresponding to the provided list of IDs.

        #### Allowed For
        * Agents
      operationId: BulkDeleteViews
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: ids
        in: query
        description: The IDs of the views to delete
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: "1,2,3"
      responses:
        "204":
          description: No Content response
  /api/v2/views/preview:
    post:
      tags:
      - Views
      summary: Preview Views
      description: |
        You can preview views by constructing the conditions in the proper format and nesting them under the `view` property. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference/). The output can also be controlled by passing in any of the following parameters and nesting them under the `output` property.

        | Name            | Type    | Comment
        | --------------- | ------- | -------
        | columns         | Array   | The ticket fields to display. System fields are looked up by name, custom fields by title or id. See the [View columns](#view-columns) table
        | group_by        | String  | When present, the field by which the tickets are grouped
        | group_order     | String  | The direction the tickets are grouped. May be one of "asc" or "desc"
        | sort_order      | String  | The direction the tickets are sorted. May be one of "asc" or "desc"
        | sort_by         | String  | The ticket field used for sorting. This will either be a title or a custom field id.

        This endpoint is rate limited to 5 requests per minute, per view, per agent.

        #### Allowed For

        * Agents
      operationId: PreviewViews
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewResponse'
              examples:
                default:
                  $ref: '#/components/examples/ViewPreviewResponseExample'
  /api/v2/views/preview/count:
    post:
      tags:
      - Views
      summary: Preview Ticket Count
      description: |
        Returns the ticket count for a single preview.

        #### Allowed For

        * Agents
      operationId: PreviewCount
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCountResponse'
              examples:
                default:
                  $ref: '#/components/examples/ViewCountResponseExample'
  /api/v2/views/search:
    get:
      tags:
      - Views
      summary: Search Views
      description: |
        #### Pagination

        * Offset pagination only

        See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).

        #### Allowed For

        * Agents

        #### Sideloads

        The following sideloads are supported. For more information, see [Side-loading](/documentation/ticketing/using-the-zendesk-api/side_loading/).

        | Name             | Will sideload
        | ---------------- | -------------
        | app_installation | The app installation that requires each view, if present
        | permissions      | The permissions for each view
      operationId: SearchViews
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: query
        in: query
        description: Query string used to find all views with matching title
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: sales&group_id=25789188
      - name: access
        in: query
        description: "Filter views by access. May be \"personal\", \"shared\", or\
          \ \"account\""
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: active
        in: query
        description: Filter by active views if true or inactive views if false
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: group_id
        in: query
        description: Filter views by group
        required: false
        style: form
        explode: true
        schema:
          type: integer
        x-ballerina-name: groupId
      - name: sort_by
        in: query
        description: "Possible values are \"alphabetical\", \"created_at\", \"updated_at\"\
          , and \"position\". If unspecified, the views are sorted by relevance"
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: sortBy
      - name: sort_order
        in: query
        description: "One of \"asc\" or \"desc\". Defaults to \"asc\" for alphabetical\
          \ and position sort, \"desc\" for all others"
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-ballerina-name: sortOrder
      - name: include
        in: query
        description: "A sideload to include in the response. See [Sideloads](#sideloads-3)"
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: permissions
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewsResponse'
              examples:
                default:
                  $ref: '#/components/examples/ViewsResponseExample'
  /api/v2/views/show_many:
    get:
      tags:
      - Views
      summary: List Views By ID
      description: |
        #### Allowed For

        * Agents

        #### Sideloads

        The following sideloads are supported:

        | Name             | Will sideload
        | ---------------- | -------------
        | app_installation | The app installation that requires each view, if present
        | permissions      | The permissions for each view
      operationId: ListViewsById
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: ids
        in: query
        description: List of view's ids separated by commas
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: "1,2,3"
      - name: active
        in: query
        description: "Only active views if true, inactive views if false"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewsResponse'
              examples:
                default:
                  $ref: '#/components/examples/ViewsResponseExample'
  /api/v2/views/update_many:
    put:
      tags:
      - Views
      summary: Update Many Views
      description: |
        #### Allowed For

        * Agents

        #### Request Parameters

        The PUT request expects a `views` object that lists the views to update.

        Each view may have the following properties:

        | Name     | Mandatory | Description
        | -------- | --------- | -----------
        | id       | yes       | The ID of the view to update
        | position | no        | The new position of the view
        | active   | no        | The active status of the view (true or false)

        #### Example Request Body

        ```js
        {
          "views": [
            {"id": 25, "position": 3},
            {"id": 23, "position": 5},
            {"id": 27, "position": 9},
            {"id": 22, "position": 7}
          ]
        }
        ```
      operationId: UpdateManyViews
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewsResponse'
              examples:
                default:
                  $ref: '#/components/examples/ViewsUpdateManyResponseExample'
  /api/v2/workspaces:
    get:
      tags:
      - Workspaces
      summary: List Workspaces
      description: |
        #### Allowed For

        * Admins, Agents
      operationId: ListWorkspaces
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceResponse'
              examples:
                default:
                  value:
                    count: 1
                    next_page: null
                    previous_page: null
                    workspaces:
                    - activated: true
                      apps:
                      - expand: false
                        id: 360000080413
                        position: 1
                      conditions:
                        all:
                        - field: ticket_form_id
                          operator: is
                          value: "360000014173"
                        any: []
                      created_at: 2018-11-13T19:08:13Z
                      description: Test rules
                      id: 3133
                      macro_ids:
                      - 360005374974
                      position: 1
                      prefer_workspace_app_order: true
                      selected_macros:
                      - actions:
                        - field: status
                          value: solved
                        active: true
                        created_at: 2018-02-08T23:45:30Z
                        description: null
                        id: 360005374974
                        position: 9999
                        restriction:
                          id: 360002226093
                          ids:
                          - 360002226093
                          type: Group
                        title: Close and redirect to topics
                        updated_at: 2018-11-08T22:27:00Z
                        url: "https://{subdomain}.zendesk.com/api/v2/macros/360005374974.json"
                        usage_7d: 0
                      ticket_form_id: 360000014173
                      title: Test Workspace 1
                      updated_at: 2018-12-17T22:37:40Z
                      url: "https://{subdomain}.zendesk.com/api/v2/workspaces.json"
    post:
      tags:
      - Workspaces
      summary: Create Workspace
      description: |
        #### Allowed For

        * Admins
      operationId: CreateWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V2WorkspacesBody'
            examples:
              default:
                value:
                  workspace:
                    conditions:
                      all:
                      - field: ticket_form_id
                        operator: is
                        value: "360000014173"
                      any: []
                    description: Test rules
                    macros:
                    - 360005374974
                    ticket_form_id: 360000014173
                    title: Test Workspace 1
      responses:
        "201":
          description: Created workspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineResponse201'
              examples:
                default:
                  value:
                    workspace:
                      activated: true
                      apps: []
                      conditions:
                        all:
                        - field: ticket_form_id
                          operator: is
                          value: "360000014173"
                        any: []
                      created_at: 2018-11-13T19:08:13Z
                      description: Test rules
                      id: 3133
                      macro_ids:
                      - 360005374974
                      position: 1
                      prefer_workspace_app_order: true
                      selected_macros:
                      - actions:
                        - field: status
                          value: solved
                        active: true
                        created_at: 2018-02-08T23:45:30Z
                        description: null
                        id: 360005374974
                        position: 9999
                        restriction:
                          id: 360002226093
                          ids:
                          - 360002226093
                          type: Group
                        title: Close and redirect to topics
                        updated_at: 2018-11-08T22:27:00Z
                        url: "https://{subdomain}.zendesk.com/api/v2/macros/360005374974.json"
                        usage_7d: 0
                      ticket_form_id: 360000014173
                      title: Test Workspace 1
                      updated_at: 2018-12-17T22:37:40Z
                      url: "https://{subdomain}.zendesk.com/api/v2/workspaces.json"
  /api/v2/workspaces/{workspace_id}:
    get:
      tags:
      - Workspaces
      summary: Show Workspace
      description: |
        #### Allowed For
        * Admins
      operationId: ShowWorkspace
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineResponse2008'
              examples:
                default:
                  value:
                    workspace:
                      activated: true
                      apps: []
                      conditions:
                        all:
                        - field: ticket_form_id
                          operator: is
                          value: "360000014173"
                        any: []
                      created_at: 2018-11-13T19:08:13Z
                      description: Test rules
                      id: 3133
                      macro_ids:
                      - 360005374974
                      position: 1
                      prefer_workspace_app_order: true
                      selected_macros:
                      - actions:
                        - field: status
                          value: solved
                        active: true
                        created_at: 2018-02-08T23:45:30Z
                        description: null
                        id: 360005374974
                        position: 9999
                        restriction:
                          id: 360002226093
                          ids:
                          - 360002226093
                          type: Group
                        title: Close and redirect to topics
                        updated_at: 2018-11-08T22:27:00Z
                        url: "https://{subdomain}.zendesk.com/api/v2/macros/360005374974.json"
                        usage_7d: 0
                      ticket_form_id: 360000014173
                      title: Test Workspace 1
                      updated_at: 2018-12-17T22:37:40Z
                      url: "https://{subdomain}.zendesk.com/api/v2/workspaces.json"
    put:
      tags:
      - Workspaces
      summary: Update Workspace
      description: |-
        #### Allowed For
        * Admins
      operationId: UpdateWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspacesworkspaceIdBody'
            examples:
              default:
                value:
                  workspace:
                    conditions:
                      all:
                      - field: ticket_form_id
                        operator: is
                        value: "360000014173"
                      any: []
                    description: Test rules
                    macros:
                    - 360005374974
                    ticket_form_id: 360000014173
                    title: Test Workspace 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineResponse2009'
              examples:
                default:
                  value:
                    workspace:
                      activated: true
                      apps: []
                      conditions:
                        all:
                        - field: ticket_form_id
                          operator: is
                          value: "360000014173"
                        any: []
                      created_at: 2018-11-13T19:08:13Z
                      description: Test rules
                      id: 3133
                      macro_ids:
                      - 360005374974
                      position: 1
                      prefer_workspace_app_order: true
                      selected_macros:
                      - actions:
                        - field: status
                          value: solved
                        active: true
                        created_at: 2018-02-08T23:45:30Z
                        description: null
                        id: 360005374974
                        position: 9999
                        restriction:
                          id: 360002226093
                          ids:
                          - 360002226093
                          type: Group
                        title: Close and redirect to topics
                        updated_at: 2018-11-08T22:27:00Z
                        url: "https://{subdomain}.zendesk.com/api/v2/macros/360005374974.json"
                        usage_7d: 0
                      ticket_form_id: 360000014173
                      title: Test Workspace 1
                      updated_at: 2018-12-17T22:37:40Z
                      url: "https://{subdomain}.zendesk.com/api/v2/workspaces.json"
    delete:
      tags:
      - Workspaces
      summary: Delete Workspace
      description: |
        #### Allowed For
        * Admins
      operationId: DeleteWorkspace
      responses:
        "204":
          description: No Content
    parameters:
    - $ref: '#/components/parameters/AcceptHeader'
    - $ref: '#/components/parameters/WorkspaceId'
  /api/v2/workspaces/destroy_many:
    delete:
      tags:
      - Workspaces
      summary: Bulk Delete Workspaces
      description: |
        #### Allowed For
        * Admins
      operationId: DestroyManyWorkspaces
      parameters:
      - $ref: '#/components/parameters/AcceptHeader'
      - name: ids
        in: query
        description: The ids of the workspaces to delete
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
        example:
        - 1
        - 2
        - 3
      responses:
        "200":
          description: Succesful response
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
  /api/v2/workspaces/reorder:
    put:
      tags:
      - Workspaces
      summary: Reorder Workspaces
      description: |
        #### Allowed For
        * Admins
      operationId: ReorderWorkspaces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspacesReorderBody'
            examples:
              default:
                value:
                  ids:
                  - 12
                  - 32
                  - 48
                  - 60
      responses:
        "200":
          description: Succesful response
          content:
            application/json:
              schema:
                type: string
                description: Empty response
                example: ""
              example: ""
components:
  schemas:
    TicketMetricEventBreachObject:
      title: Ticket Metric Event
      type: object
      allOf:
      - $ref: '#/components/schemas/TicketMetricEventBaseObject'
      - $ref: '#/components/schemas/TicketMetricEventBreachObjectAllOf2'
    TicketRelatedInformation:
      type: object
      properties:
        twitter:
          type: object
          additionalProperties: true
          description: X (formerly Twitter) information associated with the ticket
        followup_source_ids:
          type: array
          items:
            type: string
            description: Sources to follow up
          x-ballerina-name: followupSourceIds
        incidents:
          type: integer
          description: A count of related incident occurrences
        topic_id:
          type: string
          description: Related topic in the Web portal (deprecated feature)
          nullable: true
          x-ballerina-name: topicId
        from_archive:
          type: boolean
          description: Is true if the current ticket is archived
          x-ballerina-name: fromArchive
    SLAPolicyFilterDefinitionResponseDefinitionsOperators1:
      type: object
      properties:
        title:
          type: string
        value:
          type: string
    AccountSettingsGoogleAppsObject:
      type: object
      properties:
        has_google_apps_admin:
          type: boolean
          x-ballerina-name: hasGoogleAppsAdmin
        has_google_apps:
          type: boolean
          x-ballerina-name: hasGoogleApps
      description: "Google Apps configuration. See [G Suite](#g-suite)"
    TargetCampfire:
      required:
      - room
      - subdomain
      - token
      type: object
      properties:
        subdomain:
          type: string
        preserve_format:
          type: boolean
          x-ballerina-name: preserveFormat
        ssl:
          type: boolean
        room:
          type: string
        token:
          type: string
    TriggerCategoryRuleCounts:
      type: object
      properties:
        inactive_count:
          type: integer
          format: int64
          x-ballerina-name: inactiveCount
        active_count:
          type: integer
          format: int64
          x-ballerina-name: activeCount
    UserIdentityObject:
      required:
      - type
      - user_id
      - value
      type: object
      properties:
        updated_at:
          type: string
          description: The time the identity was updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        deliverable_state:
          type: string
          description: "Email identity type only. Indicates if Zendesk sends notifications\
            \ to the email address. See [Deliverable state](#deliverable-state)"
          readOnly: true
          x-ballerina-name: deliverableState
        user_id:
          type: integer
          description: The id of the user
          readOnly: true
          x-ballerina-name: userId
        undeliverable_count:
          type: integer
          description: The number of times a soft-bounce response was received at
            that address
          readOnly: true
          x-ballerina-name: undeliverableCount
        verified:
          type: boolean
          description: If the identity has been verified
        created_at:
          type: string
          description: The time the identity was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        id:
          type: integer
          description: Automatically assigned on creation
          readOnly: true
        type:
          type: string
          description: The type of this identity
          readOnly: true
          enum:
          - email
          - twitter
          - facebook
          - google
          - phone_number
          - agent_forwarding
          - any_channel
          - foreign
          - sdk
        value:
          type: string
          description: "The identifier for this identity, such as an email address"
          readOnly: true
        url:
          type: string
          description: The API url of this identity
          readOnly: true
        primary:
          type: boolean
          description: "If the identity is the primary identity. *Writable only when\
            \ creating, not when updating. Use the [Make Identity Primary](#make-identity-primary)\
            \ endpoint instead"
      example:
        created_at: 2011-07-20T22:55:29Z
        deliverable_state: deliverable
        id: 35436
        primary: true
        type: email
        updated_at: 2011-07-20T22:55:29Z
        url: https://company.zendesk.com/api/v2/users/135/identities/35436.json
        user_id: 135
        value: someone@example.com
        verified: true
    TargetResponse:
      type: object
      properties:
        target:
          $ref: '#/components/schemas/TargetObject'
    MacroApplyTicketResponseResultTicketComment:
      type: object
      properties:
        public:
          type: boolean
        scoped_body:
          type: array
          items:
            type: array
            items:
              type: string
          x-ballerina-name: scopedBody
        body:
          type: string
    CustomRolesResponse:
      type: object
      properties:
        custom_roles:
          type: array
          items:
            $ref: '#/components/schemas/CustomRoleObject'
          x-ballerina-name: customRoles
    PaginationMeta:
      type: object
      properties:
        after_cursor:
          type: string
          x-ballerina-name: afterCursor
        before_cursor:
          type: string
          x-ballerina-name: beforeCursor
        has_more:
          type: boolean
          x-ballerina-name: hasMore
    CustomFieldObject:
      required:
      - key
      - title
      - type
      type: object
      properties:
        raw_title:
          type: string
          description: "The dynamic content placeholder, if present, or the `title`\
            \ value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/)"
          x-ballerina-name: rawTitle
        custom_field_options:
          type: array
          description: Required and presented for a custom field of type "dropdown".
            Each option is represented by an object with a `name` and `value` property
          items:
            $ref: '#/components/schemas/CustomFieldOptionObject'
          x-ballerina-name: customFieldOptions
        active:
          type: boolean
          description: "If true, this field is available for use"
        created_at:
          type: string
          description: The time of the last update of the ticket field
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        description:
          type: string
          description: User-defined description of this field's purpose
        title:
          type: string
          description: The title of the custom field
        type:
          type: string
          description: "The custom field type: \"checkbox\", \"date\", \"decimal\"\
            , \"dropdown\", \"integer\", [\"lookup\"](/api-reference/ticketing/lookup_relationships/lookup_relationships/),\
            \ \"regexp\", \"text\", or \"textarea\""
        raw_description:
          type: string
          description: "The dynamic content placeholder, if present, or the `description`\
            \ value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/)"
          x-ballerina-name: rawDescription
        url:
          type: string
          description: The URL for this resource
          readOnly: true
        system:
          type: boolean
          description: "If true, only active and position values of this field can\
            \ be changed"
          readOnly: true
        updated_at:
          type: string
          description: The time of the last update of the ticket field
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        relationship_target_type:
          type: string
          description: "A representation of what type of object the field references.\
            \ Options are \"zen:user\", \"zen:organization\", \"zen:ticket\", and\
            \ \"zen:custom_object:{key}\" where key is a custom object key. For example\
            \ \"zen:custom_object:apartment\""
          x-ballerina-name: relationshipTargetType
        regexp_for_validation:
          type: string
          description: Regular expression field only. The validation pattern for a
            field value to be deemed valid
          nullable: true
          x-ballerina-name: regexpForValidation
        relationship_filter:
          type: object
          description: A filter definition that allows your autocomplete to filter
            down results
          x-ballerina-name: relationshipFilter
        id:
          type: integer
          description: Automatically assigned upon creation
          readOnly: true
        position:
          type: integer
          description: Ordering of the field relative to other fields
        tag:
          type: string
          description: Optional for custom field of type "checkbox"; not presented
            otherwise
        key:
          type: string
          description: "A unique key that identifies this custom field. This is used\
            \ for updating the field and referencing in placeholders. The key must\
            \ consist of only letters, numbers, and underscores. It can't be only\
            \ numbers and can't be reused if deleted"
    RecoverSuspendedTicketResponse:
      type: object
      properties:
        ticket:
          type: array
          items:
            $ref: '#/components/schemas/SuspendedTicketObject'
    TicketCommentResponse:
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/TicketCommentObject'
    DeletedUserResponse:
      type: object
      properties:
        deleted_user:
          allOf:
          - $ref: '#/components/schemas/DeletedUserObject'
          x-ballerina-name: deletedUser
    TagCountResponse:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/TagCountObject'
    OrganizationsResponse:
      type: object
      properties:
        next_page:
          type: string
          nullable: true
          x-ballerina-name: nextPage
        count:
          type: integer
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationObject'
        previous_page:
          type: string
          nullable: true
          x-ballerina-name: previousPage
    TriggerCategoryResponse:
      type: object
      properties:
        trigger_category:
          allOf:
          - $ref: '#/components/schemas/TriggerCategory'
          x-ballerina-name: triggerCategory
    TicketObject:
      required:
      - requester_id
      type: object
      properties:
        from_messaging_channel:
          type: boolean
          description: "If true, the ticket's [via type](/documentation/ticketing/reference-guides/via-object-reference/)\
            \ is a messaging channel"
          readOnly: true
          x-ballerina-name: fromMessagingChannel
        metadata:
          type: object
          description: "Write only. Metadata for the audit. In the `audit` object,\
            \ the data is specified in the `custom` property of the `metadata` object.\
            \ See [Setting Metadata](/documentation/ticketing/managing-tickets/creating-and-updating-tickets/#setting-metadata)"
          writeOnly: true
        email_cc_ids:
          type: array
          description: "The ids of agents or end users currently CC'ed on the ticket.\
            \ See [CCs and followers resources](https://support.zendesk.com/hc/en-us/articles/360020585233)\
            \ in the Support Help Center"
          items:
            type: integer
          x-ballerina-name: emailCcIds
        subject:
          type: string
          description: |
            The value of the subject field for this ticket. See [Subject](/api-reference/ticketing/tickets/tickets/#subject)
        voice_comment:
          type: object
          description: "Write only. See [Creating voicemail ticket](/api-reference/voice/talk-partner-edition-api/reference/#creating-voicemail-tickets)"
          writeOnly: true
          x-ballerina-name: voiceComment
        macro_ids:
          type: array
          description: POST requests only. List of macro IDs to be recorded in the
            ticket audit
          items:
            type: integer
          x-ballerina-name: macroIds
        type:
          type: string
          description: The type of this ticket
          enum:
          - problem
          - incident
          - question
          - task
        updated_stamp:
          type: string
          description: Write only. Datetime of last update received from API. See
            the `safe_update` property
          writeOnly: true
          x-ballerina-name: updatedStamp
        via:
          $ref: '#/components/schemas/TicketObjectVia'
        email_ccs:
          type: object
          description: "Write only. An array of objects that represent agent or end\
            \ users email CCs to add or delete from the ticket. See [Setting email\
            \ CCs](/documentation/ticketing/managing-tickets/creating-and-updating-tickets/#setting-email-ccs)"
          writeOnly: true
          x-ballerina-name: emailCcs
        collaborators:
          type: array
          description: "POST requests only. Users to add as cc's when creating a ticket.\
            \ See [Setting Collaborators](/documentation/ticketing/managing-tickets/creating-and-updating-tickets#setting-collaborators)"
          items:
            $ref: '#/components/schemas/CollaboratorObject'
        due_at:
          type: string
          description: "If this is a ticket of type \"task\" it has a due date.  Due\
            \ date format uses [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format"
          format: date-time
          nullable: true
          x-ballerina-name: dueAt
        id:
          type: integer
          description: Automatically assigned when the ticket is created
          readOnly: true
        raw_subject:
          type: string
          description: |
            The dynamic content placeholder, if present, or the "subject" value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/)
          x-ballerina-name: rawSubject
        requester:
          type: object
          description: "Write only. See [Creating a ticket with a new requester](/documentation/ticketing/managing-tickets/creating-and-updating-tickets/#creating-a-ticket-with-a-new-requester)"
          writeOnly: true
        safe_update:
          type: boolean
          description: "Write only. Optional boolean. When true and an `update_stamp`\
            \ date is included, protects against ticket update collisions and returns\
            \ a message to let you know if one occurs. See [Protecting against ticket\
            \ update collisions](/documentation/ticketing/managing-tickets/creating-and-updating-tickets/#protecting-against-ticket-update-collisions).\
            \ A value of false has the same effect as true. Omit the property to force\
            \ the updates to not be safe"
          writeOnly: true
          x-ballerina-name: safeUpdate
        custom_fields:
          type: array
          description: "Custom fields for the ticket. See [Setting custom field values](/documentation/ticketing/managing-tickets/creating-and-updating-tickets#setting-custom-field-values)"
          items:
            $ref: '#/components/schemas/TicketObjectCustomFields'
          x-ballerina-name: customFields
        allow_channelback:
          type: boolean
          description: "Is false if channelback is disabled, true otherwise. Only\
            \ applicable for channels framework ticket"
          readOnly: true
          x-ballerina-name: allowChannelback
        satisfaction_rating:
          type: object
          additionalProperties: true
          description: "The satisfaction rating of the ticket, if it exists, or the\
            \ state of satisfaction, \"offered\" or \"unoffered\". The value is null\
            \ for plan types that don't support CSAT"
          readOnly: true
          x-ballerina-name: satisfactionRating
        priority:
          type: string
          description: The urgency with which the ticket should be addressed
          enum:
          - urgent
          - high
          - normal
          - low
        brand_id:
          type: integer
          description: "The id of the brand this ticket is associated with. See [Setting\
            \ up multiple brands](https://support.zendesk.com/hc/en-us/articles/4408829476378)"
          x-ballerina-name: brandId
        tags:
          type: array
          description: The array of tags applied to this ticket
          items:
            type: string
        followers:
          type: object
          description: "Write only. An array of objects that represent agent followers\
            \ to add or delete from the ticket. See [Setting followers](/documentation/ticketing/managing-tickets/creating-and-updating-tickets/#setting-followers)"
          writeOnly: true
        sharing_agreement_ids:
          type: array
          description: The ids of the sharing agreements used for this ticket
          readOnly: true
          items:
            type: integer
          x-ballerina-name: sharingAgreementIds
        organization_id:
          type: integer
          description: "The organization of the requester. You can only specify the\
            \ ID of an organization associated with the requester. See [Organization\
            \ Memberships](/api-reference/ticketing/organizations/organization_memberships/)"
          x-ballerina-name: organizationId
        via_followup_source_id:
          type: integer
          description: "POST requests only. The id of a closed ticket when creating\
            \ a follow-up ticket. See [Creating a follow-up ticket](/documentation/ticketing/managing-tickets/creating-and-updating-tickets#creating-a-follow-up-ticket)"
          x-ballerina-name: viaFollowupSourceId
        has_incidents:
          type: boolean
          description: "Is true if a ticket is a problem type and has one or more\
            \ incidents linked to it. Otherwise, the value is false"
          readOnly: true
          x-ballerina-name: hasIncidents
        attribute_value_ids:
          type: array
          description: Write only. An array of the IDs of attribute values to be associated
            with the ticket
          writeOnly: true
          items:
            type: integer
          x-ballerina-name: attributeValueIds
        via_id:
          type: integer
          description: "Write only. For more information, see the [Via object reference](/documentation/ticketing/reference-guides/via-object-reference/)"
          writeOnly: true
          x-ballerina-name: viaId
        requester_id:
          type: integer
          description: The user who requested this ticket
          x-ballerina-name: requesterId
        status:
          type: string
          description: |
            The state of the ticket.

            If your account has activated custom ticket statuses, this is the ticket's
            status category. See [custom ticket statuses](#custom-ticket-statuses)
          enum:
          - new
          - open
          - pending
          - hold
          - solved
          - closed
        created_at:
          type: string
          description: When this record was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        custom_status_id:
          type: integer
          description: "The custom ticket status id of the ticket. See [custom ticket\
            \ statuses](#custom-ticket-statuses)"
          x-ballerina-name: customStatusId
        description:
          type: string
          description: |
            Read-only first comment on the ticket. When [creating a ticket](#create-ticket), use `comment` to set the description. See [Description and first comment](#description-and-first-comment)
          readOnly: true
        external_id:
          type: string
          description: An id you can use to link Zendesk Support tickets to local
            records
          x-ballerina-name: externalId
        allow_attachments:
          type: boolean
          description: Permission for agents to add add attachments to a comment.
            Defaults to true
          readOnly: true
          x-ballerina-name: allowAttachments
        assignee_email:
          type: string
          description: Write only. The email address of the agent to assign the ticket
            to
          writeOnly: true
          x-ballerina-name: assigneeEmail
        updated_at:
          type: string
          description: "When this record last got updated. It is updated only if the\
            \ update generates a [ticket event](#incremental-ticket-event-export)"
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        problem_id:
          type: integer
          description: "For tickets of type \"incident\", the ID of the problem the\
            \ incident is linked to"
          x-ballerina-name: problemId
        follower_ids:
          type: array
          description: "The ids of agents currently following the ticket. See [CCs\
            \ and followers resources](https://support.zendesk.com/hc/en-us/articles/360020585233)"
          items:
            type: integer
          x-ballerina-name: followerIds
        assignee_id:
          type: integer
          description: The agent currently assigned to the ticket
          x-ballerina-name: assigneeId
        forum_topic_id:
          type: integer
          description: "The topic in the Zendesk Web portal this ticket originated\
            \ from, if any. The Web portal is deprecated"
          readOnly: true
          x-ballerina-name: forumTopicId
        macro_id:
          type: integer
          description: Write only. A macro ID to be recorded in the ticket audit
          writeOnly: true
          x-ballerina-name: macroId
        submitter_id:
          type: integer
          description: The user who submitted the ticket. The submitter always becomes
            the author of the first comment on the ticket
          x-ballerina-name: submitterId
        collaborator_ids:
          type: array
          description: The ids of users currently CC'ed on the ticket
          items:
            type: integer
          x-ballerina-name: collaboratorIds
        url:
          type: string
          description: The API url of this ticket
          readOnly: true
        ticket_form_id:
          type: integer
          description: Enterprise only. The id of the ticket form to render for the
            ticket
          x-ballerina-name: ticketFormId
        group_id:
          type: integer
          description: The group this ticket is assigned to
          x-ballerina-name: groupId
        followup_ids:
          type: array
          description: The ids of the followups created from this ticket. Ids are
            only visible once the ticket is closed
          readOnly: true
          items:
            type: integer
          x-ballerina-name: followupIds
        is_public:
          type: boolean
          description: "Is true if any comments are public, false otherwise"
          readOnly: true
          x-ballerina-name: isPublic
        recipient:
          type: string
          description: The original recipient e-mail address of the ticket. Notification
            emails for the ticket are sent from this address
        comment:
          type: object
          description: "Write only. An object that adds a comment to the ticket. See\
            \ [Ticket comments](/api-reference/ticketing/tickets/ticket_comments/).\
            \ To include an attachment with the comment, see [Attaching files](/documentation/ticketing/managing-tickets/creating-and-updating-tickets/#attaching-files)"
          writeOnly: true
      example:
        assignee_id: 235323
        collaborator_ids:
        - 35334
        - 234
        created_at: 2009-07-20T22:55:29Z
        custom_fields:
        - id: 27642
          value: "745"
        - id: 27648
          value: "yes"
        custom_status_id: 123
        description: The fire is very colorful.
        due_at: null
        external_id: ahg35h3jh
        follower_ids:
        - 35334
        - 234
        from_messaging_channel: false
        group_id: 98738
        has_incidents: false
        id: 35436
        organization_id: 509974
        priority: high
        problem_id: 9873764
        raw_subject: "{{dc.printer_on_fire}}"
        recipient: support@company.com
        requester_id: 20978392
        satisfaction_rating:
          comment: Great support!
          id: 1234
          score: good
        sharing_agreement_ids:
        - 84432
        status: open
        subject: "Help, my printer is on fire!"
        submitter_id: 76872
        tags:
        - enterprise
        - other_tag
        type: incident
        updated_at: 2011-05-05T10:38:52Z
        url: https://company.zendesk.com/api/v2/tickets/35436.json
        via:
          channel: web
    MacrosmacroIdBody:
      type: object
      properties:
        macro:
          $ref: '#/components/schemas/MacroInput'
    BatchErrorItemAllOf2:
      type: object
      properties:
        trigger_id:
          type: string
          x-ballerina-name: triggerId
    AttachmentUploadResponseUpload:
      type: object
      properties:
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentObject'
        attachment:
          $ref: '#/components/schemas/AttachmentObject'
        token:
          type: string
          description: Token for subsequent request
          readOnly: true
    TicketCommentsCountResponseCount:
      type: object
      properties:
        refreshed_at:
          type: string
          format: date-time
          x-ballerina-name: refreshedAt
        value:
          type: integer
    TrialAccountResponse:
      type: object
      properties:
        account:
          $ref: '#/components/schemas/TrialAccountObject'
    TicketFieldsResponse:
      type: object
      properties:
        ticket_fields:
          type: array
          items:
            $ref: '#/components/schemas/TicketFieldObject'
          x-ballerina-name: ticketFields
    TicketAuditsResponseNoneCursor:
      type: object
      properties:
        next_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: nextPage
        count:
          type: integer
          readOnly: true
        previous_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: previousPage
        audits:
          type: array
          items:
            $ref: '#/components/schemas/TicketAuditObject'
    CursorBasedExportIncrementalUsersResponse:
      type: object
      properties:
        before_url:
          type: string
          nullable: true
          x-ballerina-name: beforeUrl
        end_of_stream:
          type: boolean
          x-ballerina-name: endOfStream
        after_cursor:
          type: string
          nullable: true
          x-ballerina-name: afterCursor
        after_url:
          type: string
          nullable: true
          x-ballerina-name: afterUrl
        before_cursor:
          type: string
          nullable: true
          x-ballerina-name: beforeCursor
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserObject'
      example:
        after_cursor: MTU3NjYxMzUzOS4wfHw0Njd8
        after_url: https://example.zendesk.com/api/v2/incremental/users/cursor.json?cursor=MTU3NjYxMzUzOS4wfHw0Njd8
        before_cursor: null
        before_url: null
        end_of_stream: true
        users:
        - active: true
          alias: Mr. Johnny
          created_at: 2009-07-20T22:55:29Z
          custom_role_id: 9373643
          details: ""
          email: johnny@example.com
          external_id: sai989sur98w9
          id: 35436
          last_login_at: 2011-05-05T10:38:52Z
          locale: en-US
          locale_id: 1
          moderator: true
          name: Johnny Agent
          notes: Johnny is a nice guy!
          only_private_comments: false
          organization_id: 57542
          phone: "+15551234567"
          photo:
            content_type: image/png
            content_url: https://company.zendesk.com/photos/my_funny_profile_pic.png
            id: 928374
            name: my_funny_profile_pic.png
            size: 166144
            thumbnails:
            - content_type: image/png
              content_url: https://company.zendesk.com/photos/my_funny_profile_pic_thumb.png
              id: 928375
              name: my_funny_profile_pic_thumb.png
              size: 58298
          restricted_agent: true
          role: agent
          role_type: 0
          shared: false
          shared_agent: false
          signature: "Have a nice day, Johnny"
          suspended: true
          tags:
          - enterprise
          - other_tag
          ticket_restriction: assigned
          time_zone: Copenhagen
          updated_at: 2011-05-05T10:38:52Z
          url: https://company.zendesk.com/api/v2/users/35436.json
          user_fields:
            user_date: 2012-07-23T00:00:00Z
            user_decimal: 5.1
            user_dropdown: option_1
          verified: true
    RequestsResponse:
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: '#/components/schemas/RequestObject'
    ReverseLookupResponse:
      type: object
      anyOf:
      - $ref: '#/components/schemas/UsersResponse'
    WorkspaceResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/WorkspaceResponseAllOf1'
      - $ref: '#/components/schemas/OffsetPaginationObject'
    InlineResponse2009:
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/WorkspaceObject'
    InlineResponse2008:
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/WorkspaceObject'
    AssigneeFieldAssignableAgentObject:
      title: AssigneeFieldAssignableAgents
      type: object
      properties:
        avatar_url:
          type: string
          description: URL of Agent's avatar
          nullable: true
          x-ballerina-name: avatarUrl
        name:
          type: string
          description: Name of the agent
        id:
          type: integer
          description: Agent Support ID
      example:
        avatar_url: https://z3n-example.zendesk.com/system/photos/900005192023/my_profile.png
        id: 6473829100
        name: Joe Smith
    InlineResponse2001Count:
      properties:
        refreshed_at:
          type: string
          description: The time the last count was performed
          format: date-time
          readOnly: true
        value:
          type: integer
          description: Number of records at the time of the latest count operation
          readOnly: true
    CustomFieldOptionsResponse:
      type: object
      properties:
        next_page:
          type: string
          description: URL of the next page
          nullable: true
          readOnly: true
          x-ballerina-name: nextPage
        custom_field_options:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldOptionObject'
          x-ballerina-name: customFieldOptions
        count:
          type: integer
          description: Total count of records retrieved
          readOnly: true
        previous_page:
          type: string
          description: URL of the previous page
          nullable: true
          readOnly: true
          x-ballerina-name: previousPage
    TicketMetricEventGroupSLAObject:
      title: Ticket Metric Event
      type: object
      allOf:
      - $ref: '#/components/schemas/TicketMetricEventBaseObject'
      - $ref: '#/components/schemas/TicketMetricEventGroupSLAObjectAllOf2'
    MacroAttachmentsResponse:
      type: object
      properties:
        macro_attachments:
          type: array
          items:
            $ref: '#/components/schemas/MacroAttachmentObject'
          x-ballerina-name: macroAttachments
    SkillBasedRoutingAttributesResponse:
      type: object
      properties:
        next_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: nextPage
        count:
          type: integer
          readOnly: true
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/SkillBasedRoutingAttributeObject'
        previous_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: previousPage
    TargetFailureResponse:
      type: object
      properties:
        target_failure:
          allOf:
          - $ref: '#/components/schemas/TargetFailureObject'
          x-ballerina-name: targetFailure
    ListTicketProblemsResponse:
      type: object
      additionalProperties: true
    TriggerCategoriesResponse:
      type: object
      properties:
        trigger_categories:
          type: array
          items:
            $ref: '#/components/schemas/TriggerCategoriesResponseTriggerCategories'
          x-ballerina-name: triggerCategories
    TicketCommentObject:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties: true
          description: "System information (web client, IP address, etc.) and comment\
            \ flags, if any. See [Comment flags](#comment-flags)"
          readOnly: true
        attachments:
          type: array
          description: "Attachments, if any. See [Attachment](/api-reference/ticketing/tickets/ticket-attachments/)"
          readOnly: true
          items:
            $ref: '#/components/schemas/AttachmentObject'
        html_body:
          type: string
          description: "The comment formatted as HTML. See [Bodies](#bodies)"
          x-ballerina-name: htmlBody
        created_at:
          type: string
          description: The time the comment was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        plain_body:
          type: string
          description: "The comment presented as plain text. See [Bodies](#bodies)"
          readOnly: true
          x-ballerina-name: plainBody
        body:
          type: string
          description: "The comment string. See [Bodies](#bodies)"
        type:
          type: string
          description: "`Comment` or `VoiceComment`. The JSON object for adding voice\
            \ comments to tickets is different. See [Adding voice comments to tickets](/documentation/ticketing/managing-tickets/adding-voice-comments-to-tickets)"
          readOnly: true
        uploads:
          type: array
          description: "List of tokens received from [uploading files](/api-reference/ticketing/tickets/ticket-attachments/#upload-files)\
            \ for comment attachments. The files are attached by creating or updating\
            \ tickets with the tokens. See [Attaching files](/api-reference/ticketing/tickets/tickets/#attaching-files)\
            \ in Tickets"
          items:
            type: string
        via:
          $ref: '#/components/schemas/TicketAuditViaObject'
        audit_id:
          type: integer
          description: "The id of the ticket audit record. See [Show Audit](/api-reference/ticketing/tickets/ticket_audits/#show-audit)"
          readOnly: true
          x-ballerina-name: auditId
        public:
          type: boolean
          description: true if a public comment; false if an internal note. The initial
            value set on ticket creation persists for any additional comment unless
            you change it
        id:
          type: integer
          description: Automatically assigned when the comment is created
          readOnly: true
        author_id:
          type: integer
          description: "The id of the comment author. See [Author id](#author-id)"
          x-ballerina-name: authorId
      example:
        attachments:
        - content_type: text/plain
          content_url: https://company.zendesk.com/attachments/crash.log
          file_name: crash.log
          id: 498483
          size: 2532
          thumbnails: []
        author_id: 123123
        body: Thanks for your help!
        created_at: 2009-07-20T22:55:29Z
        id: 1274
        metadata:
          system:
            client: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36\
              \ (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36"
            ip_address: 1.1.1.1
            latitude: -37.000000000001
            location: "Melbourne, 07, Australia"
            longitude: 144.0000000000002
          via:
            channel: web
            source:
              from: {}
              rel: web_widget
              to: {}
        public: true
        type: Comment
    TicketImportInput:
      type: object
      properties:
        comments:
          type: array
          additionalProperties: true
          description: "The conversation between requesters, collaborators, and agents"
          items:
            $ref: '#/components/schemas/TicketImportInputComments'
        subject:
          type: string
          description: The value of the subject field for this ticket
        description:
          type: string
          description: "Read-only first comment on the ticket. When [creating a ticket](#create-ticket),\
            \ use `comment` to set the description. See [Description and first comment](#description-and-first-comment)"
        assignee_id:
          type: integer
          description: The agent currently assigned to the ticket
          x-ballerina-name: assigneeId
        requester_id:
          type: integer
          description: The user who requested this ticket
          x-ballerina-name: requesterId
        tags:
          type: array
          description: The array of tags applied to this ticket
          items:
            type: string
    TwitterChannelTwicketStatusResponse:
      type: object
      properties:
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/TwitterChannelTwicketStatusResponseStatuses'
    AccountSettingsActiveFeaturesObject:
      type: object
      properties:
        business_hours:
          type: boolean
          x-ballerina-name: businessHours
        voice:
          type: boolean
        fallback_composer:
          type: boolean
          x-ballerina-name: fallbackComposer
        bcc_archiving:
          type: boolean
          x-ballerina-name: bccArchiving
        ticket_tagging:
          type: boolean
          x-ballerina-name: ticketTagging
        benchmark_opt_out:
          type: boolean
          x-ballerina-name: benchmarkOptOut
        allow_email_template_customization:
          type: boolean
          x-ballerina-name: allowEmailTemplateCustomization
        csat_reason_code:
          type: boolean
          x-ballerina-name: csatReasonCode
        twitter:
          type: boolean
        satisfaction_prediction:
          type: boolean
          x-ballerina-name: satisfactionPrediction
        customer_satisfaction:
          type: boolean
          x-ballerina-name: customerSatisfaction
        dynamic_contents:
          type: boolean
          x-ballerina-name: dynamicContents
        advanced_analytics:
          type: boolean
          x-ballerina-name: advancedAnalytics
        explore_on_support_pro_plan:
          type: boolean
          x-ballerina-name: exploreOnSupportProPlan
        customer_context_as_default:
          type: boolean
          x-ballerina-name: customerContextAsDefault
        markdown:
          type: boolean
        ticket_forms:
          type: boolean
          x-ballerina-name: ticketForms
        agent_forwarding:
          type: boolean
          x-ballerina-name: agentForwarding
        user_org_fields:
          type: boolean
          x-ballerina-name: userOrgFields
        automatic_answers:
          type: boolean
          x-ballerina-name: automaticAnswers
        good_data_and_explore:
          type: boolean
          x-ballerina-name: goodDataAndExplore
        chat_about_my_ticket:
          type: boolean
          x-ballerina-name: chatAboutMyTicket
        topic_suggestion:
          type: boolean
          x-ballerina-name: topicSuggestion
        explore:
          type: boolean
        on_hold_status:
          type: boolean
          x-ballerina-name: onHoldStatus
        insights:
          type: boolean
        light_agents:
          type: boolean
          x-ballerina-name: lightAgents
        user_tagging:
          type: boolean
          x-ballerina-name: userTagging
        facebook:
          type: boolean
        sandbox:
          type: boolean
        suspended_ticket_notification:
          type: boolean
          x-ballerina-name: suspendedTicketNotification
        facebook_login:
          type: boolean
          x-ballerina-name: facebookLogin
        rich_content_in_emails:
          type: boolean
          x-ballerina-name: richContentInEmails
        allow_ccs:
          type: boolean
          x-ballerina-name: allowCcs
        explore_on_support_ent_plan:
          type: boolean
          x-ballerina-name: exploreOnSupportEntPlan
        is_abusive:
          type: boolean
          x-ballerina-name: isAbusive
        organization_access_enabled:
          type: boolean
          x-ballerina-name: organizationAccessEnabled
        twitter_login:
          type: boolean
          x-ballerina-name: twitterLogin
        chat:
          type: boolean
        custom_dkim_domain:
          type: boolean
          x-ballerina-name: customDkimDomain
        google_login:
          type: boolean
          x-ballerina-name: googleLogin
        forum_analytics:
          type: boolean
          x-ballerina-name: forumAnalytics
      description: "The active features for an account. See [Active Features](#active-features)"
    BookmarkInput:
      type: object
      properties:
        ticket_id:
          type: integer
          description: The id of the ticket the bookmark is for
          x-ballerina-name: ticketId
    BookmarkResponse:
      type: object
      properties:
        bookmark:
          $ref: '#/components/schemas/BookmarkObject'
    CountOrganizationObject:
      type: object
      properties:
        refreshed_at:
          type: string
          readOnly: true
          x-ballerina-name: refreshedAt
        value:
          type: integer
          readOnly: true
    IncrementalSkillBasedRoutingInstanceValue:
      type: object
      properties:
        instance_id:
          type: string
          description: Id of the associated agent or ticket
          readOnly: true
          x-ballerina-name: instanceId
        id:
          type: string
          description: Automatically assigned when an instance value is created
          readOnly: true
        time:
          type: string
          description: The time the instance value was created or deleted
          format: date-time
          readOnly: true
        attribute_value_id:
          type: string
          description: Id of the associated attribute value
          readOnly: true
          x-ballerina-name: attributeValueId
        type:
          type: string
          description: "One of \"associate_agent\", \"unassociate_agent\", \"associate_ticket\"\
            , or \"unassociate_ticket\""
          readOnly: true
    ChannelFrameworkPushResultsResponse:
      type: object
      properties:
        results:
          type: array
          description: "An array of [result objects](#result-object)"
          items:
            $ref: '#/components/schemas/ChannelFrameworkResultObject'
    AutomationObject:
      type: object
      properties:
        raw_title:
          type: string
          description: The raw title of the automation
          readOnly: true
          x-ballerina-name: rawTitle
        default:
          type: boolean
          description: "If true, the automation is a default automation"
          readOnly: true
        updated_at:
          type: string
          description: The time of the last update of the automation
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        active:
          type: boolean
          description: Whether the automation is active
        created_at:
          type: string
          description: The time the automation was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        id:
          type: integer
          description: Automatically assigned when created
          readOnly: true
        position:
          type: integer
          description: The position of the automation which specifies the order it
            will be executed
        conditions:
          $ref: '#/components/schemas/ConditionsObject'
        title:
          type: string
          description: The title of the automation
        actions:
          type: array
          description: "An object describing what the automation will do. See [Actions\
            \ reference](/documentation/ticketing/reference-guides/actions-reference)"
          items:
            $ref: '#/components/schemas/ActionObject'
      example:
        actions:
        - field: priority
          value: high
        active: true
        conditions:
          all:
          - field: status
            operator: is
            value: open
          - field: priority
            operator: less_than
            value: high
          any: []
        default: false
        id: 9873843
        position: 8
        raw_title: Roger Wilco
        title: Roger Wilco
    TriggerCategoriesResponseTriggerCategories:
      type: object
      allOf:
      - $ref: '#/components/schemas/TriggerCategory'
      anyOf:
      - $ref: '#/components/schemas/TriggerCategoryRuleCounts'
    SatisfactionRatingsCountResponseCount:
      type: object
      properties:
        refreshed_at:
          type: string
          format: date-time
          x-ballerina-name: refreshedAt
        value:
          type: integer
    InlineResponse2001:
      type: object
      properties:
        count:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/InlineResponse2001Count'
    TicketObjectCustomFields:
      type: object
      properties:
        id:
          type: integer
          description: The id of the custom field
        value:
          type: string
          description: The value of the custom field
    SearchExportResponse:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/SearchExportResponseMeta'
        links:
          $ref: '#/components/schemas/SearchExportResponseLinks'
        results:
          type: array
          description: "May consist of tickets, users, groups, or organizations, as\
            \ specified by the `result_type` property in each result object"
          readOnly: true
          items:
            $ref: '#/components/schemas/SearchResultObject'
        facets:
          type: string
          description: The facets corresponding to the search query
          nullable: true
          readOnly: true
      example:
        facets: null
        links:
          next: https://example.zendesk.com/api/v2/search/export.json?filter%5Btype%5D=ticket&page%5Bafter%5D=eyJmaWVsZCI6ImNyZWF0ZWRfYXQiLCJkZXNjIjp0cnVlLCJ0aWVCcmVha0ZpZWxkIjoiaWQiLCJ0aWVCcmVha0Rlc2MiOmZhbHNlLCJzb3J0VmFsdWVzIjpudWxsLCJleHBvcnRlZFRodXNGYXIiOjAsInNlc3Npb25TdGFydCI6MTYwNzAzOTI1Mzk4NSwiY3JlYXRlZEF0IjoxNjA3MDM5MjUzOTg1LCJzYWx0ZWRSZXF1ZXN0SGFzaCI6LTQ5ODM0ODc3LCJzYWx0ZWRDdXJzb3JIYXNoIjotMjQwMzQ4MjgwfQ%3D%3D&page%5Bsize%5D=100&query=hello%26page%5Bsize%5D%3D100%26filter%5Btype%5D%3Dticket
          prev: null
        meta:
          after_cursor: eyJmaWVsZCI6ImNyZWF0ZWRfYXQiLCJkZXNjIjp0cnVlLCJ0aWVCcmVha0ZpZWxkIjoiaWQiLCJ0aWVCcmVha0Rlc2MiOmZhbHNlLCJzb3J0VmFsdWVzIjpudWxsLCJleHBvcnRlZFRodXNGYXIiOjAsInNlc3Npb25TdGFydCI6MTYwNzAzOTI1Mzk4NSwiY3JlYXRlZEF0IjoxNjA3MDM5MjUzOTg1LCJzYWx0ZWRSZXF1ZXN0SGFzaCI6LTQ5ODM0ODc3LCJzYWx0ZWRDdXJzb3JIYXNoIjotMjQwMzQ4MjgwfQ==
          before_cursor: null
          has_more: true
        results: []
    InlineResponse2003:
      type: object
      properties:
        macro:
          $ref: '#/components/schemas/MacroObject'
    ComplianceDeletionStatusObject:
      required:
      - account_subdomain
      - action
      - application
      - created_at
      - executer_id
      - user_id
      type: object
      properties:
        account_subdomain:
          type: string
          x-ballerina-name: accountSubdomain
        application:
          type: string
        user_id:
          type: integer
          x-ballerina-name: userId
        executer_id:
          type: integer
          nullable: true
          x-ballerina-name: executerId
        action:
          type: string
        created_at:
          type: string
          x-ballerina-name: createdAt
    UserRelatedResponse:
      type: object
      properties:
        user_related:
          allOf:
          - $ref: '#/components/schemas/UserRelatedObject'
          x-ballerina-name: userRelated
    InlineResponse2002:
      type: object
      properties:
        macro:
          $ref: '#/components/schemas/MacroObject'
    InlineResponse2005:
      type: object
      properties:
        definitions:
          $ref: '#/components/schemas/InlineResponse2005Definitions'
    InlineResponse2004:
      type: object
      properties:
        actions:
          type: array
          items:
            type: object
            additionalProperties: true
    TriggerConditionObject:
      type: object
      properties:
        field:
          type: string
        value:
          oneOf:
          - type: string
          - type: integer
          - type: array
            items:
              oneOf:
              - type: string
              - type: integer
        operator:
          type: string
      example:
        field: status
        operator: less_than
        value: solved
    InlineResponse2007:
      allOf:
      - $ref: '#/components/schemas/TriggerCategoriesResponse'
      - $ref: '#/components/schemas/Pagination'
    AccountSettingsVoiceObject:
      type: object
      properties:
        agent_wrap_up_after_calls:
          type: boolean
          x-ballerina-name: agentWrapUpAfterCalls
        outbound_enabled:
          type: boolean
          x-ballerina-name: outboundEnabled
        only_during_business_hours:
          type: boolean
          x-ballerina-name: onlyDuringBusinessHours
        maximum_queue_wait_time:
          type: integer
          x-ballerina-name: maximumQueueWaitTime
        logging:
          type: boolean
        maximum_queue_size:
          type: integer
          x-ballerina-name: maximumQueueSize
        recordings_public:
          type: boolean
          x-ballerina-name: recordingsPublic
        uk_mobile_forwarding:
          type: boolean
          x-ballerina-name: ukMobileForwarding
        agent_confirmation_when_forwarding:
          type: boolean
          x-ballerina-name: agentConfirmationWhenForwarding
        enabled:
          type: boolean
      description: "Zendesk Talk settings. See [Voice](#voice)"
    SupportAddressObject:
      required:
      - email
      type: object
      properties:
        cname_status:
          type: string
          description: "Whether all of the required CNAME records are set. Possible\
            \ values: \"unknown\", \"verified\", \"failed\""
          readOnly: true
          enum:
          - unknown
          - verified
          - failed
          x-ballerina-name: cnameStatus
        forwarding_status:
          type: string
          description: "Status of email forwarding. Possible values: \"unknown\",\
            \ \"waiting\", \"verified\", or \"failed\""
          readOnly: true
          enum:
          - unknown
          - waiting
          - verified
          - failed
          x-ballerina-name: forwardingStatus
        created_at:
          type: string
          description: When the address was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        spf_status:
          type: string
          description: "Whether the SPF record is set up correctly. Possible values:\
            \ \"unknown\", \"verified\", \"failed\""
          readOnly: true
          enum:
          - unknown
          - verified
          - failed
          x-ballerina-name: spfStatus
        brand_id:
          type: integer
          description: "The ID of the [brand](/api-reference/ticketing/account-configuration/brands/)"
          x-ballerina-name: brandId
        default:
          type: boolean
          description: Whether the address is the account's default support address
        updated_at:
          type: string
          description: When the address was updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        name:
          type: string
          description: The name for the address
        id:
          type: integer
          description: Automatically assigned when created
          readOnly: true
        domain_verification_status:
          type: string
          description: "Whether the domain verification record is valid. Possible\
            \ values: \"unknown\", \"verified\", \"failed\""
          readOnly: true
          enum:
          - unknown
          - verified
          - failed
          x-ballerina-name: domainVerificationStatus
        dns_results:
          type: string
          description: "Verification statuses for the domain and CNAME records. Possible\
            \ types: \"verified\", \"failed\""
          readOnly: true
          enum:
          - verified
          - failed
          x-ballerina-name: dnsResults
        domain_verification_code:
          type: string
          description: "Verification string to be added as a TXT record to the domain.\
            \ Possible types: string or null"
          readOnly: true
          x-ballerina-name: domainVerificationCode
        email:
          type: string
          description: The email address. You can't change the email address of an
            existing support address
      example:
        brand_id: 123
        cname_status: verified
        created_at: 2015-07-20T22:55:29Z
        default: true
        domain_verification_status: verified
        email: support@example.zendesk.com
        forwarding_status: unknown
        id: 35436
        name: all
        spf_status: verified
        updated_at: 2016-09-21T20:15:20Z
    InlineResponse2006:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/InlineResponse2006Count'
    TicketUpdateRequest:
      type: object
      properties:
        ticket:
          $ref: '#/components/schemas/TicketUpdateInput'
    ViewsCountResponseCount:
      type: object
      properties:
        refreshed_at:
          type: string
          format: date-time
          x-ballerina-name: refreshedAt
        value:
          type: integer
    ActionsObject:
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/ActionObject'
    TicketBulkImportRequest:
      type: object
      properties:
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/TicketImportInput'
    TicketObjectVia:
      type: object
      properties:
        channel:
          type: string
          description: |
            This tells you how the ticket or event was created. Examples: "web", "mobile", "rule", "system"
        source:
          type: object
          additionalProperties: true
          description: |
            For some channels a source object gives more information about how or why the ticket or event was created
      description: "For more information, see the [Via object reference](/documentation/ticketing/reference-guides/via-object-reference)"
    AccountSettingsBrandsObject:
      type: object
      properties:
        default_brand_id:
          type: integer
          x-ballerina-name: defaultBrandId
        require_brand_on_new_tickets:
          type: boolean
          x-ballerina-name: requireBrandOnNewTickets
      description: "Brand settings. See [Brands](#brands)"
    TicketAuditObject:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties: true
          description: "Metadata for the audit, custom and system data"
          readOnly: true
        created_at:
          type: string
          description: The time the audit was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        id:
          type: integer
          description: Automatically assigned when creating audits
          readOnly: true
        author_id:
          type: integer
          description: The user who created the audit
          readOnly: true
          x-ballerina-name: authorId
        ticket_id:
          type: integer
          description: The ID of the associated ticket
          readOnly: true
          x-ballerina-name: ticketId
        events:
          type: array
          description: "An array of the events that happened in this audit. See the\
            \ [Ticket Audit events reference](/documentation/ticketing/reference-guides/ticket-audit-events-reference)"
          items:
            type: object
            additionalProperties: true
        via:
          $ref: '#/components/schemas/TicketAuditViaObject'
      example:
        author_id: 35436
        created_at: 2009-07-20T22:55:29Z
        events:
        - attachments: []
          body: Thanks for your help!
          id: 1564245
          public: true
          type: Comment
        - body: "Ticket #47 has been updated"
          id: 1564246
          subject: Your ticket has been updated
          type: Notification
        id: 35436
        metadata:
          custom:
            time_spent: 3m22s
          system:
            ip_address: 184.106.40.75
        ticket_id: 47
        via:
          channel: web
    PaginationLinks:
      type: object
      properties:
        next:
          type: string
        prev:
          type: string
    OrganizationMembershipObject:
      required:
      - default
      - organization_id
      - user_id
      type: object
      properties:
        view_tickets:
          type: boolean
          description: Denotes whether the user can or cannot have access to all organization's
            tickets
          readOnly: true
          x-ballerina-name: viewTickets
        default:
          type: boolean
          description: "Denotes whether this is the default organization membership\
            \ for the user. If false, returns `null`"
          nullable: true
        updated_at:
          type: string
          description: When this record last got updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        user_id:
          type: integer
          description: The ID of the user for whom this memberships belongs
          readOnly: true
          x-ballerina-name: userId
        organization_id:
          type: integer
          description: "The ID of the organization associated with this user, in this\
            \ membership"
          readOnly: true
          x-ballerina-name: organizationId
        created_at:
          type: string
          description: When this record was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        id:
          type: integer
          description: Automatically assigned when the membership is created
          readOnly: true
        organization_name:
          type: string
          description: "The name of the organization associated with this user, in\
            \ this membership"
          readOnly: true
          x-ballerina-name: organizationName
        url:
          type: string
          description: The API url of this membership
          readOnly: true
      example:
        created_at: 2009-05-13T00:07:08Z
        default: true
        id: 4
        organization_id: 12
        organization_name: first organization
        updated_at: 2011-07-22T00:11:12Z
        url: https://example.zendesk.com/api/v2/organization_memberships/4.json
        user_id: 29
        view_tickets: true
    QueueObjectDefinitionAll:
      type: object
      properties:
        field:
          type: string
        value:
          type: string
        operator:
          type: string
    TicketMetricEventBaseObject:
      title: Ticket Metric Events
      type: object
      properties:
        instance_id:
          type: integer
          description: "The instance of the metric associated with the event. See\
            \ [instance_id](#instance_id)"
          readOnly: true
          x-ballerina-name: instanceId
        metric:
          type: string
          description: The metric being tracked
          readOnly: true
          enum:
          - agent_work_time
          - pausable_update_time
          - periodic_update_time
          - reply_time
          - requester_wait_time
          - resolution_time
        id:
          type: integer
          description: Automatically assigned when the record is created
          readOnly: true
        time:
          type: string
          description: The time the event occurred
          format: date-time
          readOnly: true
        ticket_id:
          type: integer
          description: Id of the associated ticket
          readOnly: true
          x-ballerina-name: ticketId
        type:
          type: string
          description: "The type of the metric event. See [Ticket metric event types\
            \ reference](/documentation/ticketing/reference-guides/ticket-metric-event-types-reference)"
          readOnly: true
          enum:
          - activate
          - pause
          - fulfill
          - apply_sla
          - breach
          - update_status
          - measure
      example:
        id: 926256957613
        instance_id: 1
        metric: agent_work_time
        ticket_id: 155
        time: 2020-10-26T12:53:12Z
        type: measure
    SkillBasedRoutingAttributeDefinitionsDefinitionsConditionsAny:
      type: object
      properties:
        subject:
          type: string
        title:
          type: string
    UserMergeByIdInput:
      type: object
      properties:
        id:
          type: integer
    AssigneeFieldAssignableGroupsAndAgentsSearchResponse:
      type: object
      properties:
        count:
          type: integer
          description: Number of agents + groups listed from search result
        groups:
          type: array
          items:
            $ref: '#/components/schemas/AssigneeFieldAssignableSearchGroupObject'
        agents:
          type: array
          items:
            $ref: '#/components/schemas/AssigneeFieldAssignableSearchAgentObject'
      example:
        agents:
        - group: Tech
          group_id: 6574839201
          id: 8392017465
          name: Sam Technologist
          photo_url: https://z3n-example.zendesk.com/system/photos/410305192023/my_profile.png
        count: 2
        groups:
        - id: 6574839201
          name: Tech
    TimeBasedExportIncrementalTicketsResponse:
      type: object
      properties:
        next_page:
          type: string
          nullable: true
          x-ballerina-name: nextPage
        end_of_stream:
          type: boolean
          x-ballerina-name: endOfStream
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/TicketObject'
        count:
          type: integer
        end_time:
          type: integer
          x-ballerina-name: endTime
      description: |
        See [Tickets](/api-reference/ticketing/tickets/tickets/) for a detailed example
      example:
        count: 2
        end_of_stream: true
        end_time: 1390362485
        next_page: "https://{subdomain}.zendesk.com/api/v2/incremental/tickets.json?per_page=3&start_time=1390362485"
        tickets:
        - assignee_id: 235323
          collaborator_ids:
          - 35334
          - 234
          created_at: 2009-07-20T22:55:29Z
          custom_fields:
          - id: 27642
            value: "745"
          - id: 27648
            value: "yes"
          description: The fire is very colorful.
          due_at: null
          external_id: ahg35h3jh
          follower_ids:
          - 35334
          - 234
          group_id: 98738
          has_incidents: false
          id: 35436
          organization_id: 509974
          priority: high
          problem_id: 9873764
          raw_subject: "{{dc.printer_on_fire}}"
          recipient: support@company.com
          requester_id: 20978392
          satisfaction_rating:
            comment: Great support!
            id: 1234
            score: good
          sharing_agreement_ids:
          - 84432
          status: open
          subject: "Help, my printer is on fire!"
          submitter_id: 76872
          tags:
          - enterprise
          - other_tag
          type: incident
          updated_at: 2011-05-05T10:38:52Z
          url: https://company.zendesk.com/api/v2/tickets/35436.json
          via:
            channel: web
    TargetYammer:
      type: object
      properties:
        group_id:
          type: string
          x-ballerina-name: groupId
        token:
          type: string
    EmailCCObjectAllOf2:
      type: object
      properties:
        user_email:
          type: string
          x-ballerina-name: userEmail
        user_id:
          type: string
          x-ballerina-name: userId
        user_name:
          type: string
          x-ballerina-name: userName
        action:
          type: string
          enum:
          - put
          - delete
    AuditObject:
      type: object
      properties:
        metadata:
          type: object
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        id:
          type: integer
          readOnly: true
        author_id:
          type: integer
          readOnly: true
          x-ballerina-name: authorId
        ticket_id:
          type: integer
          readOnly: true
          x-ballerina-name: ticketId
        events:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/AuditObjectEvents'
        via:
          $ref: '#/components/schemas/ViaObject'
    TriggerCategoryBatchRequest:
      required:
      - id
      - position
      type: object
      properties:
        id:
          type: string
        position:
          type: integer
          format: int64
    CustomObjectRecordsBulkCreateRequestJob:
      type: object
      properties:
        action:
          type: string
        items:
          type: array
          description: "An array of record objects for job actions that create, update,\
            \ or set. An array of strings for job actions that delete"
          items:
            $ref: '#/components/schemas/CustomObjectRecord'
    OrganizationResponse:
      type: object
      properties:
        organization:
          $ref: '#/components/schemas/OrganizationObject'
    TargetCommonFields:
      required:
      - title
      - type
      type: object
      properties:
        active:
          type: boolean
          description: Whether or not the target is activated
        created_at:
          type: string
          description: The time the target was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        id:
          type: integer
          description: Automatically assigned when created
          readOnly: true
        title:
          type: string
          description: A name for the target
        type:
          type: string
          description: "A pre-defined target, such as \"basecamp_target\". See the\
            \ additional attributes for the type that follow"
    TicketsCreateRequest:
      type: object
      properties:
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/TicketCreateInput'
    TriggersResponse:
      type: object
      properties:
        next_page:
          type: string
          nullable: true
          x-ballerina-name: nextPage
        count:
          type: integer
        previous_page:
          type: string
          nullable: true
          x-ballerina-name: previousPage
        triggers:
          type: array
          items:
            $ref: '#/components/schemas/TriggerObject'
    TriggerCategoryRequestRequired:
      required:
      - name
      type: object
    UserForAdmin:
      title: Users
      required:
      - name
      type: object
      properties:
        shared:
          type: boolean
          description: If the user is shared from a different Zendesk Support instance.
            Ticket sharing accounts only
          readOnly: true
        last_login_at:
          type: string
          description: |
            Last time the user signed in to Zendesk Support or made an API request
            using an API token or basic authentication
          format: datetime
          readOnly: true
          x-ballerina-name: lastLoginAt
        notes:
          type: string
          description: Any notes you want to store about the user
        role:
          type: string
          description: "The user's role. Possible values are \"end-user\", \"agent\"\
            , or \"admin\""
        signature:
          type: string
          description: The user's signature. Only agents and admins can have signatures
        custom_role_id:
          type: integer
          description: A custom role if the user is an agent on the Enterprise plan
            or above
          nullable: true
          x-ballerina-name: customRoleId
        moderator:
          type: boolean
          description: Designates whether the user has forum moderation capabilities
        shared_agent:
          type: boolean
          description: If the user is a shared agent from a different Zendesk Support
            instance. Ticket sharing accounts only
          readOnly: true
          x-ballerina-name: sharedAgent
        created_at:
          type: string
          description: The time the user was created
          format: datetime
          readOnly: true
          x-ballerina-name: createdAt
        external_id:
          type: string
          description: "A unique identifier from another system. The API treats the\
            \ id as case insensitive. Example: \"ian1\" and \"IAN1\" are the same\
            \ value"
          nullable: true
          x-ballerina-name: externalId
        locale:
          type: string
          description: "The user's locale. A BCP-47 compliant tag for the locale.\
            \ If both \"locale\" and \"locale_id\" are present on create or update,\
            \ \"locale_id\" is ignored and only \"locale\" is used"
        default_group_id:
          type: integer
          description: The id of the user's default group
          x-ballerina-name: defaultGroupId
        locale_id:
          type: integer
          description: The user's language identifier
          x-ballerina-name: localeId
        remote_photo_url:
          type: string
          description: A URL pointing to the user's profile picture
          x-ballerina-name: remotePhotoUrl
        user_fields:
          type: object
          additionalProperties: true
          description: "Values of custom fields in the user's profile. See [User Fields](#user-fields)"
          x-ballerina-name: userFields
        updated_at:
          type: string
          description: The time the user was last updated
          format: datetime
          readOnly: true
          x-ballerina-name: updatedAt
        report_csv:
          type: boolean
          description: |
            This parameter is inert and has no effect. It may be deprecated in the
            future.

            Previously, this parameter determined whether a user could access a CSV
            report in a legacy Guide dashboard. This dashboard has been removed. See
            [Announcing Guide legacy reporting upgrade to
            Explore](https://support.zendesk.com/hc/en-us/articles/4762263171610-Announcing-Guide-legacy-reporting-upgrade-to-Explore-)
          readOnly: true
          x-ballerina-name: reportCsv
        alias:
          type: string
          description: An alias displayed to end users
        details:
          type: string
          description: "Any details you want to store about the user, such as an address"
        id:
          type: integer
          description: Automatically assigned when the user is created
          readOnly: true
        email:
          type: string
          description: "The user's primary email address. *Writeable on create only.\
            \ On update, a secondary email is added. See [Email Address](#email-address)"
        restricted_agent:
          type: boolean
          description: "If the agent has any restrictions; false for admins and unrestricted\
            \ agents, true for other agents"
          x-ballerina-name: restrictedAgent
        two_factor_auth_enabled:
          type: boolean
          description: If two factor authentication is enabled
          nullable: true
          readOnly: true
          x-ballerina-name: twoFactorAuthEnabled
        role_type:
          type: integer
          description: "The user's role id. 0 for a custom agent, 1 for a light agent,\
            \ 2 for a chat agent, 3 for a chat agent added to the Support account\
            \ as a contributor ([Chat Phase 4](https://support.zendesk.com/hc/en-us/articles/360022365373#topic_djh_1zk_4fb)),\
            \ 4 for an admin, and 5 for a billing admin"
          nullable: true
          readOnly: true
          x-ballerina-name: roleType
        only_private_comments:
          type: boolean
          description: true if the user can only create private comments
          x-ballerina-name: onlyPrivateComments
        iana_time_zone:
          type: string
          description: The time zone for the user
          readOnly: true
          x-ballerina-name: ianaTimeZone
        shared_phone_number:
          type: boolean
          description: "Whether the `phone` number is shared or not. See [Phone Number](#phone-number)\
            \ below"
          nullable: true
          x-ballerina-name: sharedPhoneNumber
        verified:
          type: boolean
          description: "Any of the user's identities is verified. See [User Identities](/api-reference/ticketing/users/user_identities)"
        active:
          type: boolean
          description: false if the user has been deleted
          readOnly: true
        photo:
          type: object
          additionalProperties: true
          description: "The user's profile picture represented as an [Attachment](/api-reference/ticketing/tickets/ticket-attachments/)\
            \ object"
          nullable: true
        time_zone:
          type: string
          description: "The user's time zone. See [Time Zone](#time-zone)"
          x-ballerina-name: timeZone
        suspended:
          type: boolean
          description: "If the agent is suspended. Tickets from suspended users are\
            \ also suspended, and these users cannot sign in to the end user portal"
        url:
          type: string
          description: The user's API url
          readOnly: true
        tags:
          type: array
          description: The user's tags. Only present if your account has user tagging
            enabled
          items:
            type: string
        phone:
          type: string
          description: "The user's primary phone number. See [Phone Number](#phone-number)\
            \ below"
          nullable: true
        organization_id:
          type: integer
          description: "The id of the user's organization. If the user has more than\
            \ one [organization memberships](/api-reference/ticketing/organizations/organization_memberships/),\
            \ the id of the user's default organization. If updating, see [Organization\
            \ ID](#organization-id)"
          nullable: true
          x-ballerina-name: organizationId
        name:
          type: string
          description: The user's name
        chat_only:
          type: boolean
          description: Whether or not the user is a chat-only agent
          readOnly: true
          x-ballerina-name: chatOnly
        ticket_restriction:
          type: string
          description: "Specifies which tickets the user has access to. Possible values\
            \ are: \"organization\", \"groups\", \"assigned\", \"requested\", null.\
            \ \"groups\" and \"assigned\" are valid only for agents. If you pass an\
            \ invalid value to an end user (for example, \"groups\"), they will be\
            \ assigned to \"requested\", regardless of their previous access"
          nullable: true
          x-ballerina-name: ticketRestriction
      example:
        active: true
        alias: Mr. Johnny
        created_at: 2009-07-20T22:55:29Z
        custom_role_id: 9373643
        details: ""
        email: johnny@example.com
        external_id: sai989sur98w9
        iana_time_zone: Pacific/Pago_Pago
        id: 35436
        last_login_at: 2011-05-05T10:38:52Z
        locale: en-US
        locale_id: 1
        moderator: true
        name: Johnny Agent
        notes: Johnny is a nice guy!
        only_private_comments: false
        organization_id: 57542
        phone: "+15551234567"
        photo:
          content_type: image/png
          content_url: https://company.zendesk.com/photos/my_funny_profile_pic.png
          id: 928374
          name: my_funny_profile_pic.png
          size: 166144
          thumbnails:
          - content_type: image/png
            content_url: https://company.zendesk.com/photos/my_funny_profile_pic_thumb.png
            id: 928375
            name: my_funny_profile_pic_thumb.png
            size: 58298
        restricted_agent: true
        role: agent
        role_type: 0
        shared: false
        shared_agent: false
        signature: "Have a nice day, Johnny"
        suspended: true
        tags:
        - enterprise
        - other_tag
        ticket_restriction: assigned
        time_zone: Copenhagen
        updated_at: 2011-05-05T10:38:52Z
        url: https://company.zendesk.com/api/v2/users/35436.json
        user_fields:
          user_date: 2012-07-23T00:00:00Z
          user_decimal: 5.1
          user_dropdown: option_1
        verified: true
    MacroObjectAllOf2:
      type: object
      properties:
        app_installation:
          type: string
          description: "The app installation that requires each macro, if present"
          nullable: true
          x-ballerina-name: appInstallation
        usage_24h:
          type: integer
          description: The number of times each macro has been used in the past day
          x-ballerina-name: usage24h
        usage_30d:
          type: integer
          description: The number of times each macro has been used in the past thirty
            days
          x-ballerina-name: usage30d
        usage_1h:
          type: integer
          description: The number of times each macro has been used in the past hour
          x-ballerina-name: usage1h
        permissions:
          type: string
          description: Permissions for each macro
          nullable: true
        categories:
          type: string
          description: The macro categories
          nullable: true
        usage_7d:
          type: integer
          description: The number of times each macro has been used in the past week
          x-ballerina-name: usage7d
    BulkUpdateDefaultCustomStatusResponse:
      type: object
    TwitterChannelsResponse:
      type: object
      properties:
        monitored_twitter_handles:
          type: array
          items:
            $ref: '#/components/schemas/TwitterChannelObject'
          x-ballerina-name: monitoredTwitterHandles
    GroupSLAPolicyFilterDefinitionResponseDefinitionsValuesList:
      type: object
      properties:
        title:
          type: string
        value:
          type: integer
          nullable: true
    InlineResponse2005Definitions:
      type: object
      properties:
        actions:
          type: array
          items:
            type: object
            additionalProperties: true
    UserRelatedObject:
      type: object
      properties:
        organization_subscriptions:
          type: integer
          description: Count of organization subscriptions
          x-ballerina-name: organizationSubscriptions
        requested_tickets:
          type: integer
          description: Count of requested tickets
          x-ballerina-name: requestedTickets
        assigned_tickets:
          type: integer
          description: Count of assigned tickets
          x-ballerina-name: assignedTickets
        ccd_tickets:
          type: integer
          description: Count of collaborated tickets
          x-ballerina-name: ccdTickets
    SLAPolicyFilterDefinitionResponseDefinitionsValues1List:
      type: object
      properties:
        title:
          type: string
        value:
          type: string
          nullable: true
    TriggerBulkUpdateItem:
      required:
      - id
      type: object
      properties:
        category_id:
          type: string
          description: The ID of the new category the trigger is to be moved to
          x-ballerina-name: categoryId
        active:
          type: boolean
          description: The active status of the trigger (true or false)
        id:
          type: integer
          description: The ID of the trigger to update
        position:
          type: integer
          description: The new position of the trigger
      example:
        active: true
        category_id: "10026"
        id: 25
        position: 8
    SkillBasedRoutingAttributeDefinitionsDefinitionsConditionsAll:
      type: object
      properties:
        subject:
          type: string
        title:
          type: string
    TicketFormResponse:
      type: object
      properties:
        ticket_form:
          allOf:
          - $ref: '#/components/schemas/TicketFormObject'
          x-ballerina-name: ticketForm
    SuspendedTicketsExportResponse:
      type: object
      properties:
        export:
          $ref: '#/components/schemas/SuspendedTicketsExportResponseExport'
    TicketMetricObject:
      type: object
      properties:
        group_stations:
          type: integer
          description: Number of groups the ticket passed through
          readOnly: true
          x-ballerina-name: groupStations
        on_hold_time_in_minutes:
          type: object
          description: Number of minutes on hold
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/TicketMetricTimeObject'
          x-ballerina-name: onHoldTimeInMinutes
        reopens:
          type: integer
          description: Total number of times the ticket was reopened
          readOnly: true
        requester_updated_at:
          type: string
          description: When the requester last updated the ticket
          format: date-time
          readOnly: true
          x-ballerina-name: requesterUpdatedAt
        reply_time_in_minutes:
          type: object
          description: Number of minutes to the first reply during calendar and business
            hours
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/TicketMetricTimeObject'
          x-ballerina-name: replyTimeInMinutes
        assignee_stations:
          type: integer
          description: Number of assignees the ticket had
          readOnly: true
          x-ballerina-name: assigneeStations
        created_at:
          type: string
          description: When the record was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        custom_status_updated_at:
          type: string
          description: The date and time the ticket's custom status was last updated
          format: date-time
          readOnly: true
          x-ballerina-name: customStatusUpdatedAt
        ticket_id:
          type: integer
          description: Id of the associated ticket
          readOnly: true
          x-ballerina-name: ticketId
        url:
          type: string
          description: The API url of the ticket metric
          readOnly: true
        initially_assigned_at:
          type: string
          description: When the ticket was initially assigned
          format: date-time
          readOnly: true
          x-ballerina-name: initiallyAssignedAt
        latest_comment_added_at:
          type: string
          description: When the latest comment was added
          format: date-time
          readOnly: true
          x-ballerina-name: latestCommentAddedAt
        replies:
          type: integer
          description: The number of public replies added to a ticket by an agent
          readOnly: true
        updated_at:
          type: string
          description: When the record was last updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        solved_at:
          type: string
          description: When the ticket was solved
          format: date-time
          readOnly: true
          x-ballerina-name: solvedAt
        assigned_at:
          type: string
          description: When the ticket was assigned
          format: date-time
          readOnly: true
          x-ballerina-name: assignedAt
        id:
          type: integer
          description: Automatically assigned when the client is created
          readOnly: true
        agent_wait_time_in_minutes:
          type: object
          description: Number of minutes the agent spent waiting during calendar and
            business hours
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/TicketMetricTimeObject'
          x-ballerina-name: agentWaitTimeInMinutes
        full_resolution_time_in_minutes:
          type: object
          description: Number of minutes to the full resolution during calendar and
            business hours
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/TicketMetricTimeObject'
          x-ballerina-name: fullResolutionTimeInMinutes
        reply_time_in_seconds:
          type: object
          description: "Number of seconds to the first reply during calendar hours,\
            \ only available for Messaging tickets"
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/TicketMetricTimeObject'
          x-ballerina-name: replyTimeInSeconds
        requester_wait_time_in_minutes:
          type: object
          description: Number of minutes the requester spent waiting during calendar
            and business hours
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/TicketMetricTimeObject'
          x-ballerina-name: requesterWaitTimeInMinutes
        first_resolution_time_in_minutes:
          type: object
          description: Number of minutes to the first resolution time during calendar
            and business hours
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/TicketMetricTimeObject'
          x-ballerina-name: firstResolutionTimeInMinutes
        assignee_updated_at:
          type: string
          description: When the assignee last updated the ticket
          format: date-time
          readOnly: true
          x-ballerina-name: assigneeUpdatedAt
        status_updated_at:
          type: string
          description: When the status of the ticket was last updated
          format: date-time
          readOnly: true
          x-ballerina-name: statusUpdatedAt
      example:
        agent_wait_time_in_minutes:
          business: 737
          calendar: 2391
        assigned_at: 2011-05-05T10:38:52Z
        assignee_stations: 1
        assignee_updated_at: 2011-05-06T10:38:52Z
        created_at: 2009-07-20T22:55:29Z
        custom_status_updated_at: 2011-05-09T10:38:52Z
        first_resolution_time_in_minutes:
          business: 737
          calendar: 2391
        full_resolution_time_in_minutes:
          business: 737
          calendar: 2391
        group_stations: 7
        id: 33
        initially_assigned_at: 2011-05-03T10:38:52Z
        latest_comment_added_at: 2011-05-09T10:38:52Z
        on_hold_time_in_minutes:
          business: 637
          calendar: 2290
        reopens: 55
        replies: 322
        reply_time_in_minutes:
          business: 737
          calendar: 2391
        reply_time_in_seconds:
          calendar: 143460
        requester_updated_at: 2011-05-07T10:38:52Z
        requester_wait_time_in_minutes:
          business: 737
          calendar: 2391
        solved_at: 2011-05-09T10:38:52Z
        status_updated_at: 2011-05-04T10:38:52Z
        ticket_id: 4343
        updated_at: 2011-05-05T10:38:52Z
    CountOrganizationResponse:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/CountOrganizationObject'
    TriggerConditionDefinitionObjectAllValues:
      type: object
      properties:
        title:
          type: string
        value:
          type: string
        enabled:
          type: boolean
    QueueObjectDefinitionAny:
      type: object
      properties:
        field:
          type: string
        value:
          type: string
        operator:
          type: string
    GroupSLAPolicyFilterConditionObjectValue:
      oneOf:
      - $ref: '#/components/schemas/ValueOneOf1'
      - $ref: '#/components/schemas/ValueValueOneOf12'
    TicketSkipCreation:
      type: object
      properties:
        skip:
          $ref: '#/components/schemas/TicketSkipObject'
    UserInput:
      additionalProperties: true
      anyOf:
      - $ref: '#/components/schemas/UserCreateInput'
      - $ref: '#/components/schemas/UserMergePropertiesInput'
      - $ref: '#/components/schemas/UserMergeByIdInput'
    TicketAuditsCountResponse:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/TicketAuditsCountResponseCount'
    AccountSettingsTicketSharingPartnersObject:
      type: object
      properties:
        support_addresses:
          type: array
          items:
            type: string
          x-ballerina-name: supportAddresses
      description: "Ticket sharing partners settings. See [Ticket Sharing Partners](#ticket-sharing-partners)"
    ExportIncrementalOrganizationsResponse:
      type: object
      properties:
        next_page:
          type: string
          nullable: true
          x-ballerina-name: nextPage
        end_of_stream:
          type: boolean
          x-ballerina-name: endOfStream
        count:
          type: integer
        end_time:
          type: integer
          x-ballerina-name: endTime
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationObject'
      example:
        count: 1
        end_of_stream: true
        end_time: 1601357503
        next_page: https://example.zendesk.com/api/v2/incremental/ticket_events.json?start_time=1601357503
        organizations:
        - created_at: 2018-11-14T00:14:52Z
          details: caterpillar =)
          domain_names:
          - remain.com
          external_id: ABC198
          group_id: 1835962
          id: 4112492
          name: Groablet Enterprises
          notes: donkey
          organization_fields:
            datepudding: 2018-11-04T00:00:00+00:00
            org_field_1: happy happy
            org_field_2: teapot_kettle
          shared_comments: false
          shared_tickets: false
          tags:
          - smiley
          - teapot_kettle
          updated_at: 2018-11-14T00:54:22Z
          url: https://example.zendesk.com/api/v2/organizations/4112492.json
    OffsetPaginationObject:
      type: object
      properties:
        next_page:
          type: string
          description: the URL of the next page
          format: url
          nullable: true
          x-ballerina-name: nextPage
        count:
          type: integer
          description: the total record count
        previous_page:
          type: string
          description: the URL of the previous page
          format: url
          nullable: true
          x-ballerina-name: previousPage
    V2MacrosBody:
      type: object
      properties:
        macro:
          $ref: '#/components/schemas/MacroInput'
    OrganizationFieldResponse:
      type: object
      properties:
        organization_field:
          allOf:
          - $ref: '#/components/schemas/OrganizationFieldObject'
          x-ballerina-name: organizationField
    AccountSettingsStatisticsObject:
      type: object
      properties:
        forum:
          type: boolean
        search:
          type: boolean
        rule_usage:
          type: boolean
          x-ballerina-name: ruleUsage
      description: "Account statistics settings. See [Statistics](#statistics)"
    AccountSettingsLimitsObject:
      type: object
      properties:
        attachment_size:
          type: integer
          x-ballerina-name: attachmentSize
      description: "Account limits configuration. See [Limits](#limits)"
    TriggerActionObject:
      type: object
      properties:
        field:
          type: string
        value:
          oneOf:
          - type: string
          - type: integer
          - type: array
            items:
              oneOf:
              - type: string
              - type: integer
      example:
        field: status
        value: solved
    AccountSettingsCdnObjectHosts:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
    SharingAgreementObject:
      type: object
      properties:
        partner_name:
          type: string
          description: "Can be one of the following: \"jira\", null"
          nullable: true
          x-ballerina-name: partnerName
        remote_subdomain:
          type: string
          description: Subdomain of the remote account or null if not associated with
            an account
          x-ballerina-name: remoteSubdomain
        name:
          type: string
          description: Name of this sharing agreement
        created_at:
          type: string
          description: The time the record was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        id:
          type: integer
          description: Automatically assigned upon creation
          readOnly: true
        type:
          type: string
          description: "Can be one of the following: \"inbound\", \"outbound\""
        url:
          type: string
          description: URL of the sharing agreement record
          readOnly: true
        status:
          type: string
          description: "Can be one of the following: \"accepted\", \"declined\", \"\
            pending\", \"inactive\", \"failed\", \"ssl_error\", \"configuration_error\""
      example:
        created_at: 2012-02-20T22:55:29Z
        id: 88335
        name: Ticket Sharing
        partner_name: jira
        status: accepted
        type: inbound
        url: https://company.zendesk.com/api/v2/agreements/88335.json
    ListDeletedTicketsResponseActor:
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
    MacroCommonObject:
      required:
      - actions
      - title
      type: object
      properties:
        default:
          type: boolean
          description: "If true, the macro is a default macro"
          readOnly: true
        updated_at:
          type: string
          description: The time of the last update of the macro
          format: date-time
          x-ballerina-name: updatedAt
        restriction:
          type: object
          additionalProperties: true
          description: Access to this macro. A null value allows unrestricted access
            for all users in the account
          nullable: true
        active:
          type: boolean
          description: Useful for determining if the macro should be displayed
        created_at:
          type: string
          description: The time the macro was created
          format: date-time
          x-ballerina-name: createdAt
        description:
          type: string
          description: The description of the macro
          nullable: true
        id:
          type: integer
          description: The ID automatically assigned when a macro is created
        position:
          type: integer
          description: The position of the macro
        title:
          type: string
          description: The title of the macro
        actions:
          type: array
          description: "Each action describes what the macro will do. See [Actions\
            \ reference](/documentation/ticketing/reference-guides/actions-reference)"
          items:
            $ref: '#/components/schemas/ActionObject'
        url:
          type: string
          description: A URL to access the macro's details
      example:
        actions:
        - field: status
          value: solved
        - field: priority
          value: normal
        - field: type
          value: incident
        - field: assignee_id
          value: current_user
        - field: group_id
          value: current_groups
        - field: comment_value
          value: "Thanks for your request. This issue you reported is a known issue.\
            \ For more information, please visit our forums. "
        active: true
        created_at: 2019-09-16T02:17:38Z
        default: false
        description: null
        id: 360111062754
        position: 9999
        restriction: null
        title: Close and redirect to topics
        updated_at: 2019-09-16T02:17:38Z
        url: https://subdomain.zendesk.com/api/v2/macros/360111062754.json
    OrganizationFieldObject:
      type: object
      example:
        active: true
        created_at: 2012-10-16T16:04:06Z
        description: Description of Custom Field
        id: 7
        key: custom_field_1
        position: 9999
        raw_description: "{{dc.my_description}}"
        raw_title: Custom Field 1
        regexp_for_validation: null
        title: Custom Field 1
        type: text
        updated_at: 2012-10-16T16:04:06Z
        url: https://company.zendesk.com/api/v2/organization_fields/7.json
      allOf:
      - $ref: '#/components/schemas/CustomFieldObject'
    TriggerActionDefinitionObject:
      type: object
      properties:
        nullable:
          type: boolean
        repeatable:
          type: boolean
        subject:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/TriggerActionDefinitionObjectValues'
        title:
          type: string
        type:
          type: string
        group:
          type: string
    SkillBasedRoutingAttributeDefinitionsDefinitions:
      type: object
      properties:
        conditions_any:
          type: array
          items:
            $ref: '#/components/schemas/SkillBasedRoutingAttributeDefinitionsDefinitionsConditionsAny'
          x-ballerina-name: conditionsAny
        conditions_all:
          type: array
          items:
            $ref: '#/components/schemas/SkillBasedRoutingAttributeDefinitionsDefinitionsConditionsAll'
          x-ballerina-name: conditionsAll
    DefinitionsResponseDefinitionsConditionsAll:
      type: object
      properties:
        nullable:
          type: boolean
        operators:
          type: array
          items:
            $ref: '#/components/schemas/DefinitionsResponseDefinitionsOperators'
        repeatable:
          type: boolean
        subject:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/DefinitionsResponseDefinitionsValues'
        title:
          type: string
        type:
          type: string
        group:
          type: string
    EmailCCObject:
      type: object
      allOf:
      - $ref: '#/components/schemas/FollowerObject'
      - $ref: '#/components/schemas/EmailCCObjectAllOf2'
    GroupMembershipsResponse:
      type: object
      properties:
        group_memberships:
          type: array
          items:
            $ref: '#/components/schemas/GroupMembershipObject'
          x-ballerina-name: groupMemberships
    TriggerBulkUpdateRequest:
      type: object
      properties:
        triggers:
          type: array
          items:
            $ref: '#/components/schemas/TriggerBulkUpdateItem'
    GroupSLAPolicyFilterDefinitionResponseDefinitionsOperators:
      type: object
      properties:
        title:
          type: string
        value:
          type: string
    SLAPolicyFilterConditionObject:
      type: object
      properties:
        field:
          type: string
          description: The name of a ticket field
        value:
          description: The value of a ticket field
          oneOf:
          - type: string
          - type: array
            items:
              oneOf:
              - type: string
              - type: integer
        operator:
          type: string
          description: A comparison operator
    ChannelFrameworkResultObject:
      type: object
      properties:
        external_resource_id:
          type: string
          description: "The external ID of the resource, as passed in"
          readOnly: true
          x-ballerina-name: externalResourceId
        status:
          $ref: '#/components/schemas/ChannelFrameworkResultStatusObject'
    V2TriggerCategoriesBody:
      type: object
      properties:
        trigger_category:
          allOf:
          - $ref: '#/components/schemas/TriggerCategoryRequest'
          - $ref: '#/components/schemas/TriggerCategoryRequestRequired'
          x-ballerina-name: triggerCategory
    AccountSettingsBillingObject:
      type: object
      properties:
        backend:
          type: string
      description: "Billing configuration options. See [Billing](#billing)"
    TicketMetricEventsResponseAllOf1:
      type: object
      properties:
        ticket_metric_events:
          type: array
          items:
            $ref: '#/components/schemas/TicketMetricEventBaseObject'
          x-ballerina-name: ticketMetricEvents
    CustomObjectField:
      type: object
      example:
        active: true
        created_at: 2022-09-07T23:21:59Z
        description: Make
        id: 4398096842879
        key: make
        position: 0
        raw_description: Make
        raw_title: Make
        regexp_for_validation: null
        system: false
        title: Make
        type: text
        updated_at: 2022-09-07T23:22:00Z
        url: https://company.zendesk.com/api/v2/custom_objects/car/fields/4398096842879.json
      allOf:
      - $ref: '#/components/schemas/CustomFieldObject'
    CustomStatusCreateInput:
      type: object
      allOf:
      - $ref: '#/components/schemas/CustomStatusUpdateInput'
      - $ref: '#/components/schemas/CustomStatusCreateInputAllOf2'
    MacroUpdateManyInputMacros:
      required:
      - id
      type: object
      properties:
        active:
          type: boolean
          description: The active status of the macro (true or false)
        id:
          type: integer
          description: The ID of the macro to update
        position:
          type: integer
          description: The new position of the macro
    CustomObjectRecord:
      required:
      - name
      type: object
      properties:
        updated_at:
          type: string
          description: The time of the last update of the object
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        updated_by_user_id:
          type: string
          description: Id of the last user who updated the object
          readOnly: true
          x-ballerina-name: updatedByUserId
        custom_object_key:
          type: string
          description: A user-defined unique identifier
          readOnly: true
          x-ballerina-name: customObjectKey
        name:
          type: string
          description: User-defined display name for the object
          readOnly: true
        created_at:
          type: string
          description: The time the object was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        external_id:
          type: string
          description: An id you can use to link custom object records to external
            data
          nullable: true
          x-ballerina-name: externalId
        custom_object_fields:
          type: object
          additionalProperties: true
          x-ballerina-name: customObjectFields
        id:
          type: string
          description: Automatically assigned upon creation
          readOnly: true
        created_by_user_id:
          type: string
          description: Id of a user who created the object
          readOnly: true
          x-ballerina-name: createdByUserId
        url:
          type: string
          description: Direct link to the specific custom object
          readOnly: true
    TriggerCategoryRequest:
      type: object
      properties:
        name:
          type: string
        position:
          type: integer
          format: int64
    ViaObject:
      type: object
      properties:
        channel:
          type: string
          description: |
            This tells you how the ticket or event was created. Examples: "web", "mobile", "rule", "system"
        source:
          $ref: '#/components/schemas/ViaObjectSource'
      description: |
        An object explaining how the ticket was created. See the [Via object reference](/documentation/ticketing/reference-guides/via-object-reference)
      readOnly: true
      example:
        channel: rule
        source:
          from:
            id: 22472716
            title: Assign to first responder
          rel: trigger
          to: {}
    CustomStatusResponse:
      type: object
      properties:
        custom_status:
          allOf:
          - $ref: '#/components/schemas/CustomStatusObject'
          x-ballerina-name: customStatus
    BatchJobResponseResults:
      type: object
      properties:
        trigger_categories:
          type: array
          items:
            $ref: '#/components/schemas/TriggerCategory'
          x-ballerina-name: triggerCategories
        triggers:
          type: array
          items:
            $ref: '#/components/schemas/TriggerObject'
    UserCreateInputOrganization:
      required:
      - name
      type: object
      properties:
        name:
          type: string
    TicketCreateVoicemailTicketInput:
      type: object
      properties:
        voice_comment:
          type: object
          description: Required if creating voicemail ticket
          allOf:
          - $ref: '#/components/schemas/TicketCreateVoicemailTicketVoiceCommentInput'
          x-ballerina-name: voiceComment
        comment:
          $ref: '#/components/schemas/TicketCommentObject'
        priority:
          type: string
          description: The urgency with which the ticket should be addressed
          enum:
          - urgent
          - high
          - normal
          - low
        via_id:
          type: integer
          description: Required for Create Ticket operation
          enum:
          - 44
          - 45
          - 46
          x-ballerina-name: viaId
    TriggerConditionsDiffObject:
      type: object
      properties:
        all:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TriggerConditionDiffObject'
        any:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TriggerConditionDiffObject'
    UserFieldResponse:
      type: object
      properties:
        user_field:
          allOf:
          - $ref: '#/components/schemas/UserFieldObject'
          x-ballerina-name: userField
    GroupSLAPolicyObject:
      required:
      - filter
      - title
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/GroupSLAPolicyFilterObject'
        updated_at:
          type: string
          description: The time of the last update of the Group SLA policy
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        policy_metrics:
          type: array
          description: "Array of [policy metric](#policy-metric) objects"
          items:
            $ref: '#/components/schemas/GroupSLAPolicyMetricObject'
          x-ballerina-name: policyMetrics
        created_at:
          type: string
          description: The time the Group SLA policy was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        description:
          type: string
          description: The description of the Group SLA policy
        id:
          type: string
          description: Automatically assigned when created
          readOnly: true
        position:
          type: integer
          description: "Position of the Group SLA policy. This position determines\
            \ the order in which policies are matched to tickets. If not specified,\
            \ the Group SLA policy is added at the last position"
        title:
          type: string
          description: The title of the Group SLA policy
        url:
          type: string
          description: URL of the Group SLA policy record
          readOnly: true
      example:
        created_at: 2023-03-17T22:50:26Z
        description: "Group: Tier 1"
        filter:
          all: []
        id: 01H078CBDY28BZG7P6BONY09DN
        policy_metrics:
        - business_hours: false
          metric: group_ownership_time
          priority: low
          target: 3600
        position: 3
        title: Tier 1
        updated_at: 2023-03-17T22:50:26Z
        url: https://company.zendesk.com/api/v2/group_slas/policies/01H078CBDY28BZG7P6BONY09DN.json
    TicketMetricTimeObject:
      type: object
      properties:
        calendar:
          type: integer
          description: Time in calendar hours
          readOnly: true
        business:
          type: integer
          description: Time in business hours
          readOnly: true
    TicketFieldObject:
      required:
      - title
      - type
      type: object
      properties:
        raw_title:
          type: string
          description: "The dynamic content placeholder if present, or the `title`\
            \ value if not. See [Dynamic Content](/api-reference/ticketing/ticket-management/dynamic_content/)"
          x-ballerina-name: rawTitle
        creator_app_name:
          type: string
          description: "Name of the app that created the ticket field, or a null value\
            \ if no app created the ticket field"
          x-ballerina-name: creatorAppName
        custom_field_options:
          type: array
          description: Required and presented for a custom ticket field of type "multiselect"
            or "tagger"
          items:
            $ref: '#/components/schemas/CustomFieldOptionObject'
          x-ballerina-name: customFieldOptions
        visible_in_portal:
          type: boolean
          description: Whether this field is visible to end users in Help Center
          x-ballerina-name: visibleInPortal
        created_at:
          type: string
          description: The time the custom ticket field was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        description:
          type: string
          description: Describes the purpose of the ticket field to users
        title:
          type: string
          description: The title of the ticket field
        type:
          type: string
          description: "System or custom field type. Editable for custom field types\
            \ and only on creation. See [Create Ticket Field](#create-ticket-field)"
        required:
          type: boolean
          description: "If true, agents must enter a value in the field to change\
            \ the ticket status to solved"
        editable_in_portal:
          type: boolean
          description: Whether this field is editable by end users in Help Center
          x-ballerina-name: editableInPortal
        custom_statuses:
          type: array
          description: List of customized ticket statuses. Only presented for a system
            ticket field of type "custom_status"
          readOnly: true
          items:
            $ref: '#/components/schemas/TicketFieldCustomStatusObject'
          x-ballerina-name: customStatuses
        updated_at:
          type: string
          description: The time the custom ticket field was last updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        system_field_options:
          type: array
          description: "Presented for a system ticket field of type \"tickettype\"\
            , \"priority\" or \"status\""
          readOnly: true
          items:
            $ref: '#/components/schemas/SystemFieldOptionObject'
          x-ballerina-name: systemFieldOptions
        relationship_target_type:
          type: string
          description: "A representation of what type of object the field references.\
            \ Options are \"zen:user\", \"zen:organization\", \"zen:ticket\", or \"\
            zen:custom_object:{key}\" where key is a custom object key. For example\
            \ \"zen:custom_object:apartment\""
          x-ballerina-name: relationshipTargetType
        regexp_for_validation:
          type: string
          description: For "regexp" fields only. The validation pattern for a field
            value to be deemed valid
          nullable: true
          x-ballerina-name: regexpForValidation
        relationship_filter:
          type: object
          description: A filter definition that allows your autocomplete to filter
            down results
          x-ballerina-name: relationshipFilter
        id:
          type: integer
          description: Automatically assigned when created
          readOnly: true
        tag:
          type: string
          description: For "checkbox" fields only. A tag added to tickets when the
            checkbox field is selected
          nullable: true
        creator_user_id:
          type: integer
          description: "The id of the user that created the ticket field, or a value\
            \ of \"-1\" if an app created the ticket field"
          x-ballerina-name: creatorUserId
        collapsed_for_agents:
          type: boolean
          description: "If true, the field is shown to agents by default. If false,\
            \ the field is hidden alongside infrequently used fields. Classic interface\
            \ only"
          x-ballerina-name: collapsedForAgents
        active:
          type: boolean
          description: Whether this field is available
        agent_description:
          type: string
          description: A description of the ticket field that only agents can see
          x-ballerina-name: agentDescription
        raw_title_in_portal:
          type: string
          description: "The dynamic content placeholder if present, or the \"title_in_portal\"\
            \ value if not. See [Dynamic Content](/api-reference/ticketing/ticket-management/dynamic_content/)"
          x-ballerina-name: rawTitleInPortal
        raw_description:
          type: string
          description: "The dynamic content placeholder if present, or the `description`\
            \ value if not. See [Dynamic Content](/api-reference/ticketing/ticket-management/dynamic_content/)"
          x-ballerina-name: rawDescription
        url:
          type: string
          description: The URL for this resource
          readOnly: true
        required_in_portal:
          type: boolean
          description: "If true, end users must enter a value in the field to create\
            \ the request"
          x-ballerina-name: requiredInPortal
        removable:
          type: boolean
          description: "If false, this field is a system field that must be present\
            \ on all tickets"
          readOnly: true
        sub_type_id:
          type: integer
          description: For system ticket fields of type "priority" and "status". Defaults
            to 0. A "priority" sub type of 1 removes the "Low" and "Urgent" options.
            A "status" sub type of 1 adds the "On-Hold" option
          x-ballerina-name: subTypeId
        position:
          type: integer
          description: "The relative position of the ticket field on a ticket. Note\
            \ that for accounts with ticket forms, positions are controlled by the\
            \ different forms"
        title_in_portal:
          type: string
          description: The title of the ticket field for end users in Help Center
          x-ballerina-name: titleInPortal
      example:
        active: true
        agent_description: This is the agent only description for the subject field
        collapsed_for_agents: false
        created_at: 2009-07-20T22:55:29Z
        description: This is the subject field of a ticket
        editable_in_portal: true
        id: 34
        position: 21
        raw_description: This is the subject field of a ticket
        raw_title: "{{dc.my_title}}"
        raw_title_in_portal: "{{dc.my_title_in_portal}}"
        regexp_for_validation: null
        removable: false
        required: true
        required_in_portal: true
        tag: null
        title: Subject
        title_in_portal: Subject
        type: subject
        updated_at: 2011-05-05T10:38:52Z
        url: https://company.zendesk.com/api/v2/ticket_fields/34.json
        visible_in_portal: true
    RequestResponse:
      type: object
      properties:
        request:
          $ref: '#/components/schemas/RequestObject'
    ComplianceDeletionStatusesResponse:
      type: object
      properties:
        compliance_deletion_statuses:
          type: array
          items:
            $ref: '#/components/schemas/ComplianceDeletionStatusObject'
          x-ballerina-name: complianceDeletionStatuses
    TicketFieldCustomStatusObject:
      type: object
      properties:
        default:
          type: boolean
          description: "If true, the custom status is set to default. If false, the\
            \ custom status is set to non-default"
        end_user_label:
          type: string
          description: The label displayed to end users
          x-ballerina-name: endUserLabel
        status_category:
          type: string
          description: The status category the custom ticket status belongs to
          enum:
          - new
          - open
          - pending
          - hold
          - solved
          x-ballerina-name: statusCategory
        updated_at:
          type: string
          description: The date and time at which the custom ticket status was last
            updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        end_user_description:
          type: string
          description: The description displayed to end users
          x-ballerina-name: endUserDescription
        active:
          type: boolean
          description: "If true, if the custom status is set to active. If false,\
            \ the custom status is set to inactive"
        created_at:
          type: string
          description: The date and time at which the custom ticket status was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        description:
          type: string
          description: The description of when the user should select this custom
            ticket status
        id:
          type: integer
          description: Automatically assigned when the custom ticket status is created
          readOnly: true
        agent_label:
          type: string
          description: The label displayed to agents
          x-ballerina-name: agentLabel
    AccountSettingsResponse:
      type: object
      properties:
        settings:
          $ref: '#/components/schemas/AccountSettingsObject'
      example:
        settings:
          active_features:
            advanced_analytics: false
            agent_forwarding: false
            allow_ccs: true
            allow_email_template_customization: true
            automatic_answers: false
            bcc_archiving: false
            benchmark_opt_out: false
            business_hours: false
            chat: false
            chat_about_my_ticket: false
            csat_reason_code: false
            custom_dkim_domain: true
            customer_context_as_default: false
            customer_satisfaction: false
            dynamic_contents: false
            explore: true
            explore_on_support_ent_plan: false
            explore_on_support_pro_plan: false
            facebook: false
            facebook_login: false
            fallback_composer: false
            forum_analytics: true
            good_data_and_explore: false
            google_login: false
            insights: false
            is_abusive: false
            light_agents: false
            markdown: false
            on_hold_status: false
            organization_access_enabled: true
            rich_content_in_emails: true
            sandbox: false
            satisfaction_prediction: false
            suspended_ticket_notification: false
            ticket_forms: true
            ticket_tagging: true
            topic_suggestion: false
            twitter: true
            twitter_login: false
            user_org_fields: true
            user_tagging: true
            voice: true
          agents:
            agent_home: false
            agent_workspace: false
            aw_self_serve_migration_enabled: true
            focus_mode: false
            idle_timeout_enabled: false
            unified_agent_statuses: false
          api:
            accepted_api_agreement: true
            api_password_access: "true"
            api_token_access: "true"
          apps:
            create_private: true
            create_public: false
            use: true
          billing:
            backend: zuora
          branding:
            favicon_url: null
            header_color: 78A300
            header_logo_url: null
            page_background_color: "333333"
            tab_background_color: 7FA239
            text_color: FFFFFF
          brands:
            default_brand_id: 1873
            require_brand_on_new_tickets: false
          cdn:
            cdn_provider: default
            fallback_cdn_provider: cloudfront
            hosts:
            - name: default
              url: https://p18.zdassets.com
            - name: cloudfront
              url: https://d2y9oszrd3dhjh.cloudfront.net
          chat:
            available: true
            enabled: false
            integrated: true
            maximum_request_count: 1
            welcome_message: Hi there. How can I help today?
          cross_sell:
            show_chat_tooltip: true
            xsell_source: null
          gooddata_advanced_analytics:
            enabled: true
          google_apps:
            has_google_apps: false
            has_google_apps_admin: false
          groups:
            check_group_name_uniqueness: true
          limits:
            attachment_size: 52428800
          localization:
            locale_ids:
            - 1042
          lotus:
            pod_id: 999
            prefer_lotus: true
            reporting: true
          metrics:
            account_size: 100-399
          onboarding:
            checklist_onboarding_version: 2
            onboarding_segments: null
            product_sign_up: null
          routing:
            autorouting_tag: ""
            enabled: false
            max_email_capacity: 0
            max_messaging_capacity: 0
          rule:
            macro_most_used: true
            macro_order: alphabetical
            skill_based_filtered_views: []
            using_skill_based_routing: false
          side_conversations:
            email_channel: false
            msteams_channel: false
            show_in_context_panel: false
            slack_channel: false
            tickets_channel: false
          statistics:
            forum: true
            rule_usage: true
            search: true
          ticket_form:
            raw_ticket_forms_instructions: Please choose your issue below
            ticket_forms_instructions: Please choose your issue below
          ticket_sharing_partners:
            support_addresses:
            - support@grokpetre.zendesk.com
          tickets:
            accepted_new_collaboration_tos: false
            agent_collision: true
            agent_invitation_enabled: true
            agent_ticket_deletion: false
            allow_group_reset: true
            assign_default_organization: true
            assign_tickets_upon_solve: true
            auto_translation_enabled: false
            auto_updated_ccs_followers_rules: false
            chat_sla_enablement: false
            collaboration: true
            comments_public_by_default: true
            email_attachments: false
            emoji_autocompletion: true
            follower_and_email_cc_collaborations: false
            has_color_text: true
            is_first_comment_private_enabled: true
            light_agent_email_ccs_allowed: false
            list_empty_views: true
            list_newest_comments_first: true
            markdown_ticket_comments: false
            maximum_personal_views_to_list: 8
            private_attachments: false
            rich_text_comments: true
            status_hold: false
            tagging: true
            using_skill_based_routing: false
          twitter:
            shorten_url: optional
          user:
            agent_created_welcome_emails: true
            end_user_phone_number_validation: false
            have_gravatars_enabled: true
            language_selection: true
            multiple_organizations: false
            tagging: true
            time_zone_selection: true
          voice:
            agent_confirmation_when_forwarding: true
            agent_wrap_up_after_calls: true
            enabled: true
            logging: true
            maximum_queue_size: 5
            maximum_queue_wait_time: 1
            only_during_business_hours: false
            outbound_enabled: true
            recordings_public: true
            uk_mobile_forwarding: true
    CustomObjectResponse:
      type: object
      properties:
        custom_object:
          allOf:
          - $ref: '#/components/schemas/CustomObject'
          x-ballerina-name: customObject
    DefinitionsResponseDefinitionsConditionsAny:
      type: object
      properties:
        nullable:
          type: boolean
        operators:
          type: array
          items:
            $ref: '#/components/schemas/DefinitionsResponseDefinitionsOperators1'
        repeatable:
          type: boolean
        subject:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/DefinitionsResponseDefinitionsValues1'
        title:
          type: string
        type:
          type: string
        group:
          type: string
    AccountSettingsTwitterObject:
      type: object
      properties:
        shorten_url:
          type: string
          x-ballerina-name: shortenUrl
      description: "X (formerly Twitter) settings. See [X](#x-formerly-twitter)"
    CustomObjectRecordsJobsResponse:
      type: object
      properties:
        job_status:
          allOf:
          - $ref: '#/components/schemas/CustomObjectRecordsJobsResponseJobStatus'
          x-ballerina-name: jobStatus
    IncrementalSkillBasedRouting:
      title: Incremental Skill-based Routing
      type: object
      properties:
        next_page:
          type: string
          description: The URL that should be called to get the next set of results
          readOnly: true
          x-ballerina-name: nextPage
        instance_values:
          type: array
          description: Routing instance values
          items:
            $ref: '#/components/schemas/IncrementalSkillBasedRoutingInstanceValue'
          x-ballerina-name: instanceValues
        attribute_values:
          type: array
          description: Routing attribute values
          items:
            $ref: '#/components/schemas/IncrementalSkillBasedRoutingAttributeValue'
          x-ballerina-name: attributeValues
        count:
          type: integer
          description: The number of results returned for the current request
          readOnly: true
        end_time:
          type: integer
          description: The most recent resource creation time present in this result
            set in Unix epoch time
          readOnly: true
          x-ballerina-name: endTime
        attributes:
          type: array
          description: Routing attributes
          items:
            $ref: '#/components/schemas/IncrementalSkillBasedRoutingAttribute'
    AssigneeFieldAssignableGroupAgentsResponse:
      type: object
      properties:
        next_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: nextPage
        count:
          type: integer
          description: Number of agents listed in `agents` property
        previous_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: previousPage
        agents:
          type: array
          items:
            $ref: '#/components/schemas/AssigneeFieldAssignableAgentObject'
      example:
        agents:
        - avatar_url: https://z3n-example.zendesk.com/system/photos/900005192023/my_profile.png
          id: 6473829100
          name: Joe Smith
        - avatar_url: https://z3n-example.zendesk.com/system/photos/412005192023/my_profile.png
          id: 9182736400
          name: Jane Doe
        - avatar_url: https://z3n-example.zendesk.com/system/photos/887005192023/my_profile.png
          id: 1928373460
          name: Cookie Monster
        count: 3
        next_page: null
        previous_page: null
    SkillBasedRoutingAttributeDefinitions:
      type: object
      properties:
        definitions:
          $ref: '#/components/schemas/SkillBasedRoutingAttributeDefinitionsDefinitions'
    CustomRoleResponse:
      type: object
      properties:
        custom_role:
          allOf:
          - $ref: '#/components/schemas/CustomRoleObject'
          x-ballerina-name: customRole
    UsersRequest:
      required:
      - users
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserInput'
    TriggerDefinitionObject:
      type: object
      properties:
        conditions_any:
          type: array
          items:
            $ref: '#/components/schemas/TriggerConditionDefinitionObjectAny'
          x-ballerina-name: conditionsAny
        conditions_all:
          type: array
          items:
            $ref: '#/components/schemas/TriggerConditionDefinitionObjectAll'
          x-ballerina-name: conditionsAll
        actions:
          type: array
          items:
            $ref: '#/components/schemas/TriggerActionDefinitionObject'
    ListTicketFollowersResponse:
      type: object
      additionalProperties: true
    AttachmentUpdateRequest:
      type: object
      properties:
        attachment:
          $ref: '#/components/schemas/AttachmentUpdateInput'
    DynamicContentResponse:
      type: object
      properties:
        item:
          $ref: '#/components/schemas/DynamicContentObject'
    AccountSettingsLocalizationObject:
      type: object
      properties:
        locale_ids:
          type: array
          items:
            type: integer
          x-ballerina-name: localeIds
      description: "Internationalization configuration settings. See [Localization](#localization)"
    UserForEndUser:
      required:
      - name
      type: object
      properties:
        role:
          type: string
          description: "The role of the user. Possible values: `\"end-user\"`, `\"\
            agent\"`, `\"admin\"`"
        iana_time_zone:
          type: string
          description: The time zone for the user
          readOnly: true
          x-ballerina-name: ianaTimeZone
        shared_phone_number:
          type: boolean
          description: "Whether the `phone` number is shared or not. See [Phone Number](/api-reference/ticketing/users/users/#phone-number)\
            \ in the Users API"
          x-ballerina-name: sharedPhoneNumber
        verified:
          type: boolean
          description: "Any of the user's identities is verified. See [User Identities](/api-reference/ticketing/users/user_identities)"
        created_at:
          type: string
          description: The time the user was created
          format: datetime
          readOnly: true
          x-ballerina-name: createdAt
        photo:
          type: object
          additionalProperties: true
          description: "The user's profile picture represented as an [Attachment](/api-reference/ticketing/tickets/ticket-attachments/)\
            \ object"
        locale:
          type: string
          description: The locale for this user
          readOnly: true
        time_zone:
          type: string
          description: The time-zone of this user
          x-ballerina-name: timeZone
        url:
          type: string
          description: The API url of this user
          readOnly: true
        locale_id:
          type: integer
          description: The language identifier for this user
          x-ballerina-name: localeId
        updated_at:
          type: string
          description: The time of the last update of the user
          format: datetime
          readOnly: true
          x-ballerina-name: updatedAt
        phone:
          type: string
          description: "The primary phone number of this user. See [Phone Number](/api-reference/ticketing/users/users/#phone-number)\
            \ in the Users API"
        organization_id:
          type: integer
          description: "The id of the user's organization. If the user has more than\
            \ one [organization memberships](/api-reference/ticketing/organizations/organization_memberships/),\
            \ the id of the user's default organization. If updating, see [Organization\
            \ ID](/api-reference/ticketing/users/users/#organization-id)"
          x-ballerina-name: organizationId
        name:
          type: string
          description: The name of the user
        id:
          type: integer
          description: Automatically assigned when creating users
          readOnly: true
        email:
          type: string
          description: "The primary email address of this user. If the primary email\
            \ address is not [verified](https://support.zendesk.com/hc/en-us/articles/4408886752410),\
            \ the secondary email address is used"
    SkillBasedRoutingTicketFulfilledResponse:
      type: object
      properties:
        fulfilled_ticket_ids:
          type: array
          items:
            type: integer
          x-ballerina-name: fulfilledTicketIds
    QueueObjectPrimaryGroupsGroups:
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
    BrandUpdateRequest:
      type: object
      properties:
        brand:
          $ref: '#/components/schemas/BrandObject'
    TicketChatCommentRedactionResponseChatEvent:
      type: object
      properties:
        id:
          type: integer
          description: Id assigned to the chat event object
          readOnly: true
        type:
          type: string
          description: Type of chat event
          readOnly: true
        value:
          $ref: '#/components/schemas/TicketChatCommentRedactionResponseChatEventValue'
      description: Chat event object
      readOnly: true
    OrganizationFieldsResponse:
      type: object
      properties:
        next_page:
          type: string
          description: URL of the next page
          nullable: true
          readOnly: true
          x-ballerina-name: nextPage
        organization_fields:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationFieldObject'
          x-ballerina-name: organizationFields
        count:
          type: integer
          description: Total count of records retrieved
          readOnly: true
        previous_page:
          type: string
          description: URL of the previous page
          nullable: true
          readOnly: true
          x-ballerina-name: previousPage
    AccountSettingsCrossSellObject:
      type: object
      properties:
        show_chat_tooltip:
          type: boolean
          x-ballerina-name: showChatTooltip
        xsell_source:
          type: string
          nullable: true
          x-ballerina-name: xsellSource
      description: Cross Sell settings
    DeletedUsersResponse:
      type: object
      properties:
        deleted_users:
          type: array
          items:
            $ref: '#/components/schemas/DeletedUserObject'
          x-ballerina-name: deletedUsers
    GroupSLAPolicyFilterObject:
      type: object
      properties:
        all:
          type: array
          items:
            $ref: '#/components/schemas/GroupSLAPolicyFilterConditionObject'
      description: "An object that describes the conditions a ticket must match for\
        \ a Group SLA policy to be applied to the ticket. See [Filter](#filter)"
    SuspendedTicketsAttachmentsResponse:
      type: object
      properties:
        upload:
          $ref: '#/components/schemas/SuspendedTicketsAttachmentsResponseUpload'
    TwitterChannelObject:
      title: Monitored Twitter handles
      required:
      - id
      - screen_name
      - twitter_user_id
      type: object
      properties:
        can_reply:
          type: boolean
          description: If replies are allowed for this handle
          readOnly: true
          x-ballerina-name: canReply
        twitter_user_id:
          type: integer
          description: The country's code
          readOnly: true
          x-ballerina-name: twitterUserId
        avatar_url:
          type: string
          description: The profile image url of the handle
          readOnly: true
          x-ballerina-name: avatarUrl
        updated_at:
          type: string
          description: The time of the last update of the handle
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        screen_name:
          type: string
          description: The Twitter handle
          readOnly: true
          x-ballerina-name: screenName
        allow_reply:
          type: boolean
          description: If replies are allowed for this handle
          readOnly: true
          x-ballerina-name: allowReply
        name:
          type: string
          description: The profile name of the handle
          readOnly: true
        created_at:
          type: string
          description: The time the handle was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        id:
          type: integer
          description: Automatically assigned upon creation
          readOnly: true
        brand_id:
          type: integer
          description: What brand the handle is associated with
          readOnly: true
          x-ballerina-name: brandId
      example:
        created_at: 2009-05-13T00:07:08Z
        id: 211
        screen_name: '@zendesk'
        twitter_user_id: 67462376832
        updated_at: 2011-07-22T00:11:12Z
    TriggerRevisionResponseTriggerRevisionSnapshot:
      type: object
      properties:
        active:
          type: boolean
        description:
          type: string
          nullable: true
        conditions:
          $ref: '#/components/schemas/TriggerConditionsObject'
        title:
          type: string
        actions:
          type: array
          items:
            $ref: '#/components/schemas/TriggerActionObject'
    GroupSLAPolicyFilterConditionObject:
      type: object
      properties:
        field:
          type: string
          description: The name of a ticket field
        value:
          type: array
          description: The value of a ticket field
          items:
            $ref: '#/components/schemas/GroupSLAPolicyFilterConditionObjectValue'
        operator:
          type: string
          description: A comparison operator
    SharingAgreementResponse:
      type: object
      properties:
        sharing_agreement:
          allOf:
          - $ref: '#/components/schemas/SharingAgreementObject'
          x-ballerina-name: sharingAgreement
    QueueObjectDefinition:
      type: object
      properties:
        all:
          type: array
          items:
            $ref: '#/components/schemas/QueueObjectDefinitionAll'
        any:
          type: array
          items:
            $ref: '#/components/schemas/QueueObjectDefinitionAny'
      description: Conditions when queue could be applied
    SuspendedTicketsAttachmentsResponseUpload:
      type: object
      properties:
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentObject'
        token:
          type: string
          description: Token for subsequent request
          readOnly: true
    QueueObject:
      type: object
      properties:
        updated_at:
          type: string
          description: The time of the queue's last update
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        primary_groups:
          allOf:
          - $ref: '#/components/schemas/QueueObjectPrimaryGroups'
          x-ballerina-name: primaryGroups
        name:
          type: string
          description: The name of the queue
        created_at:
          type: string
          description: The time the queue was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        description:
          type: string
          description: The description of the queue
        definition:
          $ref: '#/components/schemas/QueueObjectDefinition'
        id:
          type: string
          description: Automatically assigned when creating queue
          readOnly: true
        priority:
          type: integer
          description: The queue-applied priority
        url:
          type: string
          description: The API URL of the queue
          readOnly: true
        order:
          type: integer
          description: The queue-applied order
        secondary_groups:
          allOf:
          - $ref: '#/components/schemas/QueueObjectSecondaryGroups'
          x-ballerina-name: secondaryGroups
      example:
        created_at: 2023-11-27T09:03:59Z
        definition:
          all:
          - field: priority
            operator: is
            value: urgent
          any: []
        description: Queue description
        id: 01HG80ATNNZK1N7XRFVKX48XD6
        name: New queue with valid definition
        order: 1
        primary_groups:
          count: 2
          groups:
          - id: 6784729637757
            name: EWR
          - id: 5399674286077
            name: test
        priority: 1
        secondary_groups:
          count: 0
          groups: []
        updated_at: 2023-11-27T09:03:59Z
        url: https://company.zendesk.com/api/v2/queues/01HG80ATNNZK1N7XRFVKX48XD6.json
    CustomObjectRecordsResponseLinks:
      required:
      - next
      - prev
      type: object
      properties:
        next:
          type: string
          nullable: true
        prev:
          type: string
          nullable: true
    TriggerWithCategoryRequest:
      type: object
      properties:
        trigger:
          allOf:
          - $ref: '#/components/schemas/TriggerObject'
    MacroApplyTicketResponseResultTicket:
      type: object
      properties:
        group_id:
          type: integer
          x-ballerina-name: groupId
        comment:
          $ref: '#/components/schemas/MacroApplyTicketResponseResultTicketComment'
        id:
          type: integer
        fields:
          $ref: '#/components/schemas/MacroApplyTicketResponseResultTicketFields'
        url:
          type: string
        assignee_id:
          type: integer
          x-ballerina-name: assigneeId
    TicketFieldCountResponseCount:
      type: object
      properties:
        refreshed_at:
          type: string
          format: date-time
          x-ballerina-name: refreshedAt
        value:
          type: integer
    GroupsResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupObject'
    AuditLogObject:
      type: object
      properties:
        change_description:
          type: string
          description: The description of the change that occurred
          readOnly: true
          x-ballerina-name: changeDescription
        source_label:
          type: string
          description: The name of the item being audited
          readOnly: true
          x-ballerina-name: sourceLabel
        actor_name:
          type: string
          description: Name of the user or system that initiated the change
          readOnly: true
          x-ballerina-name: actorName
        action:
          type: string
          description: |
            Type of change made. Possible values are "create", "destroy", "exported", "login", and "update"
          readOnly: true
        created_at:
          type: string
          description: The time the audit got created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        source_type:
          type: string
          description: |
            Item type being audited. Typically describes the system where the change
            was initiated. Possible values vary based on your account's Zendesk
            products and activity. Common values include "apitoken", "rule", "ticket",
            "user", and "zendesk/app_market/app". The "rule" value is used for
            [automations](https://support.zendesk.com/hc/en-us/articles/4408832701850),
            [macros](https://support.zendesk.com/hc/en-us/articles/4408844187034),
            [triggers](https://support.zendesk.com/hc/en-us/articles/4408822236058),
            [views](https://support.zendesk.com/hc/en-us/articles/4408888828570),
            and other automated business rules
          readOnly: true
          x-ballerina-name: sourceType
        actor_id:
          type: integer
          description: id of the user or system that initiated the change
          readOnly: true
          x-ballerina-name: actorId
        id:
          type: integer
          description: The id automatically assigned upon creation
          readOnly: true
        ip_address:
          type: string
          description: The IP address of the user doing the audit
          readOnly: true
          x-ballerina-name: ipAddress
        source_id:
          type: integer
          description: The id of the item being audited
          readOnly: true
          x-ballerina-name: sourceId
        action_label:
          type: string
          description: Localized string of action field
          readOnly: true
          x-ballerina-name: actionLabel
        url:
          type: string
          description: The URL to access the audit log
          readOnly: true
      example:
        action: update
        action_label: Updated
        actor_id: 1234
        actor_name: Sameer Patel
        change_description: Role changed from Administrator to End User
        created_at: 2012-03-05T11:32:44Z
        id: 498483
        ip_address: 209.119.38.228
        source_id: 3456
        source_label: John Doe
        source_type: user
        url: https://company.zendesk.com/api/v2/audit_logs/498483.json
    ActivityResponse:
      type: object
      properties:
        activity:
          $ref: '#/components/schemas/ActivityObject'
      example:
        activity:
          actor:
            active: true
            alias: ""
            created_at: 2020-11-17T00:32:12Z
            custom_role_id: null
            default_group_id: 1873
            details: ""
            email: cgoddard+ted@zendesk.com
            external_id: null
            iana_time_zone: America/Juneau
            id: 158488612
            last_login_at: 2020-11-17T00:33:44Z
            locale: en-gb
            locale_id: 5
            moderator: true
            name: Tedd
            notes: ""
            only_private_comments: false
            organization_id: null
            phone: null
            photo: null
            report_csv: true
            restricted_agent: false
            role: admin
            role_type: null
            shared: false
            shared_agent: false
            shared_phone_number: null
            signature: ""
            suspended: false
            tags: []
            ticket_restriction: null
            time_zone: Alaska
            two_factor_auth_enabled: null
            updated_at: 2020-11-17T00:34:38Z
            url: https://example.zendesk.com/api/v2/users/158488612.json
            user_fields:
              its_remember_september: null
              skittles: null
              user_field_1: null
            verified: true
          actor_id: 158488612
          created_at: 2020-11-17T00:34:40Z
          id: 29183462
          object:
            ticket:
              id: 1521
              subject: test
          target:
            ticket:
              id: 1521
              subject: test
          title: "Tedd assigned ticket #1521 to you."
          updated_at: 2020-11-17T00:34:40Z
          url: https://example.zendesk.com/api/v2/activities/29183462.json
          user:
            active: true
            alias: test
            created_at: 2017-08-14T20:13:53Z
            custom_role_id: null
            default_group_id: 1873
            details: ""
            email: user@zendesk.com
            external_id: oev7jj
            iana_time_zone: Pacific/Pago_Pago
            id: 3343
            last_login_at: 2020-11-16T22:57:45Z
            locale: en-gb
            locale_id: 5
            moderator: true
            name: Samwise Gamgee
            notes: test
            only_private_comments: false
            organization_id: 1873
            phone: null
            photo:
              content_type: image/gif
              content_url: https://example.zendesk.com/system/photos/8730791/1f84950b8d7949b3.gif
              deleted: false
              file_name: 1f84950b8d7949b3.gif
              height: 80
              id: 8730791
              inline: false
              mapped_content_url: https://example.zendesk.com/system/photos/8730791/1f84950b8d7949b3.gif
              size: 4566
              thumbnails:
              - content_type: image/gif
                content_url: https://example.zendesk.com/system/photos/8730801/1f84950b8d7949b3_thumb.gif
                deleted: false
                file_name: 1f84950b8d7949b3_thumb.gif
                height: 32
                id: 8730801
                inline: false
                mapped_content_url: https://example.zendesk.com/system/photos/8730801/1f84950b8d7949b3_thumb.gif
                size: 1517
                url: https://example.zendesk.com/api/v2/attachments/8730801.json
                width: 32
              url: https://example.zendesk.com/api/v2/attachments/8730791.json
              width: 80
            report_csv: true
            restricted_agent: false
            role: admin
            role_type: null
            shared: false
            shared_agent: false
            shared_phone_number: null
            signature: test
            suspended: false
            tags:
            - "101"
            ticket_restriction: null
            time_zone: American Samoa
            two_factor_auth_enabled: null
            updated_at: 2020-11-17T00:33:55Z
            url: https://example.zendesk.com/api/v2/users/3343.json
            user_fields:
              its_remember_september: null
              skittles: 2018-09-14T00:00:00+00:00
              user_field_1: "101"
            verified: true
          user_id: 3343
          verb: tickets.assignment
    CustomObjectRecordsUpsertRequest:
      type: object
      properties:
        custom_object_record:
          allOf:
          - $ref: '#/components/schemas/CustomObjectRecord'
          x-ballerina-name: customObjectRecord
    CustomStatusUpdateRequest:
      type: object
      properties:
        custom_status:
          allOf:
          - $ref: '#/components/schemas/CustomStatusUpdateInput'
          x-ballerina-name: customStatus
    SLAPolicyFilterDefinitionResponseDefinitionsValuesList:
      type: object
      properties:
        title:
          type: string
        value:
          type: string
          nullable: true
    TicketsResponse:
      type: object
      properties:
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/TicketObject'
    ViewObject:
      type: object
      properties:
        execution:
          type: object
          additionalProperties: true
          description: "Describes how the view should be executed. See [Execution](#execution)"
        default:
          type: boolean
          description: "If true, the view is a default view"
          readOnly: true
        updated_at:
          type: string
          description: The time the view was last updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        restriction:
          type: object
          additionalProperties: true
          description: Who may access this account. Is null when everyone in the account
            can access it
        active:
          type: boolean
          description: Whether the view is active
        created_at:
          type: string
          description: The time the view was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        description:
          type: string
          description: The description of the view
        id:
          type: integer
          description: Automatically assigned when created
          readOnly: true
        position:
          type: integer
          description: The position of the view
        conditions:
          type: object
          additionalProperties: true
          description: "Describes how the view is constructed. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference)"
        title:
          type: string
          description: The title of the view
      example:
        active: true
        conditions:
          all:
          - field: status
            operator: less_than
            value: solved
          - field: assignee_id
            operator: is
            value: "296220096"
          any: []
        default: false
        description: View for recent tickets
        execution:
          columns:
          - id: status
            title: Status
          - id: updated
            title: Updated
          - id: 5
            title: Account
            type: text
            url: https://example.zendesk.com/api/v2/ticket_fields/5.json
          group:
            id: status
            order: desc
            title: Status
          sort:
            id: updated
            order: desc
            title: Updated
        id: 25
        position: 8
        restriction:
          id: 4
          type: User
        title: Tickets updated <12 Hours
    SuspendedTicketResponse:
      type: object
      properties:
        suspended_ticket:
          type: array
          items:
            $ref: '#/components/schemas/SuspendedTicketObject'
          x-ballerina-name: suspendedTicket
    ConditionsObject:
      type: object
      properties:
        all:
          type: array
          description: Logical AND. Tickets must fulfill all of the conditions to
            be considered matching
          items:
            $ref: '#/components/schemas/ConditionObject'
        any:
          type: array
          description: Logical OR. Tickets may satisfy any of the conditions to be
            considered matching
          items:
            $ref: '#/components/schemas/ConditionObject'
      description: "An object that describes the conditions under which the automation\
        \ will execute. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference)"
    OrganizationsRelatedResponse:
      type: object
      properties:
        organization_related:
          allOf:
          - $ref: '#/components/schemas/OrganizationMetadataObject'
          x-ballerina-name: organizationRelated
    SearchExportResponseLinks:
      type: object
      properties:
        next:
          type: string
          description: The url to the next entry via the cursor
          nullable: true
          readOnly: true
        prev:
          type: string
          description: The url to the previous entry via the cursor
          nullable: true
          readOnly: true
      description: The links to the previous and next entries via the cursor ids in
        the metadata
    AccountSettingsSideConversationsObject:
      type: object
      properties:
        tickets_channel:
          type: boolean
          x-ballerina-name: ticketsChannel
        slack_channel:
          type: boolean
          x-ballerina-name: slackChannel
        email_channel:
          type: boolean
          x-ballerina-name: emailChannel
        show_in_context_panel:
          type: boolean
          x-ballerina-name: showInContextPanel
        msteams_channel:
          type: boolean
          x-ballerina-name: msteamsChannel
      description: Side conversations settings
    GroupSLAPoliciesResponse:
      type: object
      properties:
        next_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: nextPage
        count:
          type: integer
          readOnly: true
        group_sla_policies:
          type: array
          items:
            $ref: '#/components/schemas/GroupSLAPolicyObject'
          x-ballerina-name: groupSlaPolicies
        previous_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: previousPage
    ProblemsAutocompleteBody:
      type: object
      properties:
        text:
          type: string
          description: The text to search for
    AccountSettingsApiObject:
      type: object
      properties:
        api_token_access:
          type: string
          x-ballerina-name: apiTokenAccess
        accepted_api_agreement:
          type: boolean
          x-ballerina-name: acceptedApiAgreement
        api_password_access:
          type: string
          x-ballerina-name: apiPasswordAccess
      description: "API configuration options. See [API](#api)"
    OrganizationMembershipResponse:
      type: object
      properties:
        organization_membership:
          allOf:
          - $ref: '#/components/schemas/OrganizationMembershipObject'
          x-ballerina-name: organizationMembership
    AccountSettingsUserObject:
      type: object
      properties:
        tagging:
          type: boolean
        end_user_phone_number_validation:
          type: boolean
          x-ballerina-name: endUserPhoneNumberValidation
        agent_created_welcome_emails:
          type: boolean
          x-ballerina-name: agentCreatedWelcomeEmails
        language_selection:
          type: boolean
          x-ballerina-name: languageSelection
        multiple_organizations:
          type: boolean
          x-ballerina-name: multipleOrganizations
        time_zone_selection:
          type: boolean
          x-ballerina-name: timeZoneSelection
        have_gravatars_enabled:
          type: boolean
          x-ballerina-name: haveGravatarsEnabled
      description: "User settings. See [Users](#users)"
    DefinitionsResponseDefinitionsValues1:
      type: object
      properties:
        title:
          type: string
        value:
          type: string
        enabled:
          type: boolean
    GroupsCountObject:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/GroupsCountObjectCount'
    ResourceCollectionObjectResources:
      type: object
      properties:
        identifier:
          type: string
        deleted:
          type: boolean
        resource_id:
          type: integer
          x-ballerina-name: resourceId
        type:
          type: string
    MacroAttachmentObject:
      type: object
      properties:
        filename:
          type: string
          description: The name of the image file
          readOnly: true
        content_type:
          type: string
          description: "The content type of the image. Example value: \"image/png\""
          readOnly: true
          x-ballerina-name: contentType
        size:
          type: integer
          description: The size of the image file in bytes
          readOnly: true
        created_at:
          type: string
          description: The time when this attachment was created
          format: date-time
          x-ballerina-name: createdAt
        content_url:
          type: string
          description: A full URL where the attachment image file can be downloaded
          readOnly: true
          x-ballerina-name: contentUrl
        id:
          type: integer
          description: Automatically assigned when created
          readOnly: true
    CustomObjectsResponse:
      type: object
      properties:
        custom_objects:
          type: array
          items:
            $ref: '#/components/schemas/CustomObject'
          x-ballerina-name: customObjects
    UsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserObject'
    OrganizationSubscriptionsResponseAllOf2:
      type: object
      properties:
        organization_subscriptions:
          type: array
          description: An array of organization subscriptions
          items:
            $ref: '#/components/schemas/OrganizationSubscriptionObject'
          x-ballerina-name: organizationSubscriptions
    CustomObjectRecordsResponseMeta:
      required:
      - after_cursor
      - before_cursor
      - has_more
      type: object
      properties:
        after_cursor:
          type: string
          nullable: true
          x-ballerina-name: afterCursor
        before_cursor:
          type: string
          nullable: true
          x-ballerina-name: beforeCursor
        has_more:
          type: boolean
          x-ballerina-name: hasMore
    InlineResponse201:
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/WorkspaceObject'
    InlineResponse200:
      type: object
      properties:
        success:
          type: boolean
    GroupSLAPolicyFilterDefinitionResponse:
      type: object
      properties:
        definitions:
          $ref: '#/components/schemas/GroupSLAPolicyFilterDefinitionResponseDefinitions'
    ViaObjectSourceFrom:
      type: object
      properties:
        address:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        id:
          type: integer
          nullable: true
        title:
          type: string
          nullable: true
    PushNotificationDevicesRequest:
      type: object
      properties:
        push_notification_devices:
          allOf:
          - $ref: '#/components/schemas/PushNotificationDevicesInput'
          x-ballerina-name: pushNotificationDevices
    GroupSLAPolicyFilterDefinitionResponseDefinitionsAll:
      type: object
      properties:
        operators:
          type: array
          items:
            $ref: '#/components/schemas/GroupSLAPolicyFilterDefinitionResponseDefinitionsOperators'
        values:
          $ref: '#/components/schemas/GroupSLAPolicyFilterDefinitionResponseDefinitionsValues'
        title:
          type: string
        value:
          type: string
        group:
          type: string
    CustomStatusCreateRequest:
      type: object
      properties:
        custom_status:
          allOf:
          - $ref: '#/components/schemas/CustomStatusCreateInput'
          x-ballerina-name: customStatus
    SLAPolicyFilterObject:
      type: object
      properties:
        all:
          type: array
          items:
            $ref: '#/components/schemas/SLAPolicyFilterConditionObject'
        any:
          type: array
          items:
            $ref: '#/components/schemas/SLAPolicyFilterConditionObject'
      description: "An object that describes the conditions that a ticket must match\
        \ in order for an SLA policy to be applied to that ticket. See [Filter](#filter)"
    AssigneeFieldAssignableSearchAgentObject:
      type: object
      properties:
        group_id:
          type: integer
          description: Agent's Group ID
          x-ballerina-name: groupId
        name:
          type: string
          description: Name of the agent
        id:
          type: integer
          description: Agent ID
        photo_url:
          type: string
          description: URL of Avatar
          nullable: true
          x-ballerina-name: photoUrl
        group:
          type: string
          description: Name of the agent's group
      example:
        group: Engineering
        group_id: 9182736455
        id: 6473829100
        name: Joe Smith
        photo_url: https://z3n-example.zendesk.com/system/photos/900005192023/my_profile.png
    TargetTwitter:
      type: object
      properties:
        secret:
          type: string
          description: only writable
        token:
          type: string
    DynamicContentsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DynamicContentObject'
    QueueObjectPrimaryGroups:
      type: object
      properties:
        count:
          type: integer
        groups:
          type: array
          items:
            $ref: '#/components/schemas/QueueObjectPrimaryGroupsGroups'
      description: Primary group ids linked to the queue
    TriggerCategoryId:
      type: string
    TargetEmail:
      required:
      - email
      - subject
      type: object
      properties:
        subject:
          type: string
        email:
          type: string
    AuditObjectEvents:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        body:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
        value:
          oneOf:
          - type: string
          - type: integer
        field_name:
          type: string
          readOnly: true
          x-ballerina-name: fieldName
    JobStatusesResponse:
      required:
      - job_statuses
      type: object
      properties:
        job_statuses:
          type: array
          items:
            $ref: '#/components/schemas/JobStatusObject'
          x-ballerina-name: jobStatuses
    Error:
      required:
      - code
      - title
      type: object
      properties:
        code:
          type: string
        links:
          type: object
        detail:
          type: string
        id:
          type: string
        source:
          type: object
        title:
          type: string
        status:
          type: string
    TicketMetricEventUpdateStatusObject:
      title: Ticket Metric Event
      type: object
      allOf:
      - $ref: '#/components/schemas/TicketMetricEventBaseObject'
      - $ref: '#/components/schemas/TicketMetricEventUpdateStatusObjectAllOf2'
    AuditLogResponse:
      type: object
      properties:
        audit_log:
          allOf:
          - $ref: '#/components/schemas/AuditLogObject'
          x-ballerina-name: auditLog
    ResourceCollectionResponse:
      type: object
      properties:
        resource_collection:
          allOf:
          - $ref: '#/components/schemas/ResourceCollectionObject'
          x-ballerina-name: resourceCollection
    TargetObject:
      type: object
      additionalProperties: true
      example:
        active: false
        created_at: 2012-02-20T22:55:29Z
        id: 88335
        title: basecamp target
        type: basecamp_target
        url: https://company.zendesk.com/api/v2/targets/88335.json
      allOf:
      - $ref: '#/components/schemas/TargetCommonFields'
    SystemFieldOptionObject:
      type: object
      properties:
        name:
          type: string
          description: Name of the system field option
          readOnly: true
        value:
          type: string
          description: Value of the system field option
          readOnly: true
    QueuesResponse:
      type: object
      properties:
        queues:
          type: array
          items:
            $ref: '#/components/schemas/QueueObject'
    AuditLogsResponse:
      type: object
      properties:
        audit_logs:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogObject'
          x-ballerina-name: auditLogs
    TagListTagObject:
      type: object
      properties:
        count:
          type: integer
          description: The number of tags
          readOnly: true
        name:
          type: string
          description: A name for the tag
    CurrentUserResponse:
      type: object
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/UserObject'
    ViewResponse:
      type: object
      properties:
        view:
          $ref: '#/components/schemas/ViewObject'
        columns:
          type: array
          items:
            type: object
            additionalProperties: true
        groups:
          type: array
          items:
            type: object
            additionalProperties: true
        rows:
          type: array
          items:
            type: object
            additionalProperties: true
    TriggerConditionDefinitionObjectAllOperators:
      type: object
      properties:
        terminal:
          type: boolean
        title:
          type: string
        value:
          type: string
    CustomObjectFieldsResponse:
      type: object
      properties:
        custom_object_fields:
          type: array
          items:
            $ref: '#/components/schemas/CustomObjectField'
          x-ballerina-name: customObjectFields
    UserIdentitiesResponse:
      type: object
      properties:
        identities:
          type: array
          items:
            $ref: '#/components/schemas/UserIdentityObject'
    TriggerCategory:
      type: object
      properties:
        updated_at:
          type: string
          readOnly: true
          x-ballerina-name: updatedAt
        name:
          type: string
        created_at:
          type: string
          readOnly: true
          x-ballerina-name: createdAt
        id:
          type: string
          readOnly: true
        position:
          type: integer
          format: int64
    TriggerResponse:
      type: object
      properties:
        trigger:
          $ref: '#/components/schemas/TriggerObject'
    DynamicContentObject:
      title: Dynamic Content Items
      required:
      - default_locale_id
      - name
      - variants
      type: object
      properties:
        outdated:
          type: boolean
          description: Indicates the item has outdated variants within it
          readOnly: true
        updated_at:
          type: string
          description: When this record was last updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        default_locale_id:
          type: integer
          description: "The default locale for the item. Must be one of the [locales\
            \ the account has active](/api-reference/ticketing/account-configuration/locales/#list-locales)"
          x-ballerina-name: defaultLocaleId
        name:
          type: string
          description: The unique name of the item
        created_at:
          type: string
          description: When this record was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        id:
          type: integer
          description: Automatically assigned when creating items
          readOnly: true
        placeholder:
          type: string
          description: "Automatically generated placeholder for the item, derived\
            \ from name"
          readOnly: true
        variants:
          type: array
          description: "All variants within this item. See [Dynamic Content Item Variants](/api-reference/ticketing/ticket-management/dynamic_content_item_variants/)"
          items:
            $ref: '#/components/schemas/DynamicContentVariantObject'
        url:
          type: string
          description: The API url of this item
          readOnly: true
    RequestObject:
      required:
      - subject
      type: object
      properties:
        email_cc_ids:
          type: array
          description: "The ids of users who are currently email CCs on the ticket.\
            \ See [CCs and followers resources](https://support.zendesk.com/hc/en-us/articles/360020585233)\
            \ in the Support Help Center"
          readOnly: true
          items:
            type: integer
          x-ballerina-name: emailCcIds
        subject:
          type: string
          description: The value of the subject field for this request if the subject
            field is visible to end users; a truncated version of the description
            otherwise
        created_at:
          type: string
          description: When this record was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        custom_status_id:
          type: integer
          description: The custom ticket status id of the ticket
          x-ballerina-name: customStatusId
        description:
          type: string
          description: "Read-only first comment on the request. When [creating a request](#create-request),\
            \ use `comment` to set the description"
          readOnly: true
        solved:
          type: boolean
          description: "Whether or not request is solved (an end user can set this\
            \ if \"can_be_solved_by_me\", above, is true for that user)"
        type:
          type: string
          description: "The type of the request, \"question\", \"incident\", \"problem\"\
            , \"task\""
        via:
          $ref: '#/components/schemas/TicketAuditViaObject'
        updated_at:
          type: string
          description: When this record last got updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        due_at:
          type: string
          description: When the task is due (only applies if the request is of type
            "task")
          format: date-time
          x-ballerina-name: dueAt
        id:
          type: integer
          description: Automatically assigned when creating requests
          readOnly: true
        assignee_id:
          type: integer
          description: The id of the assignee if the field is visible to end users
          readOnly: true
          x-ballerina-name: assigneeId
        custom_fields:
          type: array
          description: "Custom fields for the request. See [Setting custom field values](/api-reference/ticketing/tickets/tickets/#setting-custom-field-values)\
            \ in the Tickets doc"
          items:
            $ref: '#/components/schemas/RequestObjectCustomFields'
          x-ballerina-name: customFields
        collaborator_ids:
          type: array
          description: The ids of users currently CC'ed on the ticket
          readOnly: true
          items:
            type: integer
          x-ballerina-name: collaboratorIds
        priority:
          type: string
          description: "The priority of the request, \"low\", \"normal\", \"high\"\
            , \"urgent\""
        url:
          type: string
          description: The API url of this request
          readOnly: true
        ticket_form_id:
          type: integer
          description: The numeric id of the ticket form associated with this request
            if the form is visible to end users - only applicable for enterprise accounts
          x-ballerina-name: ticketFormId
        followup_source_id:
          type: integer
          description: "The id of the original ticket if this request is a follow-up\
            \ ticket. See [Create Request](#create-request)"
          readOnly: true
          x-ballerina-name: followupSourceId
        group_id:
          type: integer
          description: The id of the assigned group if the field is visible to end
            users
          readOnly: true
          x-ballerina-name: groupId
        can_be_solved_by_me:
          type: boolean
          description: "If true, an end user can mark the request as solved. See [Update\
            \ Request](/api-reference/ticketing/tickets/ticket-requests/#update-request)"
          readOnly: true
          x-ballerina-name: canBeSolvedByMe
        organization_id:
          type: integer
          description: The organization of the requester
          readOnly: true
          x-ballerina-name: organizationId
        is_public:
          type: boolean
          description: "Is true if any comments are public, false otherwise"
          readOnly: true
          x-ballerina-name: isPublic
        recipient:
          type: string
          description: The original recipient e-mail address of the request
        requester_id:
          type: integer
          description: The id of the requester
          readOnly: true
          x-ballerina-name: requesterId
        status:
          type: string
          description: "The state of the request, \"new\", \"open\", \"pending\",\
            \ \"hold\", \"solved\", \"closed\""
      example:
        assignee_id: 72983
        can_be_solved_by_me: false
        collaborator_ids: []
        created_at: 2009-07-20T22:55:29Z
        description: The fire is very colorful.
        due_at: 2011-05-24T12:00:00Z
        group_id: 8665
        id: 35436
        organization_id: 509974
        priority: normal
        requester_id: 1462
        status: open
        subject: "Help, my printer is on fire!"
        ticket_form_id: 2
        type: problem
        updated_at: 2011-05-05T10:38:52Z
        url: https://company.zendesk.com/api/v2/requests/35436.json
        via:
          channel: web
    TicketAuditsResponse:
      type: object
      properties:
        before_url:
          type: string
          readOnly: true
          x-ballerina-name: beforeUrl
        after_cursor:
          type: string
          readOnly: true
          x-ballerina-name: afterCursor
        after_url:
          type: string
          readOnly: true
          x-ballerina-name: afterUrl
        before_cursor:
          type: string
          readOnly: true
          x-ballerina-name: beforeCursor
        audits:
          type: array
          items:
            $ref: '#/components/schemas/TicketAuditObject'
    OrganizationMembershipsResponse:
      type: object
      properties:
        organization_memberships:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationMembershipObject'
          x-ballerina-name: organizationMemberships
    TriggerRevisionResponseTriggerRevision:
      type: object
      properties:
        created_at:
          type: string
          x-ballerina-name: createdAt
        id:
          type: integer
        author_id:
          type: integer
          x-ballerina-name: authorId
        snapshot:
          $ref: '#/components/schemas/TriggerRevisionResponseTriggerRevisionSnapshot'
        url:
          type: string
    SessionObject:
      required:
      - id
      type: object
      properties:
        user_id:
          type: integer
          description: The id of the user
          nullable: true
          x-ballerina-name: userId
        authenticated_at:
          type: string
          description: When the session was created
          nullable: true
          x-ballerina-name: authenticatedAt
        id:
          type: integer
          description: Automatically assigned when the session is created
        last_seen_at:
          type: string
          description: The last approximate time this session was seen. This does
            not update on every request
          nullable: true
          x-ballerina-name: lastSeenAt
        url:
          type: string
          description: The API URL of this session
          nullable: true
      example:
        authenticated_at: 2014-11-18T17:24:29Z
        id: 3432
        last_seen_at: 2014-11-18T17:30:52Z
        url: https://company.zendesk.com/api/v2/users/12345/sessions/3432.json
        user_id: 12345
    RelationshipFilterDefinitionResponse:
      type: object
      properties:
        definitions:
          $ref: '#/components/schemas/RelationshipFilterDefinition'
    SatisfactionReasonObject:
      required:
      - value
      type: object
      properties:
        reason_code:
          type: integer
          description: "An account-level code for referencing the reason. Custom reasons\
            \ are assigned an auto-incrementing integer (non-system reason codes begin\
            \ at 1000). See [Reason codes](#reason-codes)"
          readOnly: true
          x-ballerina-name: reasonCode
        raw_value:
          type: string
          description: "The dynamic content placeholder, if present, or the current\
            \ \"value\", if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/)"
          x-ballerina-name: rawValue
        updated_at:
          type: string
          description: The time the reason was updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        created_at:
          type: string
          description: The time the reason was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        id:
          type: integer
          description: Automatically assigned upon creation
          readOnly: true
        deleted_at:
          type: string
          description: The time the reason was deleted
          format: date-time
          readOnly: true
          x-ballerina-name: deletedAt
        value:
          type: string
          description: Translated value of the reason in the account locale
        url:
          type: string
          description: API URL for the resource
          readOnly: true
      example:
        created_at: 2011-07-20T22:55:29Z
        deleted_at: 2012-03-12T12:45:32Z
        id: 35436
        raw_value: "{{dc.reason_code_1003}}"
        reason_code: 1003
        updated_at: 2011-07-20T22:55:29Z
        url: https://example.zendesk.com/api/v2/satisfaction_reasons/35436.json
        value: Agent did not respond quickly
    TagCountObject:
      type: object
      properties:
        refreshed_at:
          type: string
          description: The time that the count value was last refreshed
          readOnly: true
          x-ballerina-name: refreshedAt
        value:
          type: integer
          description: The count of tags created in the last 24 hours
          readOnly: true
    ActivitiesResponse:
      type: object
      properties:
        next_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: nextPage
        actors:
          type: array
          readOnly: true
          items:
            type: object
            additionalProperties: true
        activities:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/ActivityObject'
        count:
          type: integer
          readOnly: true
        previous_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: previousPage
        users:
          type: array
          readOnly: true
          items:
            type: object
            additionalProperties: true
      example:
        activities:
        - actor:
            active: true
            alias: ""
            created_at: 2020-11-17T00:32:12Z
            custom_role_id: null
            default_group_id: 1873
            details: ""
            email: cgoddard+ted@zendesk.com
            external_id: null
            iana_time_zone: America/Juneau
            id: 158488612
            last_login_at: 2020-11-17T00:33:44Z
            locale: en-gb
            locale_id: 5
            moderator: true
            name: Tedd
            notes: ""
            only_private_comments: false
            organization_id: null
            phone: null
            photo: null
            report_csv: true
            restricted_agent: false
            role: admin
            role_type: null
            shared: false
            shared_agent: false
            shared_phone_number: null
            signature: ""
            suspended: false
            tags: []
            ticket_restriction: null
            time_zone: Alaska
            two_factor_auth_enabled: null
            updated_at: 2020-11-17T00:34:38Z
            url: https://example.zendesk.com/api/v2/users/158488612.json
            user_fields:
              its_remember_september: null
              skittles: null
              user_field_1: null
            verified: true
          actor_id: 158488612
          created_at: 2020-11-17T00:34:40Z
          id: 29183462
          object:
            ticket:
              id: 1521
              subject: test
          target:
            ticket:
              id: 1521
              subject: test
          title: "Tedd assigned ticket #1521 to you."
          updated_at: 2020-11-17T00:34:40Z
          url: https://example.zendesk.com/api/v2/activities/29183462.json
          user:
            active: true
            alias: test
            created_at: 2017-08-14T20:13:53Z
            custom_role_id: null
            default_group_id: 1873
            details: ""
            email: user@zendesk.com
            external_id: oev7jj
            iana_time_zone: Pacific/Pago_Pago
            id: 3343
            last_login_at: 2020-11-16T22:57:45Z
            locale: en-gb
            locale_id: 5
            moderator: true
            name: Samwise Gamgee
            notes: test
            only_private_comments: false
            organization_id: 1873
            phone: null
            photo:
              content_type: image/gif
              content_url: https://example.zendesk.com/system/photos/8730791/1f84950b8d7949b3.gif
              deleted: false
              file_name: 1f84950b8d7949b3.gif
              height: 80
              id: 8730791
              inline: false
              mapped_content_url: https://example.zendesk.com/system/photos/8730791/1f84950b8d7949b3.gif
              size: 4566
              thumbnails:
              - content_type: image/gif
                content_url: https://example.zendesk.com/system/photos/8730801/1f84950b8d7949b3_thumb.gif
                deleted: false
                file_name: 1f84950b8d7949b3_thumb.gif
                height: 32
                id: 8730801
                inline: false
                mapped_content_url: https://example.zendesk.com/system/photos/8730801/1f84950b8d7949b3_thumb.gif
                size: 1517
                url: https://example.zendesk.com/api/v2/attachments/8730801.json
                width: 32
              url: https://example.zendesk.com/api/v2/attachments/8730791.json
              width: 80
            report_csv: true
            restricted_agent: false
            role: admin
            role_type: null
            shared: false
            shared_agent: false
            shared_phone_number: null
            signature: test
            suspended: false
            tags:
            - "101"
            ticket_restriction: null
            time_zone: American Samoa
            two_factor_auth_enabled: null
            updated_at: 2020-11-17T00:33:55Z
            url: https://example.zendesk.com/api/v2/users/3343.json
            user_fields:
              its_remember_september: null
              skittles: 2018-09-14T00:00:00+00:00
              user_field_1: "101"
            verified: true
          user_id: 3343
          verb: tickets.assignment
        actors:
        - active: true
          alias: ""
          created_at: 2020-11-17T00:32:12Z
          custom_role_id: null
          default_group_id: 1873
          details: ""
          email: cgoddard+ted@zendesk.com
          external_id: null
          iana_time_zone: America/Juneau
          id: 158488612
          last_login_at: 2020-11-17T00:33:44Z
          locale: en-gb
          locale_id: 5
          moderator: true
          name: Tedd
          notes: ""
          only_private_comments: false
          organization_id: null
          phone: null
          photo: null
          report_csv: true
          restricted_agent: false
          role: admin
          role_type: null
          shared: false
          shared_agent: false
          shared_phone_number: null
          signature: ""
          suspended: false
          tags: []
          ticket_restriction: null
          time_zone: Alaska
          two_factor_auth_enabled: null
          updated_at: 2020-11-17T00:34:38Z
          url: https://example.zendesk.com/api/v2/users/158488612.json
          user_fields:
            its_remember_september: null
            skittles: null
            user_field_1: null
          verified: true
        count: 1
        next_page: null
        previous_page: null
        users:
        - active: true
          alias: test
          created_at: 2017-08-14T20:13:53Z
          custom_role_id: null
          default_group_id: 1873
          details: ""
          email: user@zendesk.com
          external_id: oev7jj
          iana_time_zone: Pacific/Pago_Pago
          id: 3343
          last_login_at: 2020-11-16T22:57:45Z
          locale: en-gb
          locale_id: 5
          moderator: true
          name: Samwise Gamgee
          notes: test
          only_private_comments: false
          organization_id: 1873
          phone: null
          photo:
            content_type: image/gif
            content_url: https://example.zendesk.com/system/photos/8730791/1f84950b8d7949b3.gif
            deleted: false
            file_name: 1f84950b8d7949b3.gif
            height: 80
            id: 8730791
            inline: false
            mapped_content_url: https://example.zendesk.com/system/photos/8730791/1f84950b8d7949b3.gif
            size: 4566
            thumbnails:
            - content_type: image/gif
              content_url: https://example.zendesk.com/system/photos/8730801/1f84950b8d7949b3_thumb.gif
              deleted: false
              file_name: 1f84950b8d7949b3_thumb.gif
              height: 32
              id: 8730801
              inline: false
              mapped_content_url: https://example.zendesk.com/system/photos/8730801/1f84950b8d7949b3_thumb.gif
              size: 1517
              url: https://example.zendesk.com/api/v2/attachments/8730801.json
              width: 32
            url: https://example.zendesk.com/api/v2/attachments/8730791.json
            width: 80
          report_csv: true
          restricted_agent: false
          role: admin
          role_type: null
          shared: false
          shared_agent: false
          shared_phone_number: null
          signature: test
          suspended: false
          tags:
          - "101"
          ticket_restriction: null
          time_zone: American Samoa
          two_factor_auth_enabled: null
          updated_at: 2020-11-17T00:33:55Z
          url: https://example.zendesk.com/api/v2/users/3343.json
          user_fields:
            its_remember_september: null
            skittles: 2018-09-14T00:00:00+00:00
            user_field_1: "101"
          verified: true
    TicketMetricEventBreachObjectAllOf2:
      type: object
      properties:
        deleted:
          type: boolean
          description: "Available if `type` is `breach`. In general, you can ignore\
            \ any breach event when `deleted` is true. See [deleted](#deleted)"
          readOnly: true
    ListTicketIncidentsResponse:
      type: object
      additionalProperties: true
    AccountSettingsLotusObject:
      type: object
      properties:
        pod_id:
          type: integer
          x-ballerina-name: podId
        prefer_lotus:
          type: boolean
          x-ballerina-name: preferLotus
        reporting:
          type: boolean
      description: "Support UI settings. See [Lotus](#lotus)"
    DefinitionsResponse:
      type: object
      properties:
        definitions:
          $ref: '#/components/schemas/DefinitionsResponseDefinitions'
    TriggerChangeObject:
      type: object
      properties:
        change:
          type: string
          description: "One of `-`, `+`, `=` representing the type of change"
        content:
          description: The value of the item it represents
          oneOf:
          - type: boolean
          - type: string
          - type: integer
          - type: array
            items:
              oneOf:
              - type: string
              - type: integer
              - type: boolean
      example:
        change: "+"
        content: solved
    TriggerConditionDefinitionObjectAny:
      type: object
      properties:
        nullable:
          type: boolean
        operators:
          type: array
          items:
            $ref: '#/components/schemas/TriggerConditionDefinitionObjectAnyOperators'
        repeatable:
          type: boolean
        subject:
          type: string
        title:
          type: string
        type:
          type: string
        group:
          type: string
    MacroResponse:
      type: object
      properties:
        macro:
          $ref: '#/components/schemas/MacroObject'
    AttachmentThumbnails:
      type: object
      properties:
        thumbnails:
          type: array
          description: An array of attachment objects. Note that photo thumbnails
            do not have thumbnails
          readOnly: true
          items:
            $ref: '#/components/schemas/AttachmentBaseObject'
    TicketSkipsResponse:
      type: object
      properties:
        skips:
          type: array
          items:
            $ref: '#/components/schemas/TicketSkipObject'
    ResourceCollectionsResponse:
      type: object
      properties:
        next_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: nextPage
        count:
          type: integer
          readOnly: true
        resource_collections:
          type: array
          items:
            $ref: '#/components/schemas/ResourceCollectionObject'
          x-ballerina-name: resourceCollections
        previous_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: previousPage
    TicketAuditsCountResponseCount:
      type: object
      properties:
        refreshed_at:
          type: string
          format: date-time
          x-ballerina-name: refreshedAt
        value:
          type: integer
    JobStatusResponse:
      type: object
      properties:
        job_status:
          allOf:
          - $ref: '#/components/schemas/JobStatusObject'
          x-ballerina-name: jobStatus
    ViewsResponse:
      type: object
      properties:
        next_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: nextPage
        count:
          type: integer
          readOnly: true
        previous_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: previousPage
        views:
          type: array
          items:
            $ref: '#/components/schemas/ViewObject'
    SessionsResponse:
      type: object
      properties:
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/SessionObject'
    UserCreateInputIdentities:
      required:
      - type
      - value
      type: object
      properties:
        type:
          type: string
        value:
          type: string
    DynamicContentVariantResponse:
      type: object
      properties:
        variant:
          $ref: '#/components/schemas/DynamicContentVariantObject'
    SatisfactionReasonsResponse:
      type: object
      properties:
        reasons:
          type: array
          items:
            $ref: '#/components/schemas/SatisfactionReasonObject'
    BookmarksResponseAllOf2:
      type: object
      properties:
        bookmarks:
          type: array
          items:
            $ref: '#/components/schemas/BookmarkObject'
    ValueValueOneOf12:
      type: integer
    AccountSettingsChatObject:
      type: object
      properties:
        available:
          type: boolean
        welcome_message:
          type: string
          x-ballerina-name: welcomeMessage
        enabled:
          type: boolean
        maximum_request_count:
          type: integer
          x-ballerina-name: maximumRequestCount
        integrated:
          type: boolean
      description: "Zendesk Chat settings. See [Chat](#chat)"
    OrganizationSubscriptionsResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/OffsetPaginationObject'
      - $ref: '#/components/schemas/OrganizationSubscriptionsResponseAllOf2'
    DefinitionsResponseDefinitionsOperators:
      type: object
      properties:
        terminal:
          type: boolean
        title:
          type: string
        value:
          type: string
    LocaleObject:
      type: object
      properties:
        updated_at:
          type: string
          description: The ISO 8601 formatted date-time when the locale was last updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        name:
          type: string
          description: The name of the language
          readOnly: true
        created_at:
          type: string
          description: The ISO 8601 formatted date-time the locale was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        id:
          type: integer
          description: The unique ID of the locale
          readOnly: true
        locale:
          type: string
          description: The name of the locale
          readOnly: true
        url:
          type: string
          description: The URL of the locale record
          readOnly: true
      example:
        created_at: 2009-07-20T22:55:29Z
        id: 1
        locale: en-US
        name: English
        updated_at: 2011-05-05T10:38:52Z
        url: https://company.zendesk.com/api/v2/locales/en-US.json
    AttachmentUploadResponse:
      type: object
      properties:
        upload:
          $ref: '#/components/schemas/AttachmentUploadResponseUpload'
    CreateResourceResult:
      required:
      - id
      - index
      type: object
      properties:
        index:
          type: integer
          description: the index number of the resul
        id:
          type: integer
          description: the id of the new resource
    V2WorkspacesBody:
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/WorkspaceInput'
    WorkspacesworkspaceIdBody:
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/WorkspaceInput'
    TicketMetricEventGroupSLAObjectAllOf2:
      type: object
      properties:
        group_sla:
          type: object
          description: "Available if `type` is \"apply_group_sla\". The Group SLA\
            \ policy and target being enforced on the ticket and metric in question,\
            \ if any. See [group_sla](#group_sla)"
          readOnly: true
          x-ballerina-name: groupSla
    SatisfactionRatingResponse:
      type: object
      properties:
        satisfaction_rating:
          type: array
          items:
            $ref: '#/components/schemas/SatisfactionRatingObject'
          x-ballerina-name: satisfactionRating
    TagUrlObject:
      type: object
      properties:
        url:
          type: string
          description: The url associated to the api request
          readOnly: true
    CustomStatusUpdateInput:
      type: object
      properties:
        end_user_label:
          type: string
          description: "The dynamic content placeholder, if present, or the \"end_user_label\"\
            \ value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/)"
          x-ballerina-name: endUserLabel
        end_user_description:
          type: string
          description: "The dynamic content placeholder, if present, or the \"end_user_description\"\
            \ value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/)"
          x-ballerina-name: endUserDescription
        active:
          type: boolean
          description: True if the custom status is set as active; inactive if false
        description:
          type: string
          description: "The dynamic content placeholder, if present, or the \"description\"\
            \ value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/)"
        agent_label:
          type: string
          description: "The dynamic content placeholder, if present, or the \"agent_label\"\
            \ value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/)"
          x-ballerina-name: agentLabel
    SessionResponse:
      type: object
      properties:
        session:
          type: array
          items:
            $ref: '#/components/schemas/SessionObject'
    ActivityObject:
      title: Ticket Activities
      type: object
      properties:
        actor:
          type: object
          description: "The full user record of the user responsible for the ticket\
            \ activity. See [Users](/api-reference/ticketing/users/users/)"
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/UserObject'
        updated_at:
          type: string
          description: When the record was last updated
          readOnly: true
          x-ballerina-name: updatedAt
        user_id:
          type: integer
          description: The id of the agent making the request
          readOnly: true
          x-ballerina-name: userId
        verb:
          type: string
          description: "The type of activity. Can be \"tickets.assignment\", \"tickets.comment\"\
            , or \"tickets.priority_increase\""
          readOnly: true
        created_at:
          type: string
          description: When the record was created
          readOnly: true
          x-ballerina-name: createdAt
        actor_id:
          type: integer
          description: "The id of the user responsible for the ticket activity. An\
            \ `actor_id` of \"-1\" is a Zendesk system user, such as an automations\
            \ action"
          readOnly: true
          x-ballerina-name: actorId
        id:
          type: integer
          description: Automatically assigned on creation
          readOnly: true
        title:
          type: string
          description: Description of the activity
          readOnly: true
        user:
          type: object
          description: "The full user record of the agent making the request. See\
            \ [Users](/api-reference/ticketing/users/users/)"
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/UserObject'
        url:
          type: string
          description: The API url of the activity
          readOnly: true
        object:
          type: object
          additionalProperties: true
          description: "The content of the activity. Can be a ticket, comment, or\
            \ change"
          readOnly: true
        target:
          type: object
          additionalProperties: true
          description: "The target of the activity, a ticket"
          readOnly: true
      example:
        actor:
          id: 8678530
          name: James A. Rosen
        actor_id: 23546
        created_at: 2019-03-05T10:38:52Z
        id: 35
        object: {}
        target: {}
        title: "John Hopeful assigned ticket #123 to you"
        updated_at: 2019-03-05T10:38:52Z
        url: https://company.zendesk.com/api/v2/activities/35.json
        user:
          id: 223443
          name: Johnny Agent
        user_id: 29451
        verb: tickets.assignment
    SLAPolicyFilterDefinitionResponseDefinitionsValues:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/SLAPolicyFilterDefinitionResponseDefinitionsValuesList'
        type:
          type: string
    TwitterChannelResponse:
      type: object
      properties:
        monitored_twitter_handle:
          allOf:
          - $ref: '#/components/schemas/TwitterChannelObject'
          x-ballerina-name: monitoredTwitterHandle
    BatchJobRequestJobItems:
      type: object
      properties:
        trigger_categories:
          type: array
          items:
            $ref: '#/components/schemas/TriggerCategoryBatchRequest'
          x-ballerina-name: triggerCategories
        triggers:
          type: array
          items:
            $ref: '#/components/schemas/TriggerBatchRequest'
    DynamicContentVariantObject:
      required:
      - content
      - locale_id
      type: object
      properties:
        locale_id:
          type: integer
          description: An active locale
          x-ballerina-name: localeId
        default:
          type: boolean
          description: If the variant is the default for the item it belongs to
        outdated:
          type: boolean
          description: If the variant is outdated
          readOnly: true
        updated_at:
          type: string
          description: When the variant was last updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        active:
          type: boolean
          description: If the variant is active and useable
        created_at:
          type: string
          description: When the variant was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        id:
          type: integer
          description: Automatically assigned when the variant is created
          readOnly: true
        content:
          type: string
          description: The content of the variant
        url:
          type: string
          description: The API url of the variant
          readOnly: true
      example:
        active: true
        content: This is my dynamic content in English
        created_at: 2014-04-09T19:53:23Z
        default: true
        id: 23
        locale_id: 125
        outdated: false
        updated_at: 2014-04-09T19:53:23Z
        url: https://subdomain.zendesk.com/api/v2/dynamic_content/items/3/variants/23.json
    IncrementalSkillBasedRoutingAttribute:
      type: object
      properties:
        name:
          type: string
          description: The name of the attribute
          readOnly: true
        id:
          type: string
          description: Automatically assigned when an attribute is created
          readOnly: true
        time:
          type: string
          description: "The time the attribute was created, updated, or deleted"
          format: date-time
          readOnly: true
        type:
          type: string
          description: "One of \"create\", \"update\", or \"delete\""
          readOnly: true
    TicketMetricEventSLAObjectAllOf2:
      type: object
      properties:
        sla:
          type: object
          description: "Available if `type` is `apply_sla`. The SLA policy and target\
            \ being enforced on the ticket and metric in question, if any. See [sla](#sla)"
          readOnly: true
    SLAPolicyFilterDefinitionResponse:
      type: object
      properties:
        definitions:
          $ref: '#/components/schemas/SLAPolicyFilterDefinitionResponseDefinitions'
    ViewCountObject:
      type: object
      properties:
        pretty:
          type: string
          description: A pretty-printed text approximation of the view count
          readOnly: true
        view_id:
          type: integer
          description: The id of the view
          readOnly: true
          x-ballerina-name: viewId
        active:
          type: boolean
          description: "Only active views if true, inactive views if false, all views\
            \ if null"
          readOnly: true
        fresh:
          type: boolean
          description: false if the cached data is stale and the system is still loading
            and caching new data
          readOnly: true
        value:
          type: integer
          description: The cached number of tickets in the view. Can also be null
            if the system is loading and caching new data. Not to be confused with
            0 tickets
          nullable: true
          readOnly: true
        url:
          type: string
          description: The API url of the count
          readOnly: true
    QueueResponse:
      type: object
      properties:
        queue:
          $ref: '#/components/schemas/QueueObject'
    FollowerObject:
      type: object
      properties:
        user_email:
          type: string
          format: email
          x-ballerina-name: userEmail
        user_id:
          type: string
          x-ballerina-name: userId
        action:
          type: string
          enum:
          - put
          - delete
    TicketMetricsResponse:
      type: object
      properties:
        ticket_metrics:
          type: array
          items:
            $ref: '#/components/schemas/TicketMetricObject'
          x-ballerina-name: ticketMetrics
    LocaleResponse:
      type: object
      properties:
        locale:
          $ref: '#/components/schemas/LocaleObject'
    OrganizationObject:
      type: object
      properties:
        shared_tickets:
          type: boolean
          description: End users in this organization are able to see each other's
            tickets
          x-ballerina-name: sharedTickets
        notes:
          type: string
          description: Any notes you have about the organization
          nullable: true
        created_at:
          type: string
          description: The time the organization was created
          readOnly: true
          x-ballerina-name: createdAt
        external_id:
          type: string
          description: "A unique external id to associate organizations to an external\
            \ record. The id is case-insensitive. For example, \"company1\" and \"\
            Company1\" are considered the same"
          nullable: true
          x-ballerina-name: externalId
        url:
          type: string
          description: The API url of this organization
        domain_names:
          type: array
          description: An array of domain names associated with this organization
          items:
            type: string
          x-ballerina-name: domainNames
        tags:
          type: array
          description: The tags of the organization
          items:
            type: string
        organization_fields:
          type: object
          additionalProperties:
            oneOf:
            - type: string
            - type: number
          description: "Custom fields for this organization. See [Custom organization\
            \ fields](/api-reference/ticketing/organizations/organizations/#custom-organization-fields)"
          nullable: true
          x-ballerina-name: organizationFields
        updated_at:
          type: string
          description: The time of the last update of the organization
          readOnly: true
          x-ballerina-name: updatedAt
        group_id:
          type: integer
          description: New tickets from users in this organization are automatically
            put in this group
          nullable: true
          x-ballerina-name: groupId
        name:
          type: string
          description: A unique name for the organization
        details:
          type: string
          description: "Any details obout the organization, such as the address"
          nullable: true
        id:
          type: integer
          description: Automatically assigned when the organization is created
        shared_comments:
          type: boolean
          description: End users in this organization are able to comment on each
            other's tickets
          x-ballerina-name: sharedComments
      example:
        created_at: 2009-07-20T22:55:29Z
        details: This is a kind of organization
        domain_names:
        - example.com
        - test.com
        external_id: ABC123
        group_id: null
        id: 35436
        name: One Organization
        notes: ""
        organization_fields:
          org_decimal: 5.2
          org_dropdown: option_1
        shared_comments: true
        shared_tickets: true
        tags:
        - enterprise
        - other_tag
        updated_at: 2011-05-05T10:38:52Z
        url: https://company.zendesk.com/api/v2/organizations/35436.json
    MacrosResponseAllOf1:
      type: object
      properties:
        macros:
          type: array
          items:
            $ref: '#/components/schemas/MacroObject'
    WorkspaceResponseAllOf1:
      type: object
      properties:
        workspaces:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceObject'
    CollaboratorObject:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
      example:
        email: someone@example.com
        name: Someone Special
    SupportAddressResponse:
      type: object
      properties:
        recipient_address:
          allOf:
          - $ref: '#/components/schemas/SupportAddressObject'
          x-ballerina-name: recipientAddress
    AccountSettingsTicketFormObject:
      type: object
      properties:
        ticket_forms_instructions:
          type: string
          x-ballerina-name: ticketFormsInstructions
        raw_ticket_forms_instructions:
          type: string
          x-ballerina-name: rawTicketFormsInstructions
      description: "Ticket form settings. See [Ticket Form](#ticket-form)"
    SatisfactionRatingObject:
      required:
      - assignee_id
      - group_id
      - requester_id
      - score
      - ticket_id
      type: object
      properties:
        reason:
          type: string
          description: "The reason for a bad rating given by the requester in a follow-up\
            \ question. Satisfaction reasons must be [enabled](https://support.zendesk.com/hc/en-us/articles/223152967)"
        created_at:
          type: string
          description: The time the satisfaction rating got created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        ticket_id:
          type: integer
          description: The id of ticket being rated
          readOnly: true
          x-ballerina-name: ticketId
        url:
          type: string
          description: The API url of this rating
          readOnly: true
        reason_id:
          type: integer
          description: "id for the reason the user gave a negative rating. Can only\
            \ be set on ratings with a `score` of \"bad\". To get a descriptive value\
            \ for the id, use the [Show Reason for Satisfaction Rating](/api-reference/ticketing/ticket-management/satisfaction_reasons/#show-reason-for-satisfaction-rating)\
            \ endpoint"
          x-ballerina-name: reasonId
        reason_code:
          type: integer
          description: "The default reasons the user can select from a list menu for\
            \ giving a negative rating. See [Reason codes](/api-reference/ticketing/ticket-management/satisfaction_reasons/#reason-codes)\
            \ in the Satisfaction Reasons API. Can only be set on ratings with a `score`\
            \ of \"bad\". Responses don't include this property"
          x-ballerina-name: reasonCode
        score:
          type: string
          description: "The rating \"offered\", \"unoffered\", \"good\" or \"bad\""
        updated_at:
          type: string
          description: The time the satisfaction rating got updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        group_id:
          type: integer
          description: The id of group assigned to at the time of rating
          readOnly: true
          x-ballerina-name: groupId
        comment:
          type: string
          description: "The comment received with this rating, if available"
        id:
          type: integer
          description: Automatically assigned upon creation
          readOnly: true
        assignee_id:
          type: integer
          description: The id of agent assigned to at the time of rating
          readOnly: true
          x-ballerina-name: assigneeId
        requester_id:
          type: integer
          description: The id of ticket requester submitting the rating
          readOnly: true
          x-ballerina-name: requesterId
      example:
        assignee_id: 135
        created_at: 2011-07-20T22:55:29Z
        group_id: 44
        id: 35436
        requester_id: 7881
        score: good
        ticket_id: 208
        updated_at: 2011-07-20T22:55:29Z
        url: https://company.zendesk.com/api/v2/satisfaction_ratings/62.json
    TicketCreateInputAllOf2:
      required:
      - comment
      type: object
      properties:
        raw_subject:
          type: string
          description: |
            The dynamic content placeholder, if present, or the "subject" value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/)
          x-ballerina-name: rawSubject
        ticket_form_id:
          type: integer
          description: Enterprise only. The id of the ticket form to render for the
            ticket
          x-ballerina-name: ticketFormId
        email_cc_ids:
          type: array
          description: "The ids of agents or end users currently CC'ed on the ticket.\
            \ See [CCs and followers resources](https://support.zendesk.com/hc/en-us/articles/360020585233)\
            \ in the Support Help Center"
          items:
            type: integer
          x-ballerina-name: emailCcIds
        follower_ids:
          type: array
          description: "The ids of agents currently following the ticket. See [CCs\
            \ and followers resources](https://support.zendesk.com/hc/en-us/articles/360020585233)"
          items:
            type: integer
          x-ballerina-name: followerIds
        recipient:
          type: string
          description: The original recipient e-mail address of the ticket
        via_followup_source_id:
          type: integer
          description: "POST requests only. The id of a closed ticket when creating\
            \ a follow-up ticket. See [Creating a follow-up ticket](/documentation/ticketing/managing-tickets/creating-and-updating-tickets#creating-a-follow-up-ticket)"
          x-ballerina-name: viaFollowupSourceId
        collaborators:
          type: array
          description: "POST requests only. Users to add as cc's when creating a ticket.\
            \ See [Setting Collaborators](/documentation/ticketing/managing-tickets/creating-and-updating-tickets#setting-collaborators)"
          items:
            $ref: '#/components/schemas/CollaboratorObject'
        submitter_id:
          type: integer
          description: The user who submitted the ticket. The submitter always becomes
            the author of the first comment on the ticket
          x-ballerina-name: submitterId
        macro_ids:
          type: array
          description: POST requests only. List of macro IDs to be recorded in the
            ticket audit
          items:
            type: integer
          x-ballerina-name: macroIds
        brand_id:
          type: integer
          description: Enterprise only. The id of the brand this ticket is associated
            with
          x-ballerina-name: brandId
        via:
          $ref: '#/components/schemas/ViaObject'
    TwitterChannelTwicketStatusResponseStatuses:
      type: object
      properties:
        user_followed:
          type: boolean
          x-ballerina-name: userFollowed
        id:
          type: integer
        favorited:
          type: boolean
        retweeted:
          type: boolean
    SkillBasedRoutingAttributeObject:
      required:
      - name
      type: object
      properties:
        updated_at:
          type: string
          description: When this record was last updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        name:
          type: string
          description: The name of the attribute
        created_at:
          type: string
          description: When this record was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        id:
          type: string
          description: Automatically assigned when an attribute is created
          readOnly: true
        url:
          type: string
          description: URL of the attribute
          readOnly: true
      example:
        created_at: 2017-12-01T19:29:31Z
        id: 15821cba-7326-11e8-b07e-950ba849aa27
        name: color
        updated_at: 2017-12-01T19:29:31Z
        url: "https://{subdomain}.zendesk.com/api/v2/routing/attributes/15821cba-7326-11e8-b07e-950ba849aa27.json"
    UserMergePropertiesInput:
      type: object
      properties:
        password:
          type: string
        organization_id:
          type: integer
          x-ballerina-name: organizationId
        name:
          type: string
        email:
          type: string
    AccountSettingsBrandingObject:
      type: object
      properties:
        tab_background_color:
          type: string
          x-ballerina-name: tabBackgroundColor
        favicon_url:
          type: string
          nullable: true
          x-ballerina-name: faviconUrl
        header_color:
          type: string
          x-ballerina-name: headerColor
        page_background_color:
          type: string
          x-ballerina-name: pageBackgroundColor
        text_color:
          type: string
          x-ballerina-name: textColor
        header_logo_url:
          type: string
          nullable: true
          x-ballerina-name: headerLogoUrl
      description: "Branding settings. See [Branding](#branding)"
    AttachmentUpdateInput:
      type: object
      properties:
        malware_access_override:
          type: boolean
          description: "If true, allows access to attachments with detected malware"
          x-ballerina-name: malwareAccessOverride
    MacroCategoriesResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            type: string
    TicketCreateRequest:
      type: object
      properties:
        ticket:
          $ref: '#/components/schemas/TicketCreateInput'
    TicketMetricEventsResponseTicketMetricEventsResponseAllOf12:
      type: object
      properties:
        next_page:
          type: string
          x-ballerina-name: nextPage
        count:
          type: integer
        end_time:
          type: integer
          x-ballerina-name: endTime
    GroupResponse:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/GroupObject'
    SkillBasedRoutingAttributeValueObject:
      type: object
      properties:
        updated_at:
          type: string
          description: When this record was last updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        attribute_id:
          type: string
          description: Id of the associated attribute
          x-ballerina-name: attributeId
        name:
          type: string
          description: The name of the attribute value
        created_at:
          type: string
          description: When this record was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        id:
          type: string
          description: Automatically assigned when an attribute value is created
          readOnly: true
        url:
          type: string
          description: URL of the attribute value
          readOnly: true
    CustomObjectsCreateRequest:
      type: object
      properties:
        custom_object:
          allOf:
          - $ref: '#/components/schemas/CustomObjectCreateInput'
          x-ballerina-name: customObject
    SuspendedTicketObject:
      type: object
      properties:
        attachments:
          type: array
          description: "The attachments, if any associated to this suspended ticket.\
            \ See [Attachments](/api-reference/ticketing/tickets/ticket-attachments/)"
          nullable: true
          readOnly: true
          items:
            $ref: '#/components/schemas/AttachmentObject'
        author:
          type: object
          description: "The author id (if available), name and email"
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/AuthorObject'
        subject:
          type: string
          description: The value of the subject field for this ticket
          readOnly: true
        cause:
          type: string
          description: Why the ticket was suspended
          readOnly: true
        created_at:
          type: string
          description: "The ticket ID this suspended email is associated with, if\
            \ available"
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        cause_id:
          type: integer
          description: The ID of the cause
          readOnly: true
          x-ballerina-name: causeId
        message_id:
          type: string
          description: "The ID of the email, if available"
          readOnly: true
          x-ballerina-name: messageId
        ticket_id:
          type: integer
          description: "The ticket ID this suspended email is associated with, if\
            \ available"
          readOnly: true
          x-ballerina-name: ticketId
        content:
          type: string
          description: The content that was flagged
          readOnly: true
        error_messages:
          type: array
          description: The error messages if any associated to this suspended ticket
          nullable: true
          readOnly: true
          items:
            type: object
          x-ballerina-name: errorMessages
        url:
          type: string
          description: The API url of this ticket
          readOnly: true
        brand_id:
          type: integer
          description: The id of the brand this ticket is associated with. Only applicable
            for Enterprise accounts
          readOnly: true
          x-ballerina-name: brandId
        via:
          $ref: '#/components/schemas/ViaObject'
        updated_at:
          type: string
          description: When the ticket was assigned
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        recipient:
          type: string
          description: The original recipient e-mail address of the ticket
          readOnly: true
        id:
          type: integer
          description: Automatically assigned
          readOnly: true
      example:
        attachments: []
        author:
          email: styx@example.com
          id: 1111
          name: Mr. Roboto
        brand_id: 123
        cause: Detected as spam
        cause_id: 0
        content: Out Of Office Reply
        created_at: 2009-07-20T22:55:29Z
        error_messages: null
        id: 435
        message_id: Spambot@spam.co.evil
        recipient: john@example.com
        subject: "Help, my printer is on fire!"
        ticket_id: 67321
        updated_at: 2011-05-05T10:38:52Z
        url: https://example.zendesk.com/api/v2/tickets/35436.json
        via:
          channel: email
          source:
            from:
              address: totallylegit@emailaddress.com
              name: TotallyLegit
            rel: null
            to:
              address: support@example.zendesk.com
              name: Example Account
    OrganizationSubscriptionResponse:
      type: object
      properties:
        organization_subscription:
          allOf:
          - $ref: '#/components/schemas/OrganizationSubscriptionObject'
          x-ballerina-name: organizationSubscription
    ResourceCollectionObject:
      type: object
      properties:
        updated_at:
          type: string
          description: Last time the resource collection was updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        created_at:
          type: string
          description: When the resource collection was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        resources:
          type: array
          description: "Array of resource metadata objects. See [Resource objects](#resource-objects)"
          readOnly: true
          items:
            $ref: '#/components/schemas/ResourceCollectionObjectResources'
        id:
          type: integer
          description: id for the resource collection. Automatically assigned upon
            creation
          readOnly: true
      example:
        created_at: 2011-07-20T22:55:29Z
        id: 35436
        resources:
        - deleted: false
          identifier: email_on_ticket_solved
          resource_id: 10824486485524
          type: triggers
        - deleted: false
          identifier: support_description
          resource_id: 10824486482580
          type: ticket_fields
        updated_at: 2011-07-20T22:55:29Z
    TargetHTTP:
      required:
      - content_type
      - method
      - target_url
      type: object
      properties:
        password:
          type: string
          description: only writable
        content_type:
          type: string
          description: "\"application/json\", \"application/xml\", or \"application/x-www-form-urlencoded\""
          x-ballerina-name: contentType
        method:
          type: string
          description: "\"get\", \"patch\", \"put\", \"post\", or \"delete\""
        target_url:
          type: string
          x-ballerina-name: targetUrl
        username:
          type: string
    TriggerRevisionsResponseDiff:
      type: object
      properties:
        active:
          type: array
          description: "An array of [change](#change) objects"
          items:
            $ref: '#/components/schemas/TriggerChangeObject'
        description:
          type: array
          description: "An array of [change](#change) objects"
          items:
            $ref: '#/components/schemas/TriggerChangeObject'
        target_id:
          type: integer
          description: ID of the target revision
          x-ballerina-name: targetId
        source_id:
          type: integer
          description: ID of the source revision
          x-ballerina-name: sourceId
        conditions:
          $ref: '#/components/schemas/TriggerConditionDiffObject'
        title:
          type: array
          description: "An array of [change](#change) objects"
          items:
            $ref: '#/components/schemas/TriggerChangeObject'
        actions:
          type: array
          description: "An array that contain [action diff objects](#Action Diffs)"
          items:
            $ref: '#/components/schemas/TriggerActionDiffObject'
    TicketCreateInput:
      type: object
      example:
        comment:
          body: The smoke is very colorful.
        priority: urgent
        subject: My printer is on fire!
      allOf:
      - $ref: '#/components/schemas/TicketUpdateInput'
      - $ref: '#/components/schemas/TicketCreateInputAllOf2'
    TrialAccountObject:
      type: object
      properties:
        name:
          type: string
          description: The name of the account
        subdomain:
          type: string
          description: The subdomain of the account
        url:
          type: string
          description: The URL of the account
    WorkspaceObject:
      type: object
      properties:
        macros:
          type: array
          description: The ids of the macros associated to this workspace
          items:
            type: integer
        created_at:
          type: string
          description: The time the workspace was created
          format: date-time
          x-ballerina-name: createdAt
        description:
          type: string
          description: User-defined description of this workspace's purpose
        macro_ids:
          type: array
          description: The ids of the macros associated to this workspace
          items:
            type: integer
          x-ballerina-name: macroIds
        prefer_workspace_app_order:
          type: boolean
          description: "If true, the order of apps within the workspace will be preserved"
          x-ballerina-name: preferWorkspaceAppOrder
        title:
          type: string
          description: The title of the workspace
        url:
          type: string
          description: The URL for this resource
        ticket_form_id:
          type: integer
          description: The id of the ticket web form associated to this workspace
          x-ballerina-name: ticketFormId
        updated_at:
          type: string
          description: The time of the last update of the workspace
          format: date-time
          x-ballerina-name: updatedAt
        selected_macros:
          type: array
          description: "An array of the macro objects that will be used in this workspace.\
            \ See [Macros](/api-reference/ticketing/business-rules/macros/)"
          items:
            $ref: '#/components/schemas/MacroObject'
          x-ballerina-name: selectedMacros
        id:
          type: integer
          description: Automatically assigned upon creation
        position:
          type: integer
          description: Ordering of the workspace relative to other workspaces
        conditions:
          $ref: '#/components/schemas/ConditionsObject'
        activated:
          type: boolean
          description: "If true, this workspace is available for use"
        apps:
          type: array
          description: The apps associated to this workspace
          items:
            type: object
            additionalProperties: true
    SLAPolicyFilterDefinitionResponseDefinitionsOperators:
      type: object
      properties:
        title:
          type: string
        value:
          type: string
    ConditionObject:
      type: object
      properties:
        field:
          type: string
          description: The name of a ticket field
        value:
          type: string
          description: The value of a ticket field
        operator:
          type: string
          description: A comparison operator
    SLAPolicyObject:
      required:
      - filter
      - title
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/SLAPolicyFilterObject'
        updated_at:
          type: string
          description: The time of the last update of the SLA policy
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        policy_metrics:
          type: array
          description: "Array of [Policy Metric](#policy-metric) objects"
          items:
            $ref: '#/components/schemas/SLAPolicyMetricObject'
          x-ballerina-name: policyMetrics
        created_at:
          type: string
          description: The time the SLA policy was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        description:
          type: string
          description: The description of the SLA policy
        id:
          type: integer
          description: Automatically assigned when created
          readOnly: true
        position:
          type: integer
          description: "Position of the SLA policy that determines the order they\
            \ will be matched. If not specified, the SLA policy is added as the last\
            \ position"
        title:
          type: string
          description: The title of the SLA policy
        url:
          type: string
          description: URL of the SLA Policy reacord
          readOnly: true
      example:
        created_at: 2015-03-17T22:50:26Z
        description: "Organizations: Silver Plan"
        filter:
          all:
          - field: type
            operator: is
            value: incident
          - field: via_id
            operator: is
            value: "4"
          - field: custom_status_id
            operator: includes
            value:
            - "1"
            - "2"
          any: []
        id: 25
        policy_metrics:
        - business_hours: false
          metric: first_reply_time
          priority: low
          target: 60
        position: 3
        title: Silver Plan
        updated_at: 2015-03-17T22:50:26Z
        url: https://company.zendesk.com/api/v2/slas/policies/25.json
    OrganizationMetadataObject:
      type: object
      properties:
        tickets_count:
          type: integer
          description: The number of tickets for the organization
          x-ballerina-name: ticketsCount
        users_count:
          type: integer
          description: The number of users for the organization
          x-ballerina-name: usersCount
    PushNotificationDevicesInput:
      type: array
      items:
        type: string
        description: Mobile device token
    TicketMetricEventUpdateStatusObjectAllOf2:
      type: object
      properties:
        status:
          type: object
          description: "Available if `type` is `update_status`. Minutes since the\
            \ metric has been open. See [status](#status)"
          readOnly: true
    TargetGetSatisfaction:
      required:
      - account_name
      - email
      - password
      type: object
      properties:
        password:
          type: string
          description: only writable
        account_name:
          type: string
          x-ballerina-name: accountName
        target_url:
          type: string
          x-ballerina-name: targetUrl
        email:
          type: string
    ListDeletedTicketsResponseDeletedTickets:
      type: object
      properties:
        actor:
          $ref: '#/components/schemas/ListDeletedTicketsResponseActor'
        previous_state:
          type: string
          x-ballerina-name: previousState
        subject:
          type: string
        id:
          type: integer
        deleted_at:
          type: string
          x-ballerina-name: deletedAt
    BrandCreateRequest:
      type: object
      properties:
        brand:
          $ref: '#/components/schemas/BrandObject'
    Page:
      type: object
      properties:
        size:
          type: integer
        before:
          type: string
        after:
          type: string
    CustomObjectLimitsResponse:
      type: object
      properties:
        count:
          type: integer
          description: The current numnber of the requested resource
          readOnly: true
        limit:
          type: integer
          description: The maximum allowed number for the requested resource
          readOnly: true
    CustomRoleObject:
      title: Custom Agent Roles
      required:
      - name
      - role_type
      type: object
      properties:
        team_member_count:
          type: integer
          description: The number of team members assigned to this role
          readOnly: true
          x-ballerina-name: teamMemberCount
        role_type:
          type: integer
          description: "The user's role. 0 stands for a custom agent, 1 for a light\
            \ agent, 2 for a chat agent, 3 for a contributor, 4 for an admin and 5\
            \ for a billing admin. See [Understanding standard agent roles in Zendesk\
            \ Support](https://support.zendesk.com/hc/en-us/articles/4409155971354-Understanding-standard-agent-roles-in-Zendesk-Support)\
            \ in Zendesk help"
          readOnly: true
          x-ballerina-name: roleType
        updated_at:
          type: string
          description: The time the record was last updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        configuration:
          $ref: '#/components/schemas/CustomRoleConfigurationObject'
        name:
          type: string
          description: Name of the custom role
        created_at:
          type: string
          description: The time the record was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        description:
          type: string
          description: A description of the role
        id:
          type: integer
          description: Automatically assigned on creation
          readOnly: true
    EssentialsCardObject:
      required:
      - fields
      type: object
      properties:
        layout:
          type: string
          description: |
            layout type
          readOnly: true
        max_count:
          type: integer
          description: Maximum number of fields allowed in the essentials card
          readOnly: true
          x-ballerina-name: maxCount
        default:
          type: boolean
          description: "If true, the system has used the first twenty fields for the\
            \ custom object type as the essentials card"
          readOnly: true
        updated_at:
          type: string
          description: Date and time the essentials card were last updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        created_at:
          type: string
          description: Date and time the essentials card were created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        id:
          type: string
          description: |
            id of the essentials card
          nullable: true
          readOnly: true
        fields:
          type: array
          description: Fields that are displayed in the essentials card details. The
            order is defined by the order of the fields in the array
          items:
            type: object
            additionalProperties: true
        key:
          type: string
          description: |
            Object type. Example: `zen:user` refers to `User` type
          readOnly: true
      example:
        created_at: 2012-04-02T22:55:29Z
        default: true
        fields:
        - id: null
          zrn: zen:user:identity:email
        - id: null
          zrn: zen:user:field:standard:external_id
        - id: null
          zrn: zen:user:field:standard:iana_time_zone
        - id: null
          zrn: zen:user:field:standard:locale
        - id: null
          zrn: zen:user:field:standard:organization_id
        id: "123"
        key: zen:custom_object:boat
        layout: essentials_card
        max_count: 20
        updated_at: 2012-04-02T22:55:29Z
    CustomObjectRecordsResponse:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/CustomObjectRecordsResponseMeta'
        count:
          type: integer
          description: The number of results returned for the current request
          readOnly: true
        links:
          $ref: '#/components/schemas/CustomObjectRecordsResponseLinks'
        custom_object_records:
          type: array
          items:
            $ref: '#/components/schemas/CustomObjectRecord'
          x-ballerina-name: customObjectRecords
    ListTicketCollaboratorsResponse:
      type: object
      additionalProperties: true
    TicketImportInputComments:
      allOf:
      - $ref: '#/components/schemas/CommentsAllOf1'
      - $ref: '#/components/schemas/TicketCommentObject'
    TicketAuditViaObject:
      type: object
      properties:
        channel:
          type: string
          description: "This tells you how the ticket or event was created. Examples:\
            \ \"web\", \"mobile\", \"rule\", \"system\""
          readOnly: true
        source:
          type: object
          additionalProperties: true
          description: For some channels a source object gives more information about
            how or why the ticket or event was created
          readOnly: true
      description: "Describes how the object was created. See the [Via object reference](/documentation/ticketing/reference-guides/via-object-reference)"
    UserRequest:
      required:
      - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserInput'
    OrganizationSubscriptionObject:
      title: Organization Subscriptions
      type: object
      properties:
        user_id:
          type: integer
          description: The ID of the user
          x-ballerina-name: userId
        organization_id:
          type: integer
          description: The ID of the organization
          x-ballerina-name: organizationId
        created_at:
          type: string
          description: The date the organization subscription was created
          format: date-time
          x-ballerina-name: createdAt
        id:
          type: integer
          description: The ID of the organization subscription
      example:
        created_at: 2009-07-20T22:55:29Z
        id: 1234
        organization_id: 32
        user_id: 482
    AccountSettingsMetricsObject:
      type: object
      properties:
        account_size:
          type: string
          x-ballerina-name: accountSize
      description: "Account metrics settings. See [Metrics](#metrics)"
    MacrosResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/MacrosResponseAllOf1'
      - $ref: '#/components/schemas/OffsetPaginationObject'
    TicketMetricEventSLAObject:
      title: Ticket Metric Event
      type: object
      allOf:
      - $ref: '#/components/schemas/TicketMetricEventBaseObject'
      - $ref: '#/components/schemas/TicketMetricEventSLAObjectAllOf2'
    SkillBasedRoutingAttributeValueResponse:
      type: object
      properties:
        attribute_value:
          allOf:
          - $ref: '#/components/schemas/SkillBasedRoutingAttributeValueObject'
          x-ballerina-name: attributeValue
    SLAPoliciesResponse:
      type: object
      properties:
        next_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: nextPage
        count:
          type: integer
          readOnly: true
        previous_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: previousPage
        sla_policies:
          type: array
          items:
            $ref: '#/components/schemas/SLAPolicyObject'
          x-ballerina-name: slaPolicies
    CountResponse:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/CountResponseCount'
    GroupObject:
      required:
      - name
      type: object
      properties:
        default:
          type: boolean
          description: If the group is the default one for the account
          readOnly: true
        deleted:
          type: boolean
          description: Deleted groups get marked as such
          readOnly: true
        updated_at:
          type: string
          description: The time of the last update of the group
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        is_public:
          type: boolean
          description: |
            If true, the group is public.
            If false, the group is private.
            You can't change a private group to a public group
          x-ballerina-name: isPublic
        name:
          type: string
          description: The name of the group
        created_at:
          type: string
          description: The time the group was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        description:
          type: string
          description: The description of the group
        id:
          type: integer
          description: Automatically assigned when creating groups
          readOnly: true
        url:
          type: string
          description: The API url of the group
          readOnly: true
      example:
        created_at: 2009-07-20T22:55:29Z
        default: true
        deleted: false
        description: Some clever description here
        id: 3432
        is_public: true
        name: First Level Support
        updated_at: 2011-05-05T10:38:52Z
        url: https://company.zendesk.com/api/v2/groups/3432.json
    AccountSettingsOnboardingObject:
      type: object
      properties:
        product_sign_up:
          type: string
          nullable: true
          x-ballerina-name: productSignUp
        checklist_onboarding_version:
          type: integer
          x-ballerina-name: checklistOnboardingVersion
        onboarding_segments:
          type: string
          nullable: true
          x-ballerina-name: onboardingSegments
      description: Onboarding settings
    InlineResponse2006Count:
      type: object
      properties:
        refreshed_at:
          type: string
          format: date-time
          x-ballerina-name: refreshedAt
        value:
          type: integer
    SearchResponse:
      type: object
      properties:
        next_page:
          type: string
          description: URL to the next page of results
          nullable: true
          readOnly: true
          x-ballerina-name: nextPage
        count:
          type: integer
          description: The number of resources returned by the query corresponding
            to this page of results in the paginated response
          readOnly: true
        previous_page:
          type: string
          description: URL to the previous page of results
          nullable: true
          readOnly: true
          x-ballerina-name: previousPage
        results:
          type: array
          description: "May consist of tickets, users, groups, or organizations, as\
            \ specified by the `result_type` property in each result object"
          readOnly: true
          items:
            $ref: '#/components/schemas/SearchResultObject'
        facets:
          type: string
          description: The facets corresponding to the search query
          nullable: true
          readOnly: true
      example:
        count: 1
        facets: null
        next_page: null
        previous_page: null
        results:
        - created_at: 2018-04-06T03:17:05Z
          default: false
          deleted: false
          description: ""
          id: 1835972
          name: Ragtail
          result_type: group
          updated_at: 2018-04-06T03:17:05Z
          url: https://example.zendesk.com/api/v2/groups/1835972.json
    ViewExportResponse:
      type: object
      properties:
        export:
          $ref: '#/components/schemas/ViewExportResponseExport'
    DefinitionsResponseDefinitionsValues:
      type: object
      properties:
        title:
          type: string
        value:
          type: string
        enabled:
          type: boolean
    AttachmentBaseObject:
      type: object
      properties:
        malware_access_override:
          type: boolean
          description: "If true, you can download an attachment flagged as malware.\
            \ If false, you can't download such an attachment"
          readOnly: true
          x-ballerina-name: malwareAccessOverride
        mapped_content_url:
          type: string
          description: The URL the attachment image file has been mapped to
          readOnly: true
          x-ballerina-name: mappedContentUrl
        file_name:
          type: string
          description: The name of the image file
          readOnly: true
          x-ballerina-name: fileName
        malware_scan_result:
          type: string
          description: "The result of the malware scan. There is a delay between the\
            \ time the attachment is uploaded and when the malware scan is completed.\
            \ Usually the scan is done within a few seconds, but high load conditions\
            \ can delay the scan results. Possible values: \"malware_found\", \"malware_not_found\"\
            , \"failed_to_scan\", \"not_scanned\""
          readOnly: true
          x-ballerina-name: malwareScanResult
        url:
          type: string
          description: A URL to access the attachment details
          readOnly: true
        deleted:
          type: boolean
          description: "If true, the attachment has been deleted"
          readOnly: true
        content_type:
          type: string
          description: "The content type of the image. Example value: \"image/png\""
          readOnly: true
          x-ballerina-name: contentType
        inline:
          type: boolean
          description: |
            If true, the attachment is excluded from the attachment list and the attachment's URL
            can be referenced within the comment of a ticket. Default is false
          readOnly: true
        size:
          type: integer
          description: The size of the image file in bytes
          readOnly: true
        width:
          type: string
          description: "The width of the image file in pixels. If width is unknown,\
            \ returns null"
          readOnly: true
        content_url:
          type: string
          description: "A full URL where the attachment image file can be downloaded.\
            \ The file may be hosted externally so take care not to inadvertently\
            \ send Zendesk authentication credentials. See [Working with url properties](/documentation/ticketing/managing-tickets/working-with-url-properties)"
          readOnly: true
          x-ballerina-name: contentUrl
        id:
          type: integer
          description: Automatically assigned when created
          readOnly: true
        height:
          type: string
          description: "The height of the image file in pixels. If height is unknown,\
            \ returns null"
          readOnly: true
    UpdateResourceResult:
      required:
      - action
      - id
      - status
      - success
      type: object
      properties:
        success:
          type: boolean
          description: |
            whether the action was successful or not (`"success": true`)
        action:
          type: string
          description: |
            the action the job attempted (`"action": "update"`)
        id:
          type: integer
          description: the id of the resource the job attempted to update
        status:
          type: string
          description: |
            the status (`"status": "Updated"`)
    SLAPolicyFilterDefinitionResponseDefinitionsValues1:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/SLAPolicyFilterDefinitionResponseDefinitionsValues1List'
        type:
          type: string
    UserPasswordRequirementsResponse:
      type: object
      properties:
        requirements:
          type: array
          items:
            type: string
    TicketCommentsCountResponse:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/TicketCommentsCountResponseCount'
    DefinitionsResponseDefinitions:
      type: object
      properties:
        conditions_any:
          type: array
          items:
            $ref: '#/components/schemas/DefinitionsResponseDefinitionsConditionsAny'
          x-ballerina-name: conditionsAny
        conditions_all:
          type: array
          items:
            $ref: '#/components/schemas/DefinitionsResponseDefinitionsConditionsAll'
          x-ballerina-name: conditionsAll
    SatisfactionRatingsResponse:
      type: object
      properties:
        satisfaction_ratings:
          type: array
          items:
            $ref: '#/components/schemas/SatisfactionRatingObject'
          x-ballerina-name: satisfactionRatings
    MacroApplyTicketResponseResultTicketFields:
      type: object
      properties:
        id:
          type: integer
        value:
          type: string
    TicketCreateVoicemailTicketVoiceCommentInput:
      type: object
      properties:
        transcription_text:
          type: string
          description: Transcription of the call (optional)
          x-ballerina-name: transcriptionText
        recording_url:
          type: string
          description: Incoming phone number
          x-ballerina-name: recordingUrl
        answered_by_id:
          type: integer
          description: The agent who answered the call
          x-ballerina-name: answeredById
        started_at:
          type: string
          description: "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp\
            \ of the call starting time"
          format: date-time
          x-ballerina-name: startedAt
        from:
          type: string
          description: Incoming phone number
        location:
          type: string
          description: Location of the caller (optional)
        to:
          type: string
          description: Dialed phone number
        call_duration:
          type: integer
          description: Duration in seconds of the call
          x-ballerina-name: callDuration
    SearchResultObject:
      type: object
      properties:
        result_type:
          type: string
          description: The type of the resource
          x-ballerina-name: resultType
        default:
          type: boolean
          description: Flag to indicate whether this is the default resource
        deleted:
          type: boolean
          description: Flag to indicate whether or not resource has been deleted
        updated_at:
          type: string
          description: When the resource was last updated
          x-ballerina-name: updatedAt
        name:
          type: string
          description: The name of the resource
        created_at:
          type: string
          description: When the resource was created
          x-ballerina-name: createdAt
        description:
          type: string
          description: The description of the resource
        id:
          type: integer
          description: The ID of the resource
        url:
          type: string
          description: The url of the resource
    SupportAddressesResponse:
      type: object
      properties:
        recipient_addresses:
          type: array
          items:
            $ref: '#/components/schemas/SupportAddressObject'
          x-ballerina-name: recipientAddresses
    TriggerConditionDefinitionObjectAll:
      type: object
      properties:
        nullable:
          type: boolean
        operators:
          type: array
          items:
            $ref: '#/components/schemas/TriggerConditionDefinitionObjectAllOperators'
        repeatable:
          type: boolean
        subject:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/TriggerConditionDefinitionObjectAllValues'
        title:
          type: string
        type:
          type: string
        group:
          type: string
    CustomStatusCreateInputAllOf2:
      type: object
      properties:
        status_category:
          type: string
          description: The status category the custom ticket status belongs to
          enum:
          - new
          - open
          - pending
          - hold
          - solved
          x-ballerina-name: statusCategory
    AccountSettingsTicketObject:
      type: object
      properties:
        auto_translation_enabled:
          type: boolean
          x-ballerina-name: autoTranslationEnabled
        agent_ticket_deletion:
          type: boolean
          x-ballerina-name: agentTicketDeletion
        tagging:
          type: boolean
        using_skill_based_routing:
          type: boolean
          x-ballerina-name: usingSkillBasedRouting
        has_color_text:
          type: boolean
          x-ballerina-name: hasColorText
        allow_group_reset:
          type: boolean
          x-ballerina-name: allowGroupReset
        rich_text_comments:
          type: boolean
          x-ballerina-name: richTextComments
        comments_public_by_default:
          type: boolean
          x-ballerina-name: commentsPublicByDefault
        follower_and_email_cc_collaborations:
          type: boolean
          x-ballerina-name: followerAndEmailCcCollaborations
        light_agent_email_ccs_allowed:
          type: boolean
          x-ballerina-name: lightAgentEmailCcsAllowed
        is_first_comment_private_enabled:
          type: boolean
          x-ballerina-name: isFirstCommentPrivateEnabled
        list_empty_views:
          type: boolean
          x-ballerina-name: listEmptyViews
        chat_sla_enablement:
          type: boolean
          x-ballerina-name: chatSlaEnablement
        agent_invitation_enabled:
          type: boolean
          x-ballerina-name: agentInvitationEnabled
        accepted_new_collaboration_tos:
          type: boolean
          x-ballerina-name: acceptedNewCollaborationTos
        assign_default_organization:
          type: boolean
          x-ballerina-name: assignDefaultOrganization
        emoji_autocompletion:
          type: boolean
          x-ballerina-name: emojiAutocompletion
        private_attachments:
          type: boolean
          x-ballerina-name: privateAttachments
        auto_updated_ccs_followers_rules:
          type: boolean
          x-ballerina-name: autoUpdatedCcsFollowersRules
        email_attachments:
          type: boolean
          x-ballerina-name: emailAttachments
        list_newest_comments_first:
          type: boolean
          x-ballerina-name: listNewestCommentsFirst
        status_hold:
          type: boolean
          x-ballerina-name: statusHold
        markdown_ticket_comments:
          type: boolean
          x-ballerina-name: markdownTicketComments
        agent_collision:
          type: boolean
          x-ballerina-name: agentCollision
        maximum_personal_views_to_list:
          type: integer
          x-ballerina-name: maximumPersonalViewsToList
        assign_tickets_upon_solve:
          type: boolean
          x-ballerina-name: assignTicketsUponSolve
        collaboration:
          type: boolean
      description: "Ticket settings. See [Tickets](#tickets)"
    TagsByObjectIdResponse:
      required:
      - tags
      type: object
      properties:
        tags:
          type: array
          description: An array of strings
          items:
            type: string
    CountResponseCount:
      type: object
      properties:
        refreshed_at:
          type: string
          format: datetime
          x-ballerina-name: refreshedAt
        value:
          type: integer
    TicketResponse:
      type: object
      properties:
        ticket:
          $ref: '#/components/schemas/TicketObject'
    TriggerConditionsObject:
      type: object
      properties:
        all:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TriggerConditionObject'
        any:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TriggerConditionObject'
      description: "An object that describes the conditions under which the trigger\
        \ will execute. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference)"
      example:
        all:
        - field: status
          operator: less_than
          value: solved
        - field: assignee_id
          operator: is
          value: "296220096"
        - field: custom_status_id
          operator: includes
          value:
          - "1"
          - "2"
        any:
        - field: status
          operator: less_than
          value: solved
        - field: custom_status_id
          operator: includes
          value:
          - "1"
          - "2"
    AccountSettingsAgentObject:
      type: object
      properties:
        agent_workspace:
          type: boolean
          x-ballerina-name: agentWorkspace
        aw_self_serve_migration_enabled:
          type: boolean
          x-ballerina-name: awSelfServeMigrationEnabled
        agent_home:
          type: boolean
          x-ballerina-name: agentHome
        idle_timeout_enabled:
          type: boolean
          x-ballerina-name: idleTimeoutEnabled
        unified_agent_statuses:
          type: boolean
          x-ballerina-name: unifiedAgentStatuses
        focus_mode:
          type: boolean
          x-ballerina-name: focusMode
      description: "Configuration for the agent workspace. See [Agents](#agents)"
    TicketMetricsByTicketMetricIdResponse:
      type: object
      properties:
        ticket_metric:
          type: array
          items:
            $ref: '#/components/schemas/TicketMetricObject'
          x-ballerina-name: ticketMetric
    TicketFormObject:
      required:
      - name
      type: object
      properties:
        raw_name:
          type: string
          description: "The dynamic content placeholder, if present, or the \"name\"\
            \ value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/)"
          x-ballerina-name: rawName
        in_all_brands:
          type: boolean
          description: Is the form available for use in all brands on this account
          x-ballerina-name: inAllBrands
        ticket_field_ids:
          type: array
          description: ids of all ticket fields which are in this ticket form. The
            products use the order of the ids to show the field values in the tickets
          items:
            type: integer
          x-ballerina-name: ticketFieldIds
        active:
          type: boolean
          description: If the form is set as active
        agent_conditions:
          type: array
          description: Array of condition sets for agent workspaces
          items:
            type: object
            additionalProperties: true
          x-ballerina-name: agentConditions
        created_at:
          type: string
          description: The time the ticket form was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        raw_display_name:
          type: string
          description: "The dynamic content placeholder, if present, or the \"display_name\"\
            \ value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/)"
          x-ballerina-name: rawDisplayName
        display_name:
          type: string
          description: The name of the form that is displayed to an end user
          x-ballerina-name: displayName
        url:
          type: string
          description: URL of the ticket form
          readOnly: true
        default:
          type: boolean
          description: Is the form the default form for this account
        end_user_conditions:
          type: array
          description: Array of condition sets for end user products
          items:
            type: object
            additionalProperties: true
          x-ballerina-name: endUserConditions
        updated_at:
          type: string
          description: The time of the last update of the ticket form
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        end_user_visible:
          type: boolean
          description: Is the form visible to the end user
          x-ballerina-name: endUserVisible
        name:
          type: string
          description: The name of the form
        id:
          type: integer
          description: Automatically assigned when creating ticket form
          readOnly: true
        position:
          type: integer
          description: "The position of this form among other forms in the account,\
            \ i.e. dropdown"
        restricted_brand_ids:
          type: array
          description: ids of all brands that this ticket form is restricted to
          readOnly: true
          items:
            type: integer
          x-ballerina-name: restrictedBrandIds
      example:
        active: true
        agent_conditions:
        - child_fields:
          - id: 101
            is_required: false
            required_on_statuses:
              statuses:
              - new
              - open
              - pending
              - hold
              type: SOME_STATUSES
          - id: 200
            is_required: true
            required_on_statuses:
              statuses:
              - solved
              type: SOME_STATUSES
          parent_field_id: 100
          value: matching_value
        - child_fields:
          - id: 102
            is_required: true
            required_on_statuses:
              type: ALL_STATUSES
          - id: 200
            is_required: false
            required_on_statuses:
              type: NO_STATUSES
          parent_field_id: 101
          value: matching_value_2
        created_at: 2012-04-02T22:55:29Z
        default: true
        display_name: Snowboard Damage
        end_user_conditions:
        - child_fields:
          - id: 101
            is_required: true
          parent_field_id: 100
          value: matching_value
        - child_fields:
          - id: 202
            is_required: false
          parent_field_id: 200
          value: matching_value
        end_user_visible: true
        id: 47
        in_all_brands: false
        name: Snowboard Problem
        position: 9999
        raw_display_name: "{{dc.my_display_name}}"
        raw_name: Snowboard Problem
        restricted_brand_ids:
        - 47
        - 33
        - 22
        ticket_field_ids:
        - 2
        - 4
        - 5
        - 10
        - 100
        - 101
        - 102
        - 200
        updated_at: 2012-04-02T22:55:29Z
        url: https://company.zendesk.com/api/v2/ticket_forms/47.json
    ListDeletedTicketsResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/ListDeletedTicketsResponseAllOf1'
      - $ref: '#/components/schemas/OffsetPaginationObject'
    TargetsResponse:
      type: object
      properties:
        targets:
          type: array
          items:
            $ref: '#/components/schemas/TargetObject'
    UserObject:
      additionalProperties: true
      anyOf:
      - $ref: '#/components/schemas/UserForAdmin'
      - $ref: '#/components/schemas/UserForEndUser'
    WorkspaceInput:
      type: object
      properties:
        macros:
          type: array
          items:
            type: number
        ticket_form_id:
          type: number
          x-ballerina-name: ticketFormId
        description:
          type: string
          description: User-defined description of this workspace's purpose
        conditions:
          $ref: '#/components/schemas/ConditionsObject'
        title:
          type: string
          description: The title of the workspace
    ActionObject:
      type: object
      properties:
        field:
          type: string
          description: The name of a ticket field to modify
        value:
          type: string
          description: The new value of the field
    UserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserObject'
    ValueOneOf1:
      type: string
    TriggerRevisionsResponseTriggerRevisions:
      type: object
      properties:
        created_at:
          type: string
          x-ballerina-name: createdAt
        diff:
          $ref: '#/components/schemas/TriggerRevisionsResponseDiff'
        id:
          type: integer
        author_id:
          type: integer
          x-ballerina-name: authorId
        snapshot:
          $ref: '#/components/schemas/TriggerSnapshotObject'
        url:
          type: string
    CustomRoleConfigurationObject:
      type: object
      properties:
        moderate_forums:
          type: boolean
          readOnly: true
          x-ballerina-name: moderateForums
        side_conversation_create:
          type: boolean
          description: Whether or not the agent can contribute to side conversations
          x-ballerina-name: sideConversationCreate
        voice_access:
          type: boolean
          description: Whether or not the agent can answer and place calls to end
            users
          x-ballerina-name: voiceAccess
        user_view_access:
          type: string
          description: "What the agent can do with customer lists. Allowed values:\
            \ \"full\", \"manage-group\", \"manage-personal\", \"none\", \"readonly\""
          x-ballerina-name: userViewAccess
        ticket_merge:
          type: boolean
          description: Whether or not the agent can merge tickets
          x-ballerina-name: ticketMerge
        light_agent:
          type: boolean
          readOnly: true
          x-ballerina-name: lightAgent
        ticket_access:
          type: string
          description: "What kind of tickets the agent can access. Allowed values:\
            \ \"all\", \"assigned-only\", \"within-groups\", \"within-groups-and-public-groups\"\
            , \"within-organization\""
          x-ballerina-name: ticketAccess
        voice_dashboard_access:
          type: boolean
          description: Whether or not the agent can view details about calls on the
            Talk dashboard
          x-ballerina-name: voiceDashboardAccess
        assign_tickets_to_any_group:
          type: boolean
          description: Whether or not the agent can assign tickets to any group
          readOnly: true
          x-ballerina-name: assignTicketsToAnyGroup
        explore_access:
          type: string
          description: "Allowed values: \"edit\", \"full\", \"none\", \"readonly\""
          x-ballerina-name: exploreAccess
        macro_access:
          type: string
          description: "What the agent can do with macros. Allowed values: \"full\"\
            , \"manage-group\", \"manage-personal\", \"readonly\""
          x-ballerina-name: macroAccess
        organization_notes_editing:
          type: boolean
          description: Whether or not the agent can add or modify organization notes
          readOnly: true
          x-ballerina-name: organizationNotesEditing
        view_deleted_tickets:
          type: boolean
          description: Whether or not the agent can view deleted tickets
          x-ballerina-name: viewDeletedTickets
        end_user_list_access:
          type: string
          description: "Whether or not the agent can view lists of user profiles.\
            \ Allowed values: \"full\", \"none\""
          x-ballerina-name: endUserListAccess
        end_user_profile_access:
          type: string
          description: "What the agent can do with end-user profiles. Allowed values:\
            \ \"edit\", \"edit-within-org\", \"full\", \"readonly\""
          x-ballerina-name: endUserProfileAccess
        manage_ticket_fields:
          type: boolean
          description: Whether or not the agent can create and manage ticket fields
          x-ballerina-name: manageTicketFields
        report_access:
          type: string
          description: "What the agent can do with reports. Allowed values: \"full\"\
            , \"none\", \"readonly\""
          x-ballerina-name: reportAccess
        manage_dynamic_content:
          type: boolean
          description: Whether or not the agent can access dynamic content
          x-ballerina-name: manageDynamicContent
        forum_access:
          type: string
          description: "The kind of access the agent has to Guide. Allowed values:\
            \ \"edit-topics\", \"full\", \"readonly\""
          x-ballerina-name: forumAccess
        ticket_comment_access:
          type: string
          description: "What type of comments the agent can make. Allowed values:\
            \ \"public\", \"none\""
          x-ballerina-name: ticketCommentAccess
        twitter_search_access:
          type: boolean
          x-ballerina-name: twitterSearchAccess
        forum_access_restricted_content:
          type: boolean
          x-ballerina-name: forumAccessRestrictedContent
        group_access:
          type: boolean
          description: Whether or not the agent can add or modify groups
          readOnly: true
          x-ballerina-name: groupAccess
        ticket_editing:
          type: boolean
          description: Whether or not the agent can edit ticket properties
          x-ballerina-name: ticketEditing
        manage_user_fields:
          type: boolean
          description: Whether or not the agent can create and manage user fields
          x-ballerina-name: manageUserFields
        manage_business_rules:
          type: boolean
          description: Whether or not the agent can manage business rules
          x-ballerina-name: manageBusinessRules
        manage_organization_fields:
          type: boolean
          description: Whether or not the agent can create and manage organization
            fields
          x-ballerina-name: manageOrganizationFields
        ticket_deletion:
          type: boolean
          description: Whether or not the agent can delete tickets
          x-ballerina-name: ticketDeletion
        view_access:
          type: string
          description: "What the agent can do with views. Allowed values: \"full\"\
            , \"manage-group\", \"manage-personal\", \"playonly\", \"readonly\""
          x-ballerina-name: viewAccess
        ticket_tag_editing:
          type: boolean
          description: Whether or not the agent can edit ticket tags
          x-ballerina-name: ticketTagEditing
        manage_facebook:
          type: boolean
          description: Whether or not the agent can manage Facebook pages
          x-ballerina-name: manageFacebook
        manage_contextual_workspaces:
          type: boolean
          description: "Whether or not the agent can view, add, and edit contextual\
            \ workspaces"
          x-ballerina-name: manageContextualWorkspaces
        manage_ticket_forms:
          type: boolean
          description: Whether or not the agent can create and manage ticket forms
          x-ballerina-name: manageTicketForms
        manage_extensions_and_channels:
          type: boolean
          description: Whether or not the agent can manage channels and extensions
          x-ballerina-name: manageExtensionsAndChannels
        organization_editing:
          type: boolean
          description: Whether or not the agent can add or modify organizations
          x-ballerina-name: organizationEditing
        chat_access:
          type: boolean
          description: Whether or not the agent has access to Chat
          readOnly: true
          x-ballerina-name: chatAccess
      description: "Configuration settings for the role. See [Configuration](#configuration)"
    SLAPolicyFilterDefinitionResponseDefinitions:
      type: object
      properties:
        all:
          type: array
          items:
            $ref: '#/components/schemas/SLAPolicyFilterDefinitionResponseDefinitionsAll'
        any:
          type: array
          items:
            $ref: '#/components/schemas/SLAPolicyFilterDefinitionResponseDefinitionsAny'
    SLAPolicyResponse:
      type: object
      properties:
        sla_policy:
          allOf:
          - $ref: '#/components/schemas/SLAPolicyObject'
          x-ballerina-name: slaPolicy
    GroupsCountObjectCount:
      type: object
      properties:
        refreshed_at:
          type: string
          description: Timestamp that indicates when the count was last updated
          format: date-time
          readOnly: true
          x-ballerina-name: refreshedAt
        value:
          type: integer
          description: Approximate count of groups
          readOnly: true
    TriggerConditionDiffObject:
      type: object
      properties:
        field:
          type: array
          description: "An array of [change](#change) objects"
          items:
            $ref: '#/components/schemas/TriggerChangeObject'
        value:
          type: array
          description: "An array of [change](#change) objects"
          items:
            $ref: '#/components/schemas/TriggerChangeObject'
        operator:
          type: array
          description: "An array of [change](#change) objects"
          items:
            $ref: '#/components/schemas/TriggerChangeObject'
      example:
        field:
        - change: =
          content: status
        operator:
        - change: =
          content: less_than
        value:
        - change: "+"
          content: solved
    UserFieldsResponse:
      type: object
      properties:
        next_page:
          type: string
          description: URL of the next page
          nullable: true
          readOnly: true
          x-ballerina-name: nextPage
        user_fields:
          type: array
          items:
            $ref: '#/components/schemas/UserFieldObject'
          x-ballerina-name: userFields
        count:
          type: integer
          description: Total count of records retrieved
          readOnly: true
        previous_page:
          type: string
          description: URL of the previous page
          nullable: true
          readOnly: true
          x-ballerina-name: previousPage
    ViewsCountResponse:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/ViewsCountResponseCount'
    MacroInputRestriction:
      type: object
      properties:
        id:
          type: integer
          description: The numeric ID of the group or user
        ids:
          type: array
          description: The numeric IDs of the groups
          items:
            type: integer
        type:
          type: string
          description: Allowed values are Group or User
      additionalProperties: true
      description: Who may access this macro. Will be null when everyone in the account
        can access it
    TriggerActionDefinitionObjectValues:
      type: object
      properties:
        title:
          type: string
        value:
          type: string
        enabled:
          type: boolean
    TicketMergeInput:
      required:
      - ids
      type: object
      properties:
        source_comment_is_public:
          type: boolean
          description: Whether comment in source tickets are public or private
          x-ballerina-name: sourceCommentIsPublic
        target_comment_is_public:
          type: boolean
          description: Whether comment in target ticket is public or private
          x-ballerina-name: targetCommentIsPublic
        target_comment:
          type: string
          description: Private comment to add to the target ticket
          x-ballerina-name: targetComment
        ids:
          type: array
          description: Ids of tickets to merge into the target ticket
          items:
            type: integer
        source_comment:
          type: string
          description: Private comment to add to the source ticket
          x-ballerina-name: sourceComment
    AssigneeFieldAssignableGroupObject:
      title: AssigneeFieldAssignableGroups
      type: object
      properties:
        name:
          type: string
          description: Name of the group
          readOnly: true
        description:
          type: string
          description: Description of the group
          readOnly: true
        id:
          type: integer
          description: Group ID
          readOnly: true
      example:
        description: Engineering team for bugs
        id: 9182736455
        name: Engineering
    CustomFieldOptionResponse:
      type: object
      properties:
        custom_field_option:
          allOf:
          - $ref: '#/components/schemas/CustomFieldOptionObject'
          x-ballerina-name: customFieldOption
    SLAPolicyMetricObject:
      type: object
      properties:
        business_hours:
          type: boolean
          description: Whether the metric targets are being measured in business hours
            or calendar hours
          x-ballerina-name: businessHours
        metric:
          type: string
          description: The definition of the time that is being measured
        priority:
          type: string
          description: Priority that a ticket must match
        target:
          type: integer
          description: The time within which the end-state for a metric should be
            met
    HostMappingObject:
      title: Host Mapping
      type: object
      properties:
        reason:
          type: string
          description: Reason why a host mapping is valid or not
        expected_cnames:
          type: array
          description: Array of expected CNAME records for host mapping(s) of a given
            brand
          items:
            type: string
          x-ballerina-name: expectedCnames
        is_valid:
          type: boolean
          description: Whether a host mapping is valid or not for a given brand
          x-ballerina-name: isValid
        cname:
          type: string
          description: The canonical name record for a host mapping
      example:
        cname: google.com
        expected_cnames:
        - bar.zendesk.coom
        is_valid: false
        reason: wrong_cname
    AssigneeFieldAssignableSearchGroupObject:
      type: object
      properties:
        name:
          type: string
          description: Name of the group
        id:
          type: integer
          description: Group ID
      example:
        id: 9182736455
        name: Engineering
    QueueObjectSecondaryGroupsGroups:
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
    CustomObject:
      required:
      - key
      - title
      - title_pluralized
      type: object
      properties:
        raw_title:
          type: string
          description: "The dynamic content placeholder, if present, or the \"title\"\
            \ value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/)"
          x-ballerina-name: rawTitle
        title_pluralized:
          type: string
          description: User-defined pluralized version of the object's title
          x-ballerina-name: titlePluralized
        updated_at:
          type: string
          description: The time of the last update of the object
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        updated_by_user_id:
          type: string
          description: Id of the last user who updated the object
          readOnly: true
          x-ballerina-name: updatedByUserId
        raw_title_pluralized:
          type: string
          description: "The dynamic content placeholder, if present, or the \"raw_title_pluralized\"\
            \ value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/)"
          x-ballerina-name: rawTitlePluralized
        created_at:
          type: string
          description: The time the object type was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        description:
          type: string
          description: User-defined description of the object
        title:
          type: string
          description: User-defined display name for the object
        created_by_user_id:
          type: string
          description: Id of a user who created the object
          readOnly: true
          x-ballerina-name: createdByUserId
        raw_description:
          type: string
          description: "The dynamic content placeholder, if present, or the \"raw_description\"\
            \ value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/)"
          x-ballerina-name: rawDescription
        key:
          type: string
          description: A user-defined unique identifier. Writable on create only.
            Cannot be reused if deleted
          readOnly: true
        url:
          type: string
          description: Direct link to the specific custom object
          readOnly: true
    TicketFieldResponse:
      type: object
      properties:
        ticket_field:
          allOf:
          - $ref: '#/components/schemas/TicketFieldObject'
          x-ballerina-name: ticketField
    ViaObjectSourceTo:
      type: object
      properties:
        address:
          type: string
        name:
          type: string
    BrandObject:
      title: Brands
      required:
      - name
      - subdomain
      type: object
      properties:
        host_mapping:
          type: string
          description: "The hostmapping to this brand, if any. Only admins view this\
            \ property"
          x-ballerina-name: hostMapping
        ticket_form_ids:
          type: array
          description: The ids of ticket forms that are available for use by a brand
          readOnly: true
          items:
            type: integer
          x-ballerina-name: ticketFormIds
        active:
          type: boolean
          description: If the brand is set as active
        created_at:
          type: string
          description: The time the brand was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        help_center_state:
          type: string
          description: The state of the Help Center
          readOnly: true
          enum:
          - enabled
          - disabled
          - restricted
          x-ballerina-name: helpCenterState
        url:
          type: string
          description: The API url of this brand
          readOnly: true
        brand_url:
          type: string
          description: The url of the brand
          x-ballerina-name: brandUrl
        default:
          type: boolean
          description: Is the brand the default brand for this account
        has_help_center:
          type: boolean
          description: If the brand has a Help Center
          x-ballerina-name: hasHelpCenter
        is_deleted:
          type: boolean
          description: If the brand object is deleted or not
          x-ballerina-name: isDeleted
        updated_at:
          type: string
          description: The time of the last update of the brand
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        signature_template:
          type: string
          description: The signature template for a brand
          x-ballerina-name: signatureTemplate
        name:
          type: string
          description: The name of the brand
        logo:
          $ref: '#/components/schemas/AttachmentObject'
        subdomain:
          type: string
          description: The subdomain of the brand
        id:
          type: integer
          description: The ID automatically assigned when the brand is created
          readOnly: true
      example:
        active: true
        brand_url: https://brand1.com
        created_at: 2012-04-02T22:55:29Z
        default: true
        has_help_center: true
        help_center_state: enabled
        host_mapping: brand1.com
        id: 47
        logo:
          content_type: image/png
          content_url: https://company.zendesk.com/logos/brand1_logo.png
          file_name: brand1_logo.png
          id: 928374
          size: 166144
          thumbnails:
          - content_type: image/png
            content_url: https://company.zendesk.com/photos/brand1_logo_thumb.png
            file_name: brand1_logo_thumb.png
            id: 928375
            mapped_content_url: https://company.com/photos/brand1_logo_thumb.png
            size: 58298
            url: https://company.zendesk.com/api/v2/attachments/928375.json
          - content_type: image/png
            content_url: https://company.zendesk.com/photos/brand1_logo_small.png
            file_name: brand1_logo_small.png
            id: 928376
            mapped_content_url: https://company.com/photos/brand1_logo_small.png
            size: 58298
            url: https://company.zendesk.com/api/v2/attachments/928376.json
          url: https://company.zendesk.com/api/v2/attachments/928374.json
        name: Brand 1
        signature_template: "{{agent.signature}}"
        subdomain: brand1
        ticket_form_ids:
        - 47
        - 33
        - 22
        updated_at: 2012-04-02T22:55:29Z
        url: https://company.zendesk.com/api/v2/brands/47.json
    AccountSettingsAppsObject:
      type: object
      properties:
        create_public:
          type: boolean
          x-ballerina-name: createPublic
        create_private:
          type: boolean
          x-ballerina-name: createPrivate
        use:
          type: boolean
      description: "Apps configuration options. See [Apps](#apps)"
    TargetURL:
      required:
      - attribute
      - target_url
      type: object
      properties:
        password:
          type: string
          description: only writable
        method:
          type: string
          description: '"get"'
        target_url:
          type: string
          x-ballerina-name: targetUrl
        attribute:
          type: string
        username:
          type: string
    ViewCountResponse:
      type: object
      properties:
        view_count:
          allOf:
          - $ref: '#/components/schemas/ViewCountObject'
          x-ballerina-name: viewCount
    CursorBasedExportIncrementalTicketsResponse:
      type: object
      properties:
        before_url:
          type: string
          nullable: true
          x-ballerina-name: beforeUrl
        end_of_stream:
          type: boolean
          x-ballerina-name: endOfStream
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/TicketObject'
        after_cursor:
          type: string
          nullable: true
          x-ballerina-name: afterCursor
        after_url:
          type: string
          nullable: true
          x-ballerina-name: afterUrl
        before_cursor:
          type: string
          nullable: true
          x-ballerina-name: beforeCursor
      description: |
        See [Tickets](/api-reference/ticketing/tickets/tickets/) for a detailed example
      example:
        after_cursor: MTU3NjYxMzUzOS4wfHw0Njd8
        after_url: "https://{subdomain}.zendesk.com/api/v2/incremental/tickets/cursor.json?cursor=MTU3NjYxMzUzOS4wfHw0Njd8"
        before_cursor: null
        before_url: null
        end_of_stream: true
        tickets:
        - assignee_id: 235323
          collaborator_ids:
          - 35334
          - 234
          created_at: 2009-07-20T22:55:29Z
          custom_fields:
          - id: 27642
            value: "745"
          - id: 27648
            value: "yes"
          description: The fire is very colorful.
          due_at: null
          external_id: ahg35h3jh
          follower_ids:
          - 35334
          - 234
          group_id: 98738
          has_incidents: false
          id: 35436
          organization_id: 509974
          priority: high
          problem_id: 9873764
          raw_subject: "{{dc.printer_on_fire}}"
          recipient: support@company.com
          requester_id: 20978392
          satisfaction_rating:
            comment: Great support!
            id: 1234
            score: good
          sharing_agreement_ids:
          - 84432
          status: open
          subject: "Help, my printer is on fire!"
          submitter_id: 76872
          tags:
          - enterprise
          - other_tag
          type: incident
          updated_at: 2011-05-05T10:38:52Z
          url: https://company.zendesk.com/api/v2/tickets/35436.json
          via:
            channel: web
    OrganizationSubscriptionCreateRequest:
      type: object
      properties:
        organization_subscription:
          allOf:
          - $ref: '#/components/schemas/OrganizationSubscriptionInput'
          x-ballerina-name: organizationSubscription
    TargetJira:
      required:
      - password
      - target_url
      - username
      type: object
      properties:
        password:
          type: string
          description: only writable
        target_url:
          type: string
          x-ballerina-name: targetUrl
        username:
          type: string
    IncrementalSkillBasedRoutingAttributeValue:
      type: object
      properties:
        attribute_id:
          type: string
          description: Id of the associated attribute
          readOnly: true
          x-ballerina-name: attributeId
        name:
          type: string
          description: The name of the attribute value
          readOnly: true
        id:
          type: string
          description: Automatically assigned when an attribute value is created
          readOnly: true
        time:
          type: string
          description: "The time the attribute value was created, updated, or deleted"
          format: date-time
          readOnly: true
        type:
          type: string
          description: "One of \"create\", \"update\", or \"delete\""
          readOnly: true
    ActivitiesCountResponse:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/ActivitiesCountResponseCount'
    TicketFieldCountResponse:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/TicketFieldCountResponseCount'
    TicketImportRequest:
      type: object
      properties:
        ticket:
          $ref: '#/components/schemas/TicketImportInput'
    BulkUpdateDefaultCustomStatusRequest:
      type: object
      properties:
        ids:
          type: string
          description: The comma-separated list of custom ticket status ids to be
            set as default for their status categories
    UserIdentityResponse:
      type: object
      properties:
        identity:
          $ref: '#/components/schemas/UserIdentityObject'
    MacroInput:
      required:
      - actions
      - title
      type: object
      properties:
        restriction:
          $ref: '#/components/schemas/MacroInputRestriction'
        active:
          type: boolean
          description: Useful for determining if the macro should be displayed
        description:
          type: string
          description: The description of the macro
          nullable: true
        title:
          type: string
          description: The title of the macro
        actions:
          type: array
          description: Each action describes what the macro will do
          items:
            $ref: '#/components/schemas/ActionObject'
    TicketChatCommentRedactionResponse:
      type: object
      properties:
        chat_event:
          allOf:
          - $ref: '#/components/schemas/TicketChatCommentRedactionResponseChatEvent'
          x-ballerina-name: chatEvent
      example:
        chat_event:
          id: 1932802680168
          type: ChatStartedEvent
          value:
            chat_id: 2109.10502823.Sjuj2YrBpXwei
            history:
            - actor_id: 1900448983828
              actor_name: Visitor 36044085
              actor_type: end-user
              chat_index: 0
              timestamp: 1632470783218
              type: ChatJoin
            visitor_id: 10502823-16EkM3T6VNq7KMd
    DefinitionsResponseDefinitionsOperators1:
      type: object
      properties:
        terminal:
          type: boolean
        title:
          type: string
        value:
          type: string
    TriggerBatchRequest:
      required:
      - id
      type: object
      properties:
        category_id:
          type: string
          x-ballerina-name: categoryId
        active:
          type: boolean
        id:
          type: string
        position:
          type: integer
          format: int64
    ViaObjectSource:
      type: object
      properties:
        from:
          $ref: '#/components/schemas/ViaObjectSourceFrom'
        rel:
          type: string
          nullable: true
        to:
          $ref: '#/components/schemas/ViaObjectSourceTo'
      additionalProperties: true
      description: |
        For some channels a source object gives more information about how or why the ticket or event was created
    CustomObjectRecordResponse:
      type: object
      properties:
        custom_object_record:
          allOf:
          - $ref: '#/components/schemas/CustomObjectRecord'
          x-ballerina-name: customObjectRecord
    OrganizationSubscriptionInput:
      type: object
      properties:
        user_id:
          type: integer
          description: The ID of the user
          x-ballerina-name: userId
        organization_id:
          type: integer
          description: The ID of the organization
          x-ballerina-name: organizationId
    SkillBasedRoutingAttributeValuesResponse:
      type: object
      properties:
        attribute_values:
          type: array
          items:
            $ref: '#/components/schemas/SkillBasedRoutingAttributeValueObject'
          x-ballerina-name: attributeValues
    TargetClickatell:
      required:
      - api_id
      - password
      - to
      - username
      type: object
      properties:
        api_id:
          type: string
          x-ballerina-name: apiId
        us_small_business_account:
          type: string
          x-ballerina-name: usSmallBusinessAccount
        password:
          type: string
          description: only writable
        method:
          type: string
          description: Read-only
        target_url:
          type: string
          description: Read-only
          x-ballerina-name: targetUrl
        from:
          type: string
        attribute:
          type: string
          description: Read-only
        to:
          type: string
        username:
          type: string
    TriggerObject:
      required:
      - actions
      - conditions
      - title
      type: object
      properties:
        raw_title:
          type: string
          description: The raw format of the title of the trigger
          x-ballerina-name: rawTitle
        active:
          type: boolean
          description: Whether the trigger is active
        created_at:
          type: string
          description: The time the trigger was created
          readOnly: true
          x-ballerina-name: createdAt
        description:
          type: string
          description: The description of the trigger
        title:
          type: string
          description: The title of the trigger
        url:
          type: string
          description: The url of the trigger
          readOnly: true
        default:
          type: boolean
          description: "If true, the trigger is a default trigger"
          readOnly: true
        category_id:
          type: string
          description: The ID of the category the trigger belongs to
          x-ballerina-name: categoryId
        updated_at:
          type: string
          description: The time of the last update of the trigger
          readOnly: true
          x-ballerina-name: updatedAt
        id:
          type: integer
          description: Automatically assigned when created
          readOnly: true
        position:
          type: integer
          description: "Position of the trigger, determines the order they will execute\
            \ in"
        conditions:
          $ref: '#/components/schemas/TriggerConditionsObject'
        actions:
          type: array
          description: "An array of actions describing what the trigger will do. See\
            \ [Actions reference](/documentation/ticketing/reference-guides/actions-reference)"
          items:
            $ref: '#/components/schemas/TriggerActionObject'
      example:
        actions:
        - {}
        active: true
        category_id: "10026"
        conditions: {}
        created_at: 2012-09-25T22:50:26Z
        default: false
        description: Close and save a ticket
        id: 25
        position: 8
        raw_title: Close and Save
        title: Close and Save
        updated_at: 2012-09-25T22:50:26Z
        url: "http://{subdomain}.zendesk.com/api/v2/triggers/25.json"
    TicketUpdateResponse:
      type: object
      properties:
        ticket:
          $ref: '#/components/schemas/TicketObject'
        audit:
          $ref: '#/components/schemas/AuditObject'
    UserCreateInput:
      required:
      - email
      - name
      type: object
      properties:
        identities:
          type: array
          items:
            $ref: '#/components/schemas/UserCreateInputIdentities'
        role:
          type: string
        custom_role_id:
          type: integer
          x-ballerina-name: customRoleId
        organization:
          $ref: '#/components/schemas/UserCreateInputOrganization'
        organization_id:
          type: integer
          x-ballerina-name: organizationId
        name:
          type: string
        external_id:
          type: string
          x-ballerina-name: externalId
        email:
          type: string
    TargetFlowdock:
      required:
      - api_token
      type: object
      properties:
        api_token:
          type: string
          x-ballerina-name: apiToken
    AccountSettingsObject:
      type: object
      properties:
        localization:
          $ref: '#/components/schemas/AccountSettingsLocalizationObject'
        voice:
          $ref: '#/components/schemas/AccountSettingsVoiceObject'
        side_conversations:
          allOf:
          - $ref: '#/components/schemas/AccountSettingsSideConversationsObject'
          x-ballerina-name: sideConversations
        tickets:
          $ref: '#/components/schemas/AccountSettingsTicketObject'
        branding:
          $ref: '#/components/schemas/AccountSettingsBrandingObject'
        lotus:
          $ref: '#/components/schemas/AccountSettingsLotusObject'
        rule:
          $ref: '#/components/schemas/AccountSettingsRuleObject'
        gooddata_advanced_analytics:
          allOf:
          - $ref: '#/components/schemas/AccountSettingsGooddataAdvancedAnalyticsObject'
          x-ballerina-name: gooddataAdvancedAnalytics
        active_features:
          allOf:
          - $ref: '#/components/schemas/AccountSettingsActiveFeaturesObject'
          x-ballerina-name: activeFeatures
        billing:
          $ref: '#/components/schemas/AccountSettingsBillingObject'
        ticket_form:
          allOf:
          - $ref: '#/components/schemas/AccountSettingsTicketFormObject'
          x-ballerina-name: ticketForm
        routing:
          $ref: '#/components/schemas/AccountSettingsRoutingObject'
        twitter:
          $ref: '#/components/schemas/AccountSettingsTwitterObject'
        onboarding:
          $ref: '#/components/schemas/AccountSettingsOnboardingObject'
        api:
          $ref: '#/components/schemas/AccountSettingsApiObject'
        limits:
          $ref: '#/components/schemas/AccountSettingsLimitsObject'
        apps:
          $ref: '#/components/schemas/AccountSettingsAppsObject'
        brands:
          $ref: '#/components/schemas/AccountSettingsBrandsObject'
        groups:
          $ref: '#/components/schemas/AccountSettingsGroupObject'
        cdn:
          $ref: '#/components/schemas/AccountSettingsCdnObject'
        cross_sell:
          allOf:
          - $ref: '#/components/schemas/AccountSettingsCrossSellObject'
          x-ballerina-name: crossSell
        agents:
          $ref: '#/components/schemas/AccountSettingsAgentObject'
        chat:
          $ref: '#/components/schemas/AccountSettingsChatObject'
        ticket_sharing_partners:
          allOf:
          - $ref: '#/components/schemas/AccountSettingsTicketSharingPartnersObject'
          x-ballerina-name: ticketSharingPartners
        metrics:
          $ref: '#/components/schemas/AccountSettingsMetricsObject'
        google_apps:
          allOf:
          - $ref: '#/components/schemas/AccountSettingsGoogleAppsObject'
          x-ballerina-name: googleApps
        user:
          $ref: '#/components/schemas/AccountSettingsUserObject'
        statistics:
          $ref: '#/components/schemas/AccountSettingsStatisticsObject'
      example:
        active_features:
          advanced_analytics: false
          agent_forwarding: false
          allow_ccs: true
          allow_email_template_customization: true
          automatic_answers: false
          bcc_archiving: false
          benchmark_opt_out: false
          business_hours: false
          chat: false
          chat_about_my_ticket: false
          csat_reason_code: false
          custom_dkim_domain: true
          customer_context_as_default: false
          customer_satisfaction: false
          dynamic_contents: false
          explore: true
          explore_on_support_ent_plan: false
          explore_on_support_pro_plan: false
          facebook: false
          facebook_login: false
          fallback_composer: false
          forum_analytics: true
          good_data_and_explore: false
          google_login: false
          insights: false
          is_abusive: false
          light_agents: false
          markdown: false
          on_hold_status: false
          organization_access_enabled: true
          rich_content_in_emails: true
          sandbox: false
          satisfaction_prediction: false
          suspended_ticket_notification: false
          ticket_forms: true
          ticket_tagging: true
          topic_suggestion: false
          twitter: true
          twitter_login: false
          user_org_fields: true
          user_tagging: true
          voice: true
        agents:
          agent_home: false
          agent_workspace: false
          aw_self_serve_migration_enabled: true
          focus_mode: false
          idle_timeout_enabled: false
          unified_agent_statuses: false
        api:
          accepted_api_agreement: true
          api_password_access: "true"
          api_token_access: "true"
        apps:
          create_private: true
          create_public: false
          use: true
        billing:
          backend: zuora
        branding:
          favicon_url: null
          header_color: 78A300
          header_logo_url: null
          page_background_color: "333333"
          tab_background_color: 7FA239
          text_color: FFFFFF
        brands:
          default_brand_id: 1873
          require_brand_on_new_tickets: false
        cdn:
          cdn_provider: default
          fallback_cdn_provider: cloudfront
          hosts:
          - name: default
            url: https://p18.zdassets.com
          - name: cloudfront
            url: https://d2y9oszrd3dhjh.cloudfront.net
        chat:
          available: true
          enabled: false
          integrated: true
          maximum_request_count: 1
          welcome_message: Hi there. How can I help today?
        cross_sell:
          show_chat_tooltip: true
          xsell_source: null
        gooddata_advanced_analytics:
          enabled: true
        google_apps:
          has_google_apps: false
          has_google_apps_admin: false
        groups:
          check_group_name_uniqueness: true
        limits:
          attachment_size: 52428800
        localization:
          locale_ids:
          - 1042
        lotus:
          pod_id: 999
          prefer_lotus: true
          reporting: true
        metrics:
          account_size: 100-399
        onboarding:
          checklist_onboarding_version: 2
          onboarding_segments: null
          product_sign_up: null
        routing:
          autorouting_tag: ""
          enabled: false
          max_email_capacity: 0
          max_messaging_capacity: 0
          reassignment_messaging_enabled: true
          reassignment_messaging_timeout: 30
          reassignment_talk_timeout: 30
        rule:
          macro_most_used: true
          macro_order: alphabetical
          skill_based_filtered_views: []
          using_skill_based_routing: false
        side_conversations:
          email_channel: false
          msteams_channel: false
          show_in_context_panel: false
          slack_channel: false
          tickets_channel: false
        statistics:
          forum: true
          rule_usage: true
          search: true
        ticket_form:
          raw_ticket_forms_instructions: Please choose your issue below
          ticket_forms_instructions: Please choose your issue below
        ticket_sharing_partners:
          support_addresses:
          - support@grokpetre.zendesk.com
        tickets:
          accepted_new_collaboration_tos: false
          agent_collision: true
          agent_invitation_enabled: true
          agent_ticket_deletion: false
          allow_group_reset: true
          assign_default_organization: true
          assign_tickets_upon_solve: true
          auto_translation_enabled: false
          auto_updated_ccs_followers_rules: false
          chat_sla_enablement: false
          collaboration: true
          comments_public_by_default: true
          email_attachments: false
          emoji_autocompletion: true
          follower_and_email_cc_collaborations: false
          has_color_text: true
          is_first_comment_private_enabled: true
          light_agent_email_ccs_allowed: false
          list_empty_views: true
          list_newest_comments_first: true
          markdown_ticket_comments: false
          maximum_personal_views_to_list: 8
          private_attachments: false
          rich_text_comments: true
          status_hold: false
          tagging: true
          using_skill_based_routing: false
        twitter:
          shorten_url: optional
        user:
          agent_created_welcome_emails: true
          end_user_phone_number_validation: false
          have_gravatars_enabled: true
          language_selection: true
          multiple_organizations: false
          tagging: true
          time_zone_selection: true
        voice:
          agent_confirmation_when_forwarding: true
          agent_wrap_up_after_calls: true
          enabled: true
          logging: true
          maximum_queue_size: 5
          maximum_queue_wait_time: 1
          only_during_business_hours: false
          outbound_enabled: true
          recordings_public: true
          uk_mobile_forwarding: true
    BrandsResponse:
      title: Brands
      type: object
      allOf:
      - $ref: '#/components/schemas/OffsetPaginationObject'
      - $ref: '#/components/schemas/BrandsResponseAllOf2'
    TagsResponse:
      type: object
      properties:
        next_page:
          type: string
          description: The url of the previous page
          nullable: true
          readOnly: true
          x-ballerina-name: nextPage
        count:
          type: integer
          description: The number of pages
          readOnly: true
        previous_page:
          type: string
          description: The url of the next page
          nullable: true
          readOnly: true
          x-ballerina-name: previousPage
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagListTagObject'
    EssentialsCardsResponse:
      type: object
      properties:
        object_layouts:
          type: array
          items:
            $ref: '#/components/schemas/EssentialsCardObject'
          x-ballerina-name: objectLayouts
    QueueObjectSecondaryGroups:
      type: object
      properties:
        count:
          type: integer
        groups:
          type: array
          items:
            $ref: '#/components/schemas/QueueObjectSecondaryGroupsGroups'
      description: Secondary group ids linked to the queue
    CustomObjectFieldResponse:
      type: object
      properties:
        custom_object_field:
          allOf:
          - $ref: '#/components/schemas/CustomObjectField'
          x-ballerina-name: customObjectField
    TicketMetricEventsResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/TicketMetricEventsResponseAllOf1'
      - $ref: '#/components/schemas/TicketMetricEventsResponseTicketMetricEventsResponseAllOf12'
    BatchJobResponse:
      type: object
      properties:
        results:
          $ref: '#/components/schemas/BatchJobResponseResults'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/BatchErrorItem'
        status:
          type: string
          enum:
          - complete
          - failed
    GroupSLAPolicyResponse:
      type: object
      properties:
        group_sla_policy:
          allOf:
          - $ref: '#/components/schemas/GroupSLAPolicyObject'
          x-ballerina-name: groupSlaPolicy
    MacroApplyTicketResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/MacroApplyTicketResponseResult'
    TriggerConditionDefinitionObjectAnyOperators:
      type: object
      properties:
        terminal:
          type: boolean
        title:
          type: string
        value:
          type: string
    TargetBasecamp:
      required:
      - project_id
      - resource
      - target_url
      - token
      type: object
      properties:
        password:
          type: string
          description: The 37Signals password for the Basecamp account (only writable)
        project_id:
          type: string
          description: The ID of the project in Basecamp where updates should be pushed
          x-ballerina-name: projectId
        resource:
          type: string
          description: '"todo" or "message"'
        target_url:
          type: string
          description: "The URL of your Basecamp account, including protocol and path"
          x-ballerina-name: targetUrl
        message_id:
          type: string
          description: Can be filled if it is a "message" resource
          x-ballerina-name: messageId
        todo_list_id:
          type: string
          description: Can be filled if it is a "todo" resource
          x-ballerina-name: todoListId
        token:
          type: string
          description: Get the API token from My info > Show your tokens > Token for
            feed readers or the Basecamp API in your Basecamp account
        username:
          type: string
          description: The 37Signals username of the account you use to log in to
            Basecamp
    TimeBasedExportIncrementalUsersResponse:
      type: object
      properties:
        next_page:
          type: string
          nullable: true
          x-ballerina-name: nextPage
        end_of_stream:
          type: boolean
          x-ballerina-name: endOfStream
        count:
          type: integer
        end_time:
          type: integer
          x-ballerina-name: endTime
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserObject'
      example:
        count: 1
        end_of_stream: true
        end_time: 1601357503
        next_page: https://example.zendesk.com/api/v2/incremental/ticket_events.json?start_time=1601357503
        users:
        - active: true
          alias: Mr. Johnny
          created_at: 2009-07-20T22:55:29Z
          custom_role_id: 9373643
          details: ""
          email: johnny@example.com
          external_id: sai989sur98w9
          id: 35436
          last_login_at: 2011-05-05T10:38:52Z
          locale: en-US
          locale_id: 1
          moderator: true
          name: Johnny Agent
          notes: Johnny is a nice guy!
          only_private_comments: false
          organization_id: 57542
          phone: "+15551234567"
          photo:
            content_type: image/png
            content_url: https://company.zendesk.com/photos/my_funny_profile_pic.png
            id: 928374
            name: my_funny_profile_pic.png
            size: 166144
            thumbnails:
            - content_type: image/png
              content_url: https://company.zendesk.com/photos/my_funny_profile_pic_thumb.png
              id: 928375
              name: my_funny_profile_pic_thumb.png
              size: 58298
          restricted_agent: true
          role: agent
          role_type: 0
          shared: false
          shared_agent: false
          signature: "Have a nice day, Johnny"
          suspended: true
          tags:
          - enterprise
          - other_tag
          ticket_restriction: assigned
          time_zone: Copenhagen
          updated_at: 2011-05-05T10:38:52Z
          url: https://company.zendesk.com/api/v2/users/35436.json
          user_fields:
            user_date: 2012-07-23T00:00:00Z
            user_decimal: 5.1
            user_dropdown: option_1
          verified: true
    ExportIncrementalTicketEventsResponse:
      type: object
      properties:
        next_page:
          type: string
          nullable: true
          x-ballerina-name: nextPage
        end_of_stream:
          type: boolean
          x-ballerina-name: endOfStream
        ticket_events:
          type: array
          items:
            $ref: '#/components/schemas/TicketMetricEventBaseObject'
          x-ballerina-name: ticketEvents
        count:
          type: integer
        end_time:
          type: integer
          x-ballerina-name: endTime
      example:
        count: 1
        end_of_stream: true
        end_time: 1601357503
        next_page: https://example.zendesk.com/api/v2/incremental/ticket_events.json?start_time=1601357503
        ticket_events:
        - id: 926256957613
          instance_id: 1
          metric: agent_work_time
          ticket_id: 155
          time: 2020-10-26T12:53:12Z
          type: measure
    TargetFailureObject:
      type: object
      properties:
        raw_request:
          type: string
          description: The raw message of the target request
          readOnly: true
          x-ballerina-name: rawRequest
        status_code:
          type: integer
          description: HTTP status code of the target failure
          readOnly: true
          x-ballerina-name: statusCode
        target_name:
          type: string
          description: Name of the target failure
          readOnly: true
          x-ballerina-name: targetName
        created_at:
          type: string
          description: Time of the failure
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        consecutive_failure_count:
          type: integer
          description: Number of times the target failed consecutively
          readOnly: true
          x-ballerina-name: consecutiveFailureCount
        id:
          type: integer
          description: The ID of the target failure
          readOnly: true
        raw_response:
          type: string
          description: The raw response of the failure
          readOnly: true
          x-ballerina-name: rawResponse
        url:
          type: string
          description: The API url of the failure record
          readOnly: true
      example:
        consecutive_failure_count: 1
        created_at: 2017-09-05T10:38:52Z
        id: 6001326
        raw_request: "GET /api/v2/tickets.json HTTP/1.1\r\nUser-Agent: Zendesk Target\r\
          \n ..."
        raw_response: "HTTP/1.1 401 Unauthorized\r\nServer: nginx\r\n ..."
        status_code: 401
        target_name: My URL Target
        url: https://example.zendesk.com/api/v2/target_failures/6001326.json
    TargetPivotal:
      required:
      - project_id
      - story_title
      - story_type
      - token
      type: object
      properties:
        story_type:
          type: string
          x-ballerina-name: storyType
        owner_by:
          type: string
          x-ballerina-name: ownerBy
        requested_by:
          type: string
          x-ballerina-name: requestedBy
        project_id:
          type: string
          x-ballerina-name: projectId
        story_title:
          type: string
          x-ballerina-name: storyTitle
        story_labels:
          type: string
          x-ballerina-name: storyLabels
        token:
          type: string
    CustomObjectCreateInput:
      type: object
      properties:
        title_pluralized:
          type: string
          description: Pluralized version of the object's title
          x-ballerina-name: titlePluralized
        title:
          type: string
          description: Display name for the object
        key:
          type: string
          description: Unique identifier. Writable on create only
    TriggerActionDiffObject:
      type: object
      properties:
        field:
          type: array
          description: "An array of [change](#change) objects"
          items:
            $ref: '#/components/schemas/TriggerChangeObject'
        value:
          type: array
          description: "An array of [change](#change) objects"
          items:
            $ref: '#/components/schemas/TriggerChangeObject'
      example:
        field:
        - change: "+"
          content: solved
        value:
        - change: "-"
          content: open
    CustomFieldOptionObject:
      required:
      - name
      - value
      type: object
      properties:
        raw_name:
          type: string
          description: Raw name of the dropdown option
          readOnly: true
          x-ballerina-name: rawName
        name:
          type: string
          description: Name of the dropdown option
        id:
          type: integer
          description: Automatically assigned upon creation
          readOnly: true
        position:
          type: integer
          description: Position of the dropdown option
        value:
          type: string
          description: Value of the dropdown option
        url:
          type: string
          description: URL of the dropdown option
          readOnly: true
    SLAPolicyFilterDefinitionResponseDefinitionsAny:
      type: object
      properties:
        operators:
          type: array
          items:
            $ref: '#/components/schemas/SLAPolicyFilterDefinitionResponseDefinitionsOperators1'
        values:
          $ref: '#/components/schemas/SLAPolicyFilterDefinitionResponseDefinitionsValues1'
        title:
          type: string
        value:
          type: string
        group:
          type: string
        target:
          type: string
          nullable: true
    BookmarkCreateRequest:
      type: object
      properties:
        bookmark:
          $ref: '#/components/schemas/BookmarkInput'
    TicketFormsResponse:
      type: object
      properties:
        ticket_forms:
          type: array
          items:
            $ref: '#/components/schemas/TicketFormObject'
          x-ballerina-name: ticketForms
    SuspendedTicketsExportResponseExport:
      type: object
      properties:
        view_id:
          type: string
          readOnly: true
          x-ballerina-name: viewId
        status:
          type: string
          readOnly: true
    SharingAgreementsResponse:
      type: object
      properties:
        sharing_agreements:
          type: array
          items:
            $ref: '#/components/schemas/SharingAgreementObject'
          x-ballerina-name: sharingAgreements
    SatisfactionReasonResponse:
      type: object
      properties:
        reason:
          type: array
          items:
            $ref: '#/components/schemas/SatisfactionReasonObject'
    BookmarkObject:
      title: Bookmarks
      type: object
      properties:
        ticket:
          type: object
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/TicketObject'
        created_at:
          type: string
          description: The time the bookmark was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        id:
          type: integer
          description: Automatically assigned when the bookmark is created
          readOnly: true
        url:
          type: string
          description: The API url of this bookmark
          readOnly: true
      example:
        created_at: 2014-11-20T22:55:29Z
        id: 35436
        ticket:
          description: The fire is very colorful.
          id: 60
          priority: high
          requester_id: 156
          subject: "Help, my printer is on fire!"
        url: "https://{subdomain}.zendesk.com/api/v2/bookmarks/35436.json"
    CustomStatusObject:
      required:
      - agent_label
      - status_category
      type: object
      properties:
        end_user_description:
          type: string
          description: The description displayed to end users
          x-ballerina-name: endUserDescription
        active:
          type: boolean
          description: "If true, the custom status is set to active, If false, the\
            \ custom status is set to inactive"
        created_at:
          type: string
          description: The date and time the custom ticket status was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        description:
          type: string
          description: The description of when the user should select this custom
            ticket status
        raw_description:
          type: string
          description: "The dynamic content placeholder. If the dynamic content placeholder\
            \ is not available, this is the \"description\" value. [Dynamic Content\
            \ Items](/api-reference/ticketing/ticket-management/dynamic_content/)"
          readOnly: true
          x-ballerina-name: rawDescription
        default:
          type: boolean
          description: "If true, the custom status is set to default. If false, the\
            \ custom status is set to non-default"
        end_user_label:
          type: string
          description: The label displayed to end users. Maximum length is 48 characters
          x-ballerina-name: endUserLabel
        raw_agent_label:
          type: string
          description: "The dynamic content placeholder. If the dynamic content placeholder\
            \ is not available, this is the \"agent_label\" value. See [Dynamic Content\
            \ Items](/api-reference/ticketing/ticket-management/dynamic_content/)"
          readOnly: true
          x-ballerina-name: rawAgentLabel
        status_category:
          type: string
          description: The status category the custom ticket status belongs to
          enum:
          - new
          - open
          - pending
          - hold
          - solved
          x-ballerina-name: statusCategory
        updated_at:
          type: string
          description: The date and time the custom ticket status was last updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        raw_end_user_description:
          type: string
          description: "The dynamic content placeholder. If the dynamic content placeholder\
            \ is not available, this is the \"end_user_description\" value. See [Dynamic\
            \ Content Items](/api-reference/ticketing/ticket-management/dynamic_content/)"
          readOnly: true
          x-ballerina-name: rawEndUserDescription
        id:
          type: integer
          description: Automatically assigned when the custom ticket status is created
          readOnly: true
        raw_end_user_label:
          type: string
          description: "The dynamic content placeholder. If the dynamic content placeholder\
            \ is not available, this is the \"end_user_label\" value. See [Dynamic\
            \ Content Items](/api-reference/ticketing/ticket-management/dynamic_content/)"
          readOnly: true
          x-ballerina-name: rawEndUserLabel
        agent_label:
          type: string
          description: The label displayed to agents. Maximum length is 48 characters
          x-ballerina-name: agentLabel
    AutomationResponse:
      type: object
      properties:
        automation:
          $ref: '#/components/schemas/AutomationObject'
    SearchCountResponse:
      type: object
      properties:
        count:
          type: integer
    TicketAuditResponse:
      type: object
      properties:
        audit:
          $ref: '#/components/schemas/TicketAuditObject'
    AccountSettingsRoutingObject:
      type: object
      properties:
        reassignment_messaging_enabled:
          type: boolean
          x-ballerina-name: reassignmentMessagingEnabled
        reassignment_messaging_timeout:
          type: integer
          x-ballerina-name: reassignmentMessagingTimeout
        autorouting_tag:
          type: string
          x-ballerina-name: autoroutingTag
        max_email_capacity:
          type: integer
          x-ballerina-name: maxEmailCapacity
        enabled:
          type: boolean
        max_messaging_capacity:
          type: integer
          x-ballerina-name: maxMessagingCapacity
        reassignment_talk_timeout:
          type: integer
          x-ballerina-name: reassignmentTalkTimeout
      description: "Configuration for routing. See [Routing](#routing)"
    JobStatusObject:
      type: object
      properties:
        job_type:
          type: string
          description: The type of the job
          readOnly: true
          x-ballerina-name: jobType
        total:
          type: integer
          description: The total number of tasks this job is batching through
          nullable: true
          readOnly: true
        progress:
          type: integer
          description: Number of tasks that have already been completed
          nullable: true
          readOnly: true
        id:
          type: string
          description: Automatically assigned when the job is queued
          readOnly: true
        message:
          type: string
          description: "Message from the job worker, if any"
          nullable: true
          readOnly: true
        results:
          description: "Result data from processed tasks. See [Results](#results)\
            \ below"
          readOnly: true
          oneOf:
          - type: array
            nullable: true
            items:
              $ref: '#/components/schemas/JobStatusResultObject'
          - required:
            - success
            type: object
            properties:
              success:
                type: boolean
                description: Whether the action was successful or not
                readOnly: true
        url:
          type: string
          description: The URL to poll for status updates
          readOnly: true
        status:
          type: string
          description: "The current status. One of the following: \"queued\", \"working\"\
            , \"failed\", \"completed\""
          readOnly: true
      example:
        id: 82de0b044094f0c67893ac9fe64f1a99
        message: Completed at 2018-03-08 10:07:04 +0000
        progress: 2
        results:
        - action: update
          id: 244
          status: Updated
          success: true
        - action: update
          id: 245
          status: Updated
          success: true
        status: completed
        total: 2
        url: https://example.zendesk.com/api/v2/job_statuses/82de0b0467893ac9fe64f1a99.json
    AccountSettingsGroupObject:
      type: object
      properties:
        check_group_name_uniqueness:
          type: boolean
          x-ballerina-name: checkGroupNameUniqueness
      description: Group configuration
    AccountSettingsGooddataAdvancedAnalyticsObject:
      type: object
      properties:
        enabled:
          type: boolean
      description: "GoodData settings, used for insights. Legacy configuration prior\
        \ to Zendesk Explore. See [GoodData Advanced Analytics](#gooddata-advanced-analytics)"
    AuthorObject:
      type: object
      properties:
        name:
          type: string
          description: The author name
          readOnly: true
        id:
          type: integer
          description: The author id
          readOnly: true
        email:
          type: string
          description: The author email
          readOnly: true
    CustomStatusesResponse:
      type: object
      properties:
        custom_statuses:
          type: array
          items:
            $ref: '#/components/schemas/CustomStatusObject'
          x-ballerina-name: customStatuses
    MacroApplyTicketResponseResult:
      type: object
      properties:
        ticket:
          $ref: '#/components/schemas/MacroApplyTicketResponseResultTicket'
    Pagination:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        links:
          $ref: '#/components/schemas/PaginationLinks'
    RecoverSuspendedTicketUnprocessableContentResponse:
      type: object
      properties:
        ticket:
          type: array
          items:
            $ref: '#/components/schemas/SuspendedTicketObject'
    TriggerDefinitionResponse:
      type: object
      properties:
        definitions:
          $ref: '#/components/schemas/TriggerDefinitionObject'
    AttachmentObject:
      type: object
      description: "A file represented as an [Attachment](/api-reference/ticketing/tickets/ticket-attachments/)\
        \ object"
      example:
        content_type: image/png
        content_url: https://company.zendesk.com/attachments/my_funny_profile_pic.png
        file_name: my_funny_profile_pic.png
        id: 928374
        size: 166144
        thumbnails:
        - content_type: image/png
          content_url: https://company.zendesk.com/attachments/my_funny_profile_pic_thumb.png
          file_name: my_funny_profile_pic_thumb.png
          id: 928375
          size: 58298
      allOf:
      - $ref: '#/components/schemas/AttachmentBaseObject'
      - $ref: '#/components/schemas/AttachmentThumbnails'
    LocalesResponse:
      type: object
      properties:
        locales:
          type: array
          items:
            $ref: '#/components/schemas/LocaleObject'
    MacroObject:
      type: object
      example:
        actions: []
        active: true
        description: Sets the ticket status to `solved`
        id: 25
        position: 42
        restriction:
          id: 4
          type: User
        title: Close and Save
      allOf:
      - $ref: '#/components/schemas/MacroCommonObject'
      - $ref: '#/components/schemas/MacroObjectAllOf2'
    SkillBasedRoutingAttributeResponse:
      type: object
      properties:
        attribute:
          $ref: '#/components/schemas/SkillBasedRoutingAttributeObject'
    AttachmentResponse:
      type: object
      properties:
        attachment:
          $ref: '#/components/schemas/AttachmentObject'
    MacroUpdateManyInput:
      type: object
      properties:
        macros:
          type: array
          items:
            $ref: '#/components/schemas/MacroUpdateManyInputMacros'
    RequestObjectCustomFields:
      type: object
      properties:
        id:
          type: integer
        value:
          type: string
    SLAPolicyFilterDefinitionResponseDefinitionsAll:
      type: object
      properties:
        operators:
          type: array
          items:
            $ref: '#/components/schemas/SLAPolicyFilterDefinitionResponseDefinitionsOperators'
        values:
          $ref: '#/components/schemas/SLAPolicyFilterDefinitionResponseDefinitionsValues'
        title:
          type: string
        value:
          type: string
        group:
          type: string
        target:
          type: string
          nullable: true
    AutomationsResponse:
      type: object
      properties:
        next_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: nextPage
        automations:
          type: array
          items:
            $ref: '#/components/schemas/AutomationObject'
        count:
          type: integer
          readOnly: true
        previous_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: previousPage
    GroupMembershipObject:
      required:
      - group_id
      - user_id
      type: object
      properties:
        default:
          type: boolean
          description: "If true, tickets assigned directly to the agent will assume\
            \ this membership's group"
        updated_at:
          type: string
          description: The time of the last update of the group
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        group_id:
          type: integer
          description: The id of a group
          x-ballerina-name: groupId
        user_id:
          type: integer
          description: The id of an agent
          x-ballerina-name: userId
        created_at:
          type: string
          description: The time the group was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        id:
          type: integer
          description: Automatically assigned upon creation
          readOnly: true
        url:
          type: string
          description: The API url of this record
          readOnly: true
    JobStatusResultObject:
      additionalProperties: true
      oneOf:
      - $ref: '#/components/schemas/CreateResourceResult'
      - $ref: '#/components/schemas/UpdateResourceResult'
    ActivitiesCountResponseCount:
      type: object
      properties:
        refreshed_at:
          type: string
          format: date-time
          x-ballerina-name: refreshedAt
        value:
          type: integer
    GroupMembershipResponse:
      type: object
      properties:
        group_membership:
          allOf:
          - $ref: '#/components/schemas/GroupMembershipObject'
          x-ballerina-name: groupMembership
    ListTicketEmailCCsResponse:
      type: object
      additionalProperties: true
    DeletedUserObject:
      required:
      - active
      - created_at
      - email
      - id
      - locale
      - locale_id
      - name
      - organization_id
      - phone
      - photo
      - role
      - shared_phone_number
      - time_zone
      - updated_at
      - url
      type: object
      properties:
        role:
          type: string
        shared_phone_number:
          type: string
          nullable: true
          x-ballerina-name: sharedPhoneNumber
        active:
          type: boolean
        created_at:
          type: string
          x-ballerina-name: createdAt
        photo:
          type: object
          nullable: true
        locale:
          type: string
        time_zone:
          type: string
          x-ballerina-name: timeZone
        url:
          type: string
        locale_id:
          type: integer
          x-ballerina-name: localeId
        updated_at:
          type: string
          x-ballerina-name: updatedAt
        phone:
          type: string
          nullable: true
        organization_id:
          type: integer
          x-ballerina-name: organizationId
        name:
          type: string
        id:
          type: integer
        email:
          type: string
    GroupSLAPolicyFilterDefinitionResponseDefinitionsValues:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/GroupSLAPolicyFilterDefinitionResponseDefinitionsValuesList'
        type:
          type: string
    UserFieldObject:
      type: object
      example:
        active: true
        created_at: 2012-10-16T16:04:06Z
        description: Description of Custom Field
        id: 7
        key: custom_field_1
        position: 9999
        raw_description: "{{dc.my_description}}"
        raw_title: Custom Field 1
        regexp_for_validation: null
        title: Custom Field 1
        type: text
        updated_at: 2012-10-16T16:04:06Z
        url: https://company.zendesk.com/api/v2/user_fields/7.json
      allOf:
      - $ref: '#/components/schemas/CustomFieldObject'
    BrandResponse:
      type: object
      properties:
        brand:
          $ref: '#/components/schemas/BrandObject'
    Errors:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    RenewSessionResponse:
      type: object
      properties:
        authenticity_token:
          type: string
          description: A token of authenticity for the request
          x-ballerina-name: authenticityToken
    DynamicContentVariantsResponse:
      type: object
      properties:
        variants:
          type: array
          items:
            $ref: '#/components/schemas/DynamicContentVariantObject'
    RelationshipFilterDefinition:
      type: object
      properties:
        conditions_any:
          type: array
          items:
            $ref: '#/components/schemas/TriggerConditionDefinitionObjectAny'
          x-ballerina-name: conditionsAny
        conditions_all:
          type: array
          items:
            $ref: '#/components/schemas/TriggerConditionDefinitionObjectAll'
          x-ballerina-name: conditionsAll
    TriggerRevisionsResponse:
      type: object
      properties:
        trigger_revisions:
          type: array
          items:
            $ref: '#/components/schemas/TriggerRevisionsResponseTriggerRevisions'
          x-ballerina-name: triggerRevisions
        before_url:
          type: string
          x-ballerina-name: beforeUrl
        after_cursor:
          type: string
          x-ballerina-name: afterCursor
        count:
          type: integer
        after_url:
          type: string
          x-ballerina-name: afterUrl
        before_cursor:
          type: string
          x-ballerina-name: beforeCursor
    MacroAttachmentResponse:
      type: object
      properties:
        macro_attachment:
          allOf:
          - $ref: '#/components/schemas/MacroAttachmentObject'
          x-ballerina-name: macroAttachment
    GroupSLAPolicyMetricObject:
      type: object
      properties:
        business_hours:
          type: boolean
          description: Whether the metric targets are being measured in business hours
            or calendar hours
          x-ballerina-name: businessHours
        metric:
          type: string
          description: The definition of the time that is being measured
        priority:
          type: string
          description: Priority that a ticket must match
        target:
          type: integer
          description: The time within which the end-state for a metric should be
            met
    TicketChatCommentRedactionResponseChatEventValue:
      type: object
      properties:
        visitor_id:
          type: string
          description: Id assigned to the visitor
          readOnly: true
          x-ballerina-name: visitorId
        history:
          type: array
          description: Chat events within the chat session
          items:
            type: object
            additionalProperties: true
        chat_id:
          type: string
          description: Id of the chat session
          readOnly: true
          x-ballerina-name: chatId
      description: The value of the chat event object
      readOnly: true
    GroupSLAPolicyFilterDefinitionResponseDefinitions:
      type: object
      properties:
        all:
          type: array
          items:
            $ref: '#/components/schemas/GroupSLAPolicyFilterDefinitionResponseDefinitionsAll'
    CommentsAllOf1:
      type: object
      properties:
        value:
          type: string
          description: The comment string value
    TargetFailuresResponse:
      type: object
      properties:
        target_failures:
          type: array
          items:
            $ref: '#/components/schemas/TargetFailureObject'
          x-ballerina-name: targetFailures
    TicketCommentsResponse:
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/TicketCommentObject'
    BrandsResponseAllOf2:
      type: object
      properties:
        brands:
          type: array
          description: Array of brands
          items:
            $ref: '#/components/schemas/BrandObject'
    AccountSettingsRuleObject:
      type: object
      properties:
        using_skill_based_routing:
          type: boolean
          x-ballerina-name: usingSkillBasedRouting
        macro_order:
          type: string
          x-ballerina-name: macroOrder
        skill_based_filtered_views:
          type: array
          items:
            type: object
            additionalProperties: true
          x-ballerina-name: skillBasedFilteredViews
        macro_most_used:
          type: boolean
          x-ballerina-name: macroMostUsed
      description: "Rules settings for triggers, macros, views, and automations. See\
        \ [Rules](#rules)"
    BatchJobRequestJob:
      type: object
      properties:
        action:
          type: string
          enum:
          - patch
        items:
          $ref: '#/components/schemas/BatchJobRequestJobItems'
    ListDeletedTicketsResponseAllOf1:
      type: object
      properties:
        deleted_tickets:
          type: array
          items:
            $ref: '#/components/schemas/ListDeletedTicketsResponseDeletedTickets'
          x-ballerina-name: deletedTickets
    AssigneeFieldAssignableGroupsResponse:
      type: object
      properties:
        next_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: nextPage
        count:
          type: integer
          description: Number of groups listed in `groups` property
        groups:
          type: array
          items:
            $ref: '#/components/schemas/AssigneeFieldAssignableGroupObject'
        previous_page:
          type: string
          nullable: true
          readOnly: true
          x-ballerina-name: previousPage
      example:
        count: 3
        groups:
        - description: Engineering
          id: 9182736455
          name: Group for Bugs for Engineering
        - description: Product
          id: 1928374655
          name: Group for feature requests
        - description: Customer Support
          id: 5519283746
          name: Group for customer inquiries
        next_page: null
        previous_page: null
    WorkspacesReorderBody:
      type: object
      properties:
        ids:
          type: array
          items:
            type: number
    CustomObjectRecordsCreateRequest:
      type: object
      properties:
        custom_object_record:
          allOf:
          - $ref: '#/components/schemas/CustomObjectRecord'
          x-ballerina-name: customObjectRecord
    SearchExportResponseMeta:
      type: object
      properties:
        after_cursor:
          type: string
          description: The cursor id for the next object
          nullable: true
          readOnly: true
          x-ballerina-name: afterCursor
        before_cursor:
          type: string
          description: The cursor id for the previous object
          nullable: true
          readOnly: true
          x-ballerina-name: beforeCursor
        has_more:
          type: boolean
          description: Whether there are more items yet to be returned by the cursor
          readOnly: true
          x-ballerina-name: hasMore
      description: Metadata for the export query response
    SuspendedTicketsResponse:
      type: object
      properties:
        suspended_tickets:
          type: array
          items:
            $ref: '#/components/schemas/SuspendedTicketObject'
          x-ballerina-name: suspendedTickets
    TicketUpdateInput:
      type: object
      properties:
        safe_update:
          type: boolean
          description: Optional boolean. Prevents updates with outdated ticket data
            (`updated_stamp` property required when true)
          x-ballerina-name: safeUpdate
        custom_fields:
          type: array
          description: "Custom fields for the ticket. See [Setting custom field values](/documentation/ticketing/managing-tickets/creating-and-updating-tickets#setting-custom-field-values)"
          items:
            $ref: '#/components/schemas/CustomFieldObject'
          x-ballerina-name: customFields
        subject:
          type: string
          description: The value of the subject field for this ticket
        custom_status_id:
          type: integer
          description: "The custom ticket status id of the ticket. See [custom ticket\
            \ statuses](#custom-ticket-statuses)"
          x-ballerina-name: customStatusId
        external_id:
          type: string
          description: An id you can use to link Zendesk Support tickets to local
            records
          x-ballerina-name: externalId
        additional_collaborators:
          type: array
          description: "An array of numeric IDs, emails, or objects containing name\
            \ and email properties. See [Setting Collaborators](/api-reference/ticketing/tickets/tickets/#setting-collaborators).\
            \ An email notification is sent to them when the ticket is updated"
          items:
            $ref: '#/components/schemas/CollaboratorObject'
          x-ballerina-name: additionalCollaborators
        collaborator_ids:
          type: array
          description: The ids of users currently CC'ed on the ticket
          items:
            type: integer
          x-ballerina-name: collaboratorIds
        priority:
          type: string
          description: The urgency with which the ticket should be addressed
          enum:
          - urgent
          - high
          - normal
          - low
        type:
          type: string
          description: The type of this ticket
          enum:
          - problem
          - incident
          - question
          - task
        updated_stamp:
          type: string
          description: Datetime of last update received from API. See the safe_update
            property
          format: date-time
          x-ballerina-name: updatedStamp
        tags:
          type: array
          description: The array of tags applied to this ticket
          items:
            type: string
        assignee_email:
          type: string
          description: The email address of the agent to assign the ticket to
          format: email
          x-ballerina-name: assigneeEmail
        followers:
          type: array
          description: "An array of objects that represent agent followers to add\
            \ or delete from the ticket. See [Setting followers](/documentation/ticketing/managing-tickets/creating-and-updating-tickets#setting-followers)"
          items:
            $ref: '#/components/schemas/FollowerObject'
        sharing_agreement_ids:
          type: array
          description: An array of the numeric IDs of sharing agreements. Note that
            this replaces any existing agreements
          items:
            type: integer
          x-ballerina-name: sharingAgreementIds
        group_id:
          type: integer
          description: The group this ticket is assigned to
          x-ballerina-name: groupId
        problem_id:
          type: integer
          description: "For tickets of type \"incident\", the ID of the problem the\
            \ incident is linked to"
          x-ballerina-name: problemId
        email_ccs:
          type: array
          description: "An array of objects that represent agent or end users email\
            \ CCs to add or delete from the ticket. See [Setting email CCs](/documentation/ticketing/managing-tickets/creating-and-updating-tickets#setting-email-ccs)"
          items:
            $ref: '#/components/schemas/EmailCCObject'
          x-ballerina-name: emailCcs
        organization_id:
          type: integer
          description: "The organization of the requester. You can only specify the\
            \ ID of an organization associated with the requester. See [Organization\
            \ Memberships](/api-reference/ticketing/organizations/organization_memberships/)"
          x-ballerina-name: organizationId
        comment:
          $ref: '#/components/schemas/TicketCommentObject'
        due_at:
          type: string
          description: "If this is a ticket of type \"task\" it has a due date.  Due\
            \ date format uses [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format"
          format: date-time
          nullable: true
          x-ballerina-name: dueAt
        attribute_value_ids:
          type: array
          description: An array of the IDs of attribute values to be associated with
            the ticket
          items:
            type: integer
          x-ballerina-name: attributeValueIds
        assignee_id:
          type: integer
          description: The agent currently assigned to the ticket
          x-ballerina-name: assigneeId
        requester_id:
          type: integer
          description: The user who requested this ticket
          x-ballerina-name: requesterId
        status:
          type: string
          description: |
            The state of the ticket.

            If your account has activated custom ticket statuses, this is the ticket's
            status category. See [custom ticket statuses](#custom-ticket-statuses)
          enum:
          - new
          - open
          - pending
          - hold
          - solved
          - closed
      example:
        comment:
          body: The smoke is very colorful.
        priority: urgent
        subject: My printer is on fire!
    TriggerRevisionResponse:
      type: object
      properties:
        trigger_revision:
          allOf:
          - $ref: '#/components/schemas/TriggerRevisionResponseTriggerRevision'
          x-ballerina-name: triggerRevision
    AccountSettingsCdnObject:
      type: object
      properties:
        cdn_provider:
          type: string
          x-ballerina-name: cdnProvider
        hosts:
          type: array
          items:
            $ref: '#/components/schemas/AccountSettingsCdnObjectHosts'
        fallback_cdn_provider:
          type: string
          x-ballerina-name: fallbackCdnProvider
      description: CDN settings
    BatchErrorItem:
      type: object
      allOf:
      - $ref: '#/components/schemas/Error'
      - $ref: '#/components/schemas/BatchErrorItemAllOf2'
    TicketSkipObject:
      type: object
      properties:
        reason:
          type: string
          description: Reason for skipping the ticket
          readOnly: true
        ticket:
          type: object
          description: "The skipped ticket. See the [Ticket object reference](/api-reference/ticketing/tickets/tickets/#json-format)"
          allOf:
          - $ref: '#/components/schemas/TicketObject'
        updated_at:
          type: string
          description: Time the skip was last updated
          format: date-time
          readOnly: true
          x-ballerina-name: updatedAt
        user_id:
          type: integer
          description: ID of the skipping agent
          readOnly: true
          x-ballerina-name: userId
        created_at:
          type: string
          description: Time the skip was created
          format: date-time
          readOnly: true
          x-ballerina-name: createdAt
        id:
          type: integer
          description: Automatically assigned upon creation
          readOnly: true
        ticket_id:
          type: integer
          description: ID of the skipped ticket
          readOnly: true
          x-ballerina-name: ticketId
      example:
        created_at: 2015-09-30T21:44:03Z
        id: 1
        reason: I have no idea.
        ticket:
          assignee_id: 235323
          collaborator_ids:
          - 35334
          - 234
          created_at: 2009-07-20T22:55:29Z
          custom_fields:
          - id: 27642
            value: "745"
          - id: 27648
            value: "yes"
          description: The fire is very colorful.
          due_at: null
          external_id: ahg35h3jh
          follower_ids:
          - 35334
          - 234
          from_messaging_channel: false
          group_id: 98738
          has_incidents: false
          id: 123
          organization_id: 509974
          priority: high
          problem_id: 9873764
          raw_subject: "{{dc.printer_on_fire}}"
          recipient: support@company.com
          requester_id: 20978392
          satisfaction_rating:
            comment: Great support!
            id: 1234
            score: good
          sharing_agreement_ids:
          - 84432
          status: open
          subject: "Help, my printer is on fire!"
          submitter_id: 76872
          tags:
          - enterprise
          - other_tag
          type: incident
          updated_at: 2011-05-05T10:38:52Z
          url: https://company.zendesk.com/api/v2/tickets/35436.json
          via:
            channel: web
        ticket_id: 123
        updated_at: 2015-09-30T21:44:03Z
        user_id: 456
    ViewCountsResponse:
      type: object
      properties:
        view_counts:
          type: array
          items:
            $ref: '#/components/schemas/ViewCountObject'
          x-ballerina-name: viewCounts
    UrlObject:
      type: object
      properties:
        url:
          type: string
          readOnly: true
    BookmarksResponse:
      title: Bookmarks
      type: object
      allOf:
      - $ref: '#/components/schemas/OffsetPaginationObject'
      - $ref: '#/components/schemas/BookmarksResponseAllOf2'
    RecoverSuspendedTicketsResponse:
      type: object
      properties:
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/SuspendedTicketObject'
    TriggerSnapshotObject:
      type: object
      properties:
        active:
          type: boolean
          description: Whether the trigger is active
        description:
          type: string
          description: The description of the trigger
          nullable: true
        conditions:
          $ref: '#/components/schemas/TriggerConditionsObject'
        title:
          type: string
          description: The title of the trigger
        actions:
          type: array
          description: "An array of [Actions](#actions) describing what the trigger\
            \ will do"
          items:
            $ref: '#/components/schemas/TriggerActionObject'
      example:
        actions: []
        active: true
        conditions: {}
        description: Notifies requester that a comment was updated
        title: Notify requester of comment update
    SatisfactionRatingsCountResponse:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/SatisfactionRatingsCountResponseCount'
    EssentialsCardResponse:
      type: object
      properties:
        object_layout:
          allOf:
          - $ref: '#/components/schemas/EssentialsCardObject'
          x-ballerina-name: objectLayout
    UsersUpdateManyBody:
      additionalProperties: true
      oneOf:
      - $ref: '#/components/schemas/UserRequest'
      - $ref: '#/components/schemas/UsersRequest'
    CustomObjectRecordsJobsResponseJobStatus:
      type: object
      properties:
        total:
          type: integer
        progress:
          type: integer
          nullable: true
        id:
          type: string
        message:
          type: string
          nullable: true
        results:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/CustomObjectRecord'
        url:
          type: string
        status:
          type: string
    ChannelFrameworkResultStatusObject:
      type: object
      properties:
        code:
          type: string
          description: "A code indicating the status of the import of the resource,\
            \ as described in [status codes](#status-codes)"
          readOnly: true
        description:
          type: string
          description: "In the case of an exception, a description of the exception.\
            \ Otherwise, not present"
          readOnly: true
      description: The status of the import for the indicated resource
    BatchJobRequest:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/BatchJobRequestJob'
    CustomObjectFieldsCreateRequest:
      type: object
      properties:
        custom_object_field:
          allOf:
          - $ref: '#/components/schemas/CustomObjectField'
          x-ballerina-name: customObjectField
    TicketCreateVoicemailTicketRequest:
      type: object
      properties:
        ticket:
          type: object
          description: Ticket object that lists the values to set when the ticket
            is created
          allOf:
          - $ref: '#/components/schemas/TicketCreateVoicemailTicketInput'
        display_to_agent:
          type: integer
          description: Optional value such as the ID of the agent that will see the
            newly created ticket
          x-ballerina-name: displayToAgent
    ViewExportResponseExport:
      type: object
      properties:
        view_id:
          type: integer
          readOnly: true
          x-ballerina-name: viewId
        status:
          type: string
          readOnly: true
    CustomObjectRecordsBulkCreateRequest:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/CustomObjectRecordsBulkCreateRequestJob'
    TriggerCategoriestriggerCategoryIdBody:
      type: object
      properties:
        trigger_category:
          allOf:
          - $ref: '#/components/schemas/TriggerCategoryRequest'
          x-ballerina-name: triggerCategory
  parameters:
    AcceptHeader:
      name: Accept
      in: header
      required: false
      style: simple
      explode: false
      schema:
        type: string
        default: application/json
      x-ballerina-name: accept
    ActivityId:
      name: activity_id
      in: path
      description: The activity ID
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 29183462
      x-ballerina-name: activityId
    ActivitySince:
      name: since
      in: query
      description: A UTC time in ISO 8601 format to return ticket activities since
        said date
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: 2013-04-03T16:02:46Z
    AgentId:
      name: agent_id
      in: path
      description: ID of an agent
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      examples:
        default:
          value: 385473779372
      x-ballerina-name: agentId
    ArchiveImmediately:
      name: archive_immediately
      in: query
      description: "If `true`, any ticket created with a `closed` status bypasses\
        \ the normal ticket lifecycle and will be created directly in your ticket\
        \ archive"
      required: false
      style: form
      explode: true
      schema:
        type: boolean
      x-ballerina-name: archiveImmediately
    AssigneeFieldSearchValue:
      name: name
      in: query
      description: Query string used to search assignable groups & agents in the AssigneeField
      required: true
      style: form
      explode: true
      schema:
        type: string
      example: Johnny Agent
    AttachmentId:
      name: attachment_id
      in: path
      description: The ID of the attachment
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 498483
      x-ballerina-name: attachmentId
    AuditLogId:
      name: audit_log_id
      in: path
      description: The ID of the audit log
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 498483
      x-ballerina-name: auditLogId
    AutomationActive:
      name: active
      in: query
      description: Filter by active automations if true or inactive automations if
        false
      required: false
      style: form
      explode: true
      schema:
        type: boolean
      example: true
    AutomationId:
      name: automation_id
      in: path
      description: The ID of the automation
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 25
      x-ballerina-name: automationId
    AutomationInclude:
      name: include
      in: query
      description: "A sideload to include in the response. See [Sideloads](#sideloads-2)"
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: usage_24h
    AutomationSearchQuery:
      name: query
      in: query
      description: Query string used to find all automations with matching title
      required: true
      style: form
      explode: true
      schema:
        type: string
      example: close
    AutomationSortBy:
      name: sort_by
      in: query
      description: "Possible values are \"alphabetical\", \"created_at\", \"updated_at\"\
        , and \"position\". If unspecified, the automations are sorted by relevance"
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: position
      x-ballerina-name: sortBy
    AutomationSortOrder:
      name: sort_order
      in: query
      description: "One of \"asc\" or \"desc\". Defaults to \"asc\" for alphabetical\
        \ and position sort, \"desc\" for all others"
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: desc
      x-ballerina-name: sortOrder
    BookmarkId:
      name: bookmark_id
      in: path
      description: The ID of the bookmark
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 900000001111
      x-ballerina-name: bookmarkId
    BrandId:
      name: brand_id
      in: path
      description: The ID of the brand
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 360002783572
      x-ballerina-name: brandId
    CommentId:
      name: comment_id
      in: path
      description: The ID of the comment
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 654321
      x-ballerina-name: commentId
    Creator:
      name: creator
      in: query
      description: |
        If true, displays the `creator_user_id` and `creator_app_name` properties. If the ticket field is created
         by an app, `creator_app_name` is the name of the app and `creator_user_id` is `-1`. If the ticket field
         is not created by an app, then `creator_app_name` is null
      required: false
      style: form
      explode: true
      schema:
        type: boolean
    CustomObjectFieldKeyOrId:
      name: custom_object_field_key_or_id
      in: path
      description: The key or id of a custom object field
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: make
      x-ballerina-name: customObjectFieldKeyOrId
    CustomObjectKey:
      name: custom_object_key
      in: path
      description: The key of a custom object
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: car
      x-ballerina-name: customObjectKey
    CustomObjectRecordExternalId:
      name: external_id
      in: query
      description: The external id of a custom object record
      required: true
      style: form
      explode: true
      schema:
        type: string
      example: X90001
      x-ballerina-name: externalId
    CustomObjectRecordId:
      name: custom_object_record_id
      in: path
      description: The id of a custom object record
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: 01GCSJW391QVSC80GYDH7E93Q6
      x-ballerina-name: customObjectRecordId
    CustomRoleId:
      name: custom_role_id
      in: path
      description: The ID of the custom agent role
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 10127
      x-ballerina-name: customRoleId
    CustomStatusId:
      name: custom_status_id
      in: path
      description: The id of the custom status
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 1234567
      x-ballerina-name: customStatusId
    DeletedUserId:
      name: deleted_user_id
      in: path
      description: The ID of the deleted user
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 35436
      x-ballerina-name: deletedUserId
    DynamicContentItemId:
      name: dynamic_content_item_id
      in: path
      description: The ID of the dynamic content item
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 47
      x-ballerina-name: dynamicContentItemId
    DynamicContentVariantId:
      name: dynammic_content_variant_id
      in: path
      description: The ID of the variant
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 23
      x-ballerina-name: dynammicContentVariantId
    EssentialsCardKey:
      name: object_type
      in: path
      description: |
        Essentials card type. Example: `zen:user` refers user type
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: zen:user
      x-ballerina-name: objectType
    ExcludeDeleted:
      name: exclude_deleted
      in: query
      description: Whether to exclude deleted entities
      required: false
      style: form
      explode: true
      schema:
        type: boolean
      example: false
      x-ballerina-name: excludeDeleted
    GroupId:
      name: group_id
      in: path
      description: The ID of the group
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 122
      x-ballerina-name: groupId
    GroupMembershipId:
      name: group_membership_id
      in: path
      description: The ID of the group membership
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 4
      x-ballerina-name: groupMembershipId
    GroupSLAPolicyId:
      name: group_sla_policy_id
      in: path
      description: The id of the Group SLA policy
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 36
      x-ballerina-name: groupSlaPolicyId
    HostMapping:
      name: host_mapping
      in: query
      description: "The hostmapping to a brand, if any (only admins view this key)"
      required: true
      style: form
      explode: true
      schema:
        type: string
      example: brand1.com
      x-ballerina-name: hostMapping
    IncludeStandardFields:
      name: include_standard_fields
      in: query
      description: Include standard fields if true. Exclude them if false
      required: false
      style: form
      explode: true
      schema:
        type: boolean
      example: true
      x-ballerina-name: includeStandardFields
    IncrementalCursor:
      name: cursor
      in: query
      description: The cursor pointer to work with for all subsequent exports after
        the initial request
      required: false
      style: form
      explode: true
      schema:
        type: string
    IncrementalPage:
      name: per_page
      in: query
      description: The number of records to return per page
      required: false
      style: form
      explode: true
      schema:
        type: integer
      x-ballerina-name: perPage
    IncrementalResource:
      name: incremental_resource
      in: path
      description: The resource requested for incremental sample export
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: tickets
      x-ballerina-name: incrementalResource
    IncrementalTimeQueryParameter:
      name: unix_time
      in: query
      description: A query start time for incremental exports
      required: false
      style: form
      explode: true
      schema:
        type: integer
      example: 1383685952
      x-ballerina-name: unixTime
    IncrementalUnixTime:
      name: start_time
      in: query
      description: The time to start the incremental export from. Must be at least
        one minute in the past. Data isn't provided for the most recent minute
      required: true
      style: form
      explode: true
      schema:
        type: integer
      example: 1332034771
      x-ballerina-name: startTime
    JobStatusId:
      name: job_status_id
      in: path
      description: the Id of the Job status
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: 8b726e606741012ffc2d782bcb7848fe
      x-ballerina-name: jobStatusId
    LocaleId:
      name: locale_id
      in: path
      description: |
        The ID or the [BCP-47 code](https://en.wikipedia.org/wiki/IETF_language_tag) of the locale. Examples: es-419, en-us, pr-br
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: es-419
      x-ballerina-name: localeId
    LookupRelationshipAutocompleteFieldIdFragment:
      name: field_id
      in: query
      description: |
        The id of a lookup relationship field.  The type of field is determined
        by the `source` param
      required: false
      style: form
      explode: true
      schema:
        type: string
      x-ballerina-name: fieldId
    LookupRelationshipAutocompleteSourceFragment:
      name: source
      in: query
      description: |
        If a `field_id` is provided, this specifies the type of the field.
        For example, if the field is on a "zen:user", it references a field on a user
      required: false
      style: form
      explode: true
      schema:
        type: string
      examples:
        organization:
          summary: A reference to an organization
          value: zen:organization
        ticket:
          summary: A reference to a ticket
          value: zen:ticket
        user:
          summary: A reference to a user
          value: zen:user
    MacroAccess:
      name: access
      in: query
      description: "Filter macros by access. Possible values are \"personal\", \"\
        agents\", \"shared\", or \"account\". The \"agents\" value returns all personal\
        \ macros for the account's agents and is only available to admins"
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: personal
    MacroActive:
      name: active
      in: query
      description: Filter by active macros if true or inactive macros if false
      required: false
      style: form
      explode: true
      schema:
        type: boolean
      example: true
    MacroCategory:
      name: category
      in: query
      description: Filter macros by category
      required: false
      style: form
      explode: true
      schema:
        type: integer
      example: 25
    MacroGroupId:
      name: group_id
      in: query
      description: Filter macros by group
      required: false
      style: form
      explode: true
      schema:
        type: integer
      example: 25
      x-ballerina-name: groupId
    MacroId:
      name: macro_id
      in: path
      description: The ID of the macro
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 25
      x-ballerina-name: macroId
    MacroIdQuery:
      name: macro_id
      in: query
      description: The ID of the macro to replicate
      required: true
      style: form
      explode: true
      schema:
        type: integer
      example: 25
      x-ballerina-name: macroId
    MacroInclude:
      name: include
      in: query
      description: "A sideload to include in the response. See [Sideloads](#sideloads-2)"
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: usage_7d
    MacroOnlyViewable:
      name: only_viewable
      in: query
      description: "If true, returns only macros that can be applied to tickets. If\
        \ false, returns all macros the current user can manage. Default is false"
      required: false
      style: form
      explode: true
      schema:
        type: boolean
      example: false
      x-ballerina-name: onlyViewable
    MacroQuery:
      name: query
      in: query
      description: Query string used to find macros with matching titles
      required: true
      style: form
      explode: true
      schema:
        type: string
      example: close
    MacroSortBy:
      name: sort_by
      in: query
      description: "Possible values are alphabetical, \"created_at\", \"updated_at\"\
        , \"usage_1h\", \"usage_24h\", \"usage_7d\", or \"usage_30d\". Defaults to\
        \ alphabetical"
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: alphabetical
      x-ballerina-name: sortBy
    MacroSortOrder:
      name: sort_order
      in: query
      description: "One of \"asc\" or \"desc\". Defaults to \"asc\" for alphabetical\
        \ and position sort, \"desc\" for all others"
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: asc
      x-ballerina-name: sortOrder
    MonitoredTwitterHandleId:
      name: monitored_twitter_handle_id
      in: path
      description: The ID of the custom agent role
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 431
      x-ballerina-name: monitoredTwitterHandleId
    ObjectKey:
      name: object_zrn_type
      in: path
      description: |
        Custom object type. Example: `zen:custom_object:car` refers to a custom object type with the
        `car` key
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: zen:custom_object:car
      x-ballerina-name: objectZrnType
    OcrQueueId:
      name: queue_id
      in: path
      description: The id of the omnichannel routing queue
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: 01HG80ATNNZK1N7XRFVKX48XD6
      x-ballerina-name: queueId
    OrganizationExternalId:
      name: external_id
      in: query
      description: The external id of an organization
      required: false
      style: form
      explode: true
      schema:
        type: integer
      example: 1234
      x-ballerina-name: externalId
    OrganizationExternalIds:
      name: external_ids
      in: query
      description: A list of external ids
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: "1764,42156"
      x-ballerina-name: externalIds
    OrganizationFieldId:
      name: organization_field_id
      in: path
      description: The ID or key of the organization field
      required: true
      style: simple
      explode: false
      schema:
        oneOf:
        - type: integer
        - type: string
      example: my_text_field
      x-ballerina-name: organizationFieldId
    OrganizationId:
      name: organization_id
      in: path
      description: The ID of an organization
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 16
      x-ballerina-name: organizationId
    OrganizationIds:
      name: ids
      in: query
      description: A list of organization ids
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: "35436,20057623"
    OrganizationMembershipId:
      name: organization_membership_id
      in: path
      description: The ID of the organization membership
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 4
      x-ballerina-name: organizationMembershipId
    OrganizationName:
      name: name
      in: query
      description: The name of an organization
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: ACME Incorporated
    OrganizationQueryFragment:
      name: name
      in: query
      description: A substring of an organization to search for
      required: true
      style: form
      explode: true
      schema:
        type: string
      example: imp
    OrganizationSubscriptionId:
      name: organization_subscription_id
      in: path
      description: The ID of the organization subscription
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 35436
      x-ballerina-name: organizationSubscriptionId
    RequestId:
      name: request_id
      in: path
      description: The ID of the request
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 33
      x-ballerina-name: requestId
    ResourceCollectionId:
      name: resource_collection_id
      in: path
      description: The id of the resource collection
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 10002
      x-ballerina-name: resourceCollectionId
    SLAPolicyId:
      name: sla_policy_id
      in: path
      description: The ID of the SLA Policy
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 36
      x-ballerina-name: slaPolicyId
    SessionId:
      name: session_id
      in: path
      description: The ID of the session
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 14
      x-ballerina-name: sessionId
    SharingAgreementId:
      name: sharing_agreement_id
      in: path
      description: The ID of the sharing agreement
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 1
      x-ballerina-name: sharingAgreementId
    SkillBasedRoutingAttributeId:
      name: attribute_id
      in: path
      description: The ID of the skill-based routing attribute
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: 6e279587-e930-11e8-a292-09cfcdea1b75
      x-ballerina-name: attributeId
    SkillBasedRoutingAttributeValueId:
      name: attribute_value_id
      in: path
      description: The ID of the skill-based routing attribute value
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: b376b35a-e38b-11e8-a292-e3b6377c5575
      x-ballerina-name: attributeValueId
    SkipTicketUserId:
      name: user_id
      in: path
      description: User ID of an agent
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 35436
      x-ballerina-name: userId
    Subdomain:
      name: subdomain
      in: query
      description: Subdomain for a given Zendesk account address
      required: true
      style: form
      explode: true
      schema:
        type: string
      example: Brand1
    SupportAddressId:
      name: support_address_id
      in: path
      description: The ID of the support address
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 33
      x-ballerina-name: supportAddressId
    SuspendedTicketId:
      name: id
      in: path
      description: id of the suspended ticket
      required: true
      style: simple
      explode: false
      schema:
        type: number
      example: 35436
    SuspendedTicketIds:
      name: ids
      in: query
      description: A list of suspended ticket ids
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: "3436,3437"
    SuspendedTicketsDeleteIds:
      name: ids
      in: query
      description: A comma separated list of ids of suspended tickets to delete
      required: true
      style: form
      explode: true
      schema:
        type: string
      example: "94,141"
    SuspendedTicketsRecoverIds:
      name: ids
      in: query
      description: A comma separated list of ids of suspended tickets to recover
      required: true
      style: form
      explode: true
      schema:
        type: string
      example: "14,77"
    SuspendedTicketsSortBy:
      name: sort_by
      in: query
      description: "The field to sort the ticket by, being one of `author_email`,\
        \ `cause`, `created_at`, or `subject`"
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: author_email
      x-ballerina-name: sortBy
    SuspendedTicketsSortOrder:
      name: sort_order
      in: query
      description: The order in which to sort the suspended tickets.  This can take
        value `asc` or `desc`
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: asc
      x-ballerina-name: sortOrder
    TagNameFragment:
      name: name
      in: query
      description: A substring of a tag to search for
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: att
    TargetFailureId:
      name: target_failure_id
      in: path
      description: The ID of the target failure
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 1
      x-ballerina-name: targetFailureId
    TargetId:
      name: target_id
      in: path
      description: The ID of the target
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 211
      x-ballerina-name: targetId
    TicketAuditId:
      name: ticket_audit_id
      in: path
      description: The ID of the ticket audit
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 2127301143
      x-ballerina-name: ticketAuditId
    TicketCommentId:
      name: ticket_comment_id
      in: path
      description: The ID of the ticket comment
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 35436
      x-ballerina-name: ticketCommentId
    TicketFieldId:
      name: ticket_field_id
      in: path
      description: The ID of the ticket field
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 34
      x-ballerina-name: ticketFieldId
    TicketFieldOptionId:
      name: ticket_field_option_id
      in: path
      description: The ID of the ticket field option
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 10001
      x-ballerina-name: ticketFieldOptionId
    TicketFormId:
      name: ticket_form_id
      in: path
      description: The ID of the ticket form
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 47
      x-ballerina-name: ticketFormId
    TicketId:
      name: ticket_id
      in: path
      description: The ID of the ticket
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 123456
      x-ballerina-name: ticketId
    TicketIds:
      name: ids
      in: query
      description: Comma-separated list of ticket ids
      required: true
      style: form
      explode: true
      schema:
        type: string
      example: "35436,35437"
    TicketSortBy:
      name: sort_by
      in: query
      description: Sort by
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum:
        - id
        - subject
        - deleted_at
      x-ballerina-name: sortBy
    TicketSortOrder:
      name: sort_order
      in: query
      description: Sort order. Defaults to "asc"
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum:
        - asc
        - desc
      x-ballerina-name: sortOrder
    TriggerActive:
      name: active
      in: query
      description: Filter by active triggers if true or inactive triggers if false
      required: false
      style: form
      explode: true
      schema:
        type: boolean
      example: true
    TriggerCategoryId:
      name: category_id
      in: query
      description: Filter triggers by category ID
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: "10026"
      x-ballerina-name: categoryId
    TriggerId:
      name: trigger_id
      in: path
      description: The ID of the trigger
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 198
      x-ballerina-name: triggerId
    TriggerIds:
      name: ids
      in: query
      description: A comma separated list of trigger IDs
      required: true
      style: form
      explode: true
      schema:
        type: string
      example: "131,178,938"
    TriggerInclude:
      name: include
      in: query
      description: "A sideload to include in the response. See [Sideloads](#sideloads-2)"
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: usage_24h
    TriggerRevisionId:
      name: trigger_revision_id
      in: path
      description: The ID of the revision for a particular trigger
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 1
      x-ballerina-name: triggerRevisionId
    TriggerSearchFilter:
      name: filter
      in: query
      description: "Trigger attribute filters for the search. See [Filter](#filter)"
      required: false
      style: form
      explode: true
      schema:
        type: object
        properties:
          json:
            $ref: '#/components/schemas/TriggerObject'
    TriggerSearchQuery:
      name: query
      in: query
      description: Query string used to find all triggers with matching title
      required: true
      style: form
      explode: true
      schema:
        type: string
      example: important_trigger
    TriggerSort:
      name: sort
      in: query
      description: "Cursor-based pagination only. Possible values are \"alphabetical\"\
        , \"created_at\", \"updated_at\", or \"position\""
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: position
    TriggerSortBy:
      name: sort_by
      in: query
      description: "Offset pagination only. Possible values are \"alphabetical\",\
        \ \"created_at\", \"updated_at\", \"usage_1h\", \"usage_24h\", or \"usage_7d\"\
        . Defaults to \"position\""
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: position
      x-ballerina-name: sortBy
    TriggerSortOrder:
      name: sort_order
      in: query
      description: "One of \"asc\" or \"desc\". Defaults to \"asc\" for alphabetical\
        \ and position sort, \"desc\" for all others"
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: desc
      x-ballerina-name: sortOrder
    UserExternalIdFilter:
      name: external_id
      in: query
      description: List users by external id. External id has to be unique for each
        user under the same account
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: abc
      x-ballerina-name: externalId
    UserFieldId:
      name: user_field_id
      in: path
      description: The ID or key of the user field
      required: true
      style: simple
      explode: false
      schema:
        oneOf:
        - type: integer
        - type: string
      example: my_text_field
      x-ballerina-name: userFieldId
    UserFieldOptionId:
      name: user_field_option_id
      in: path
      description: The ID of the user field option
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 10001
      x-ballerina-name: userFieldOptionId
    UserId:
      name: user_id
      in: path
      description: The id of the user
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 35436
      x-ballerina-name: userId
    UserIdentityId:
      name: user_identity_id
      in: path
      description: The ID of the user identity
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 77938
      x-ballerina-name: userIdentityId
    UserPermissionSetFilter:
      name: permission_set
      in: query
      description: For custom roles which is available on the Enterprise plan and
        above. You can only filter by one role ID per request
      required: false
      style: form
      explode: true
      schema:
        type: integer
      example: 123
      x-ballerina-name: permissionSet
    UserRoleFilter:
      name: role
      in: query
      description: |
        Filters the results by role. Possible values are "end-user", "agent", or "admin"
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum:
        - end-user
        - agent
        - admin
      example: agent
    UserRolesFilter:
      name: roles
      in: query
      description: |
        Filters the results by more than one role using the format `role[]={role}&role[]={role}`
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: agent
    ViewId:
      name: view_id
      in: path
      description: The ID of the view
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 25
      x-ballerina-name: viewId
    WorkspaceId:
      name: workspace_id
      in: path
      description: The id of the workspace
      required: true
      style: simple
      explode: false
      schema:
        type: integer
      example: 3133
      x-ballerina-name: workspaceId
  examples:
    AccountSettingsResponseExample:
      value:
        settings:
          active_features:
            advanced_analytics: false
            agent_forwarding: false
            allow_ccs: true
            allow_email_template_customization: true
            automatic_answers: false
            bcc_archiving: false
            benchmark_opt_out: false
            business_hours: false
            chat: false
            chat_about_my_ticket: false
            csat_reason_code: false
            custom_dkim_domain: true
            customer_context_as_default: false
            customer_satisfaction: false
            dynamic_contents: false
            explore: true
            explore_on_support_ent_plan: false
            explore_on_support_pro_plan: false
            facebook: false
            facebook_login: false
            fallback_composer: false
            forum_analytics: true
            good_data_and_explore: false
            google_login: false
            insights: false
            is_abusive: false
            light_agents: false
            markdown: false
            on_hold_status: false
            organization_access_enabled: true
            rich_content_in_emails: true
            sandbox: false
            satisfaction_prediction: false
            suspended_ticket_notification: false
            ticket_forms: true
            ticket_tagging: true
            topic_suggestion: false
            twitter: true
            twitter_login: false
            user_org_fields: true
            user_tagging: true
            voice: true
          agents:
            agent_home: false
            agent_workspace: false
            aw_self_serve_migration_enabled: true
            focus_mode: false
            idle_timeout_enabled: false
            unified_agent_statuses: false
          api:
            accepted_api_agreement: true
            api_password_access: "true"
            api_token_access: "true"
          apps:
            create_private: true
            create_public: false
            use: true
          billing:
            backend: zuora
          branding:
            favicon_url: null
            header_color: 78A300
            header_logo_url: null
            page_background_color: "333333"
            tab_background_color: 7FA239
            text_color: FFFFFF
          brands:
            default_brand_id: 1873
            require_brand_on_new_tickets: false
          cdn:
            cdn_provider: default
            fallback_cdn_provider: cloudfront
            hosts:
            - name: default
              url: https://p18.zdassets.com
            - name: cloudfront
              url: https://d2y9oszrd3dhjh.cloudfront.net
          chat:
            available: true
            enabled: false
            integrated: true
            maximum_request_count: 1
            welcome_message: Hi there. How can I help today?
          cross_sell:
            show_chat_tooltip: true
            xsell_source: null
          gooddata_advanced_analytics:
            enabled: true
          google_apps:
            has_google_apps: false
            has_google_apps_admin: false
          groups:
            check_group_name_uniqueness: true
          limits:
            attachment_size: 52428800
          localization:
            locale_ids:
            - 1042
          lotus:
            pod_id: 999
            prefer_lotus: true
            reporting: true
          metrics:
            account_size: 100-399
          onboarding:
            checklist_onboarding_version: 2
            onboarding_segments: null
            product_sign_up: null
          routing:
            autorouting_tag: ""
            enabled: false
            max_email_capacity: 0
            max_messaging_capacity: 0
          rule:
            macro_most_used: true
            macro_order: alphabetical
            skill_based_filtered_views: []
            using_skill_based_routing: false
          side_conversations:
            email_channel: false
            msteams_channel: false
            show_in_context_panel: false
            slack_channel: false
            tickets_channel: false
          statistics:
            forum: true
            rule_usage: true
            search: true
          ticket_form:
            raw_ticket_forms_instructions: Please choose your issue below
            ticket_forms_instructions: Please choose your issue below
          ticket_sharing_partners:
            support_addresses:
            - support@grokpetre.zendesk.com
          tickets:
            accepted_new_collaboration_tos: false
            agent_collision: true
            agent_invitation_enabled: true
            agent_ticket_deletion: false
            allow_group_reset: true
            assign_default_organization: true
            assign_tickets_upon_solve: true
            auto_translation_enabled: false
            auto_updated_ccs_followers_rules: false
            chat_sla_enablement: false
            collaboration: true
            comments_public_by_default: true
            email_attachments: false
            emoji_autocompletion: true
            follower_and_email_cc_collaborations: false
            has_color_text: true
            is_first_comment_private_enabled: true
            light_agent_email_ccs_allowed: false
            list_empty_views: true
            list_newest_comments_first: true
            markdown_ticket_comments: false
            maximum_personal_views_to_list: 8
            private_attachments: false
            rich_text_comments: true
            status_hold: false
            tagging: true
            using_skill_based_routing: false
          twitter:
            shorten_url: optional
          user:
            agent_created_welcome_emails: true
            end_user_phone_number_validation: false
            have_gravatars_enabled: true
            language_selection: true
            multiple_organizations: false
            tagging: true
            time_zone_selection: true
          voice:
            agent_confirmation_when_forwarding: true
            agent_wrap_up_after_calls: true
            enabled: true
            logging: true
            maximum_queue_size: 5
            maximum_queue_wait_time: 1
            only_during_business_hours: false
            outbound_enabled: true
            recordings_public: true
            uk_mobile_forwarding: true
    ActivitiesCountResponseExample:
      value:
        count:
          refreshed_at: 2020-04-06T02:18:17Z
          value: 102
    ActivitiesResponseExample:
      value:
        activities:
        - actor:
            active: true
            alias: ""
            created_at: 2020-11-17T00:32:12Z
            custom_role_id: null
            default_group_id: 1873
            details: ""
            email: cgoddard+ted@zendesk.com
            external_id: null
            iana_time_zone: America/Juneau
            id: 158488612
            last_login_at: 2020-11-17T00:33:44Z
            locale: en-gb
            locale_id: 5
            moderator: true
            name: Tedd
            notes: ""
            only_private_comments: false
            organization_id: null
            phone: null
            photo: null
            report_csv: true
            restricted_agent: false
            role: admin
            role_type: null
            shared: false
            shared_agent: false
            shared_phone_number: null
            signature: ""
            suspended: false
            tags: []
            ticket_restriction: null
            time_zone: Alaska
            two_factor_auth_enabled: null
            updated_at: 2020-11-17T00:34:38Z
            url: https://example.zendesk.com/api/v2/users/158488612.json
            user_fields:
              its_remember_september: null
              skittles: null
              user_field_1: null
            verified: true
          actor_id: 158488612
          created_at: 2020-11-17T00:34:40Z
          id: 29183462
          object:
            ticket:
              id: 1521
              subject: test
          target:
            ticket:
              id: 1521
              subject: test
          title: "Tedd assigned ticket #1521 to you."
          updated_at: 2020-11-17T00:34:40Z
          url: https://example.zendesk.com/api/v2/activities/29183462.json
          user:
            active: true
            alias: test
            created_at: 2017-08-14T20:13:53Z
            custom_role_id: null
            default_group_id: 1873
            details: ""
            email: user@zendesk.com
            external_id: oev7jj
            iana_time_zone: Pacific/Pago_Pago
            id: 3343
            last_login_at: 2020-11-16T22:57:45Z
            locale: en-gb
            locale_id: 5
            moderator: true
            name: Samwise Gamgee
            notes: test
            only_private_comments: false
            organization_id: 1873
            phone: null
            photo:
              content_type: image/gif
              content_url: https://example.zendesk.com/system/photos/8730791/1f84950b8d7949b3.gif
              deleted: false
              file_name: 1f84950b8d7949b3.gif
              height: 80
              id: 8730791
              inline: false
              mapped_content_url: https://example.zendesk.com/system/photos/8730791/1f84950b8d7949b3.gif
              size: 4566
              thumbnails:
              - content_type: image/gif
                content_url: https://example.zendesk.com/system/photos/8730801/1f84950b8d7949b3_thumb.gif
                deleted: false
                file_name: 1f84950b8d7949b3_thumb.gif
                height: 32
                id: 8730801
                inline: false
                mapped_content_url: https://example.zendesk.com/system/photos/8730801/1f84950b8d7949b3_thumb.gif
                size: 1517
                url: https://example.zendesk.com/api/v2/attachments/8730801.json
                width: 32
              url: https://example.zendesk.com/api/v2/attachments/8730791.json
              width: 80
            report_csv: true
            restricted_agent: false
            role: admin
            role_type: null
            shared: false
            shared_agent: false
            shared_phone_number: null
            signature: test
            suspended: false
            tags:
            - "101"
            ticket_restriction: null
            time_zone: American Samoa
            two_factor_auth_enabled: null
            updated_at: 2020-11-17T00:33:55Z
            url: https://example.zendesk.com/api/v2/users/3343.json
            user_fields:
              its_remember_september: null
              skittles: 2018-09-14T00:00:00+00:00
              user_field_1: "101"
            verified: true
          user_id: 3343
          verb: tickets.assignment
        actors:
        - active: true
          alias: ""
          created_at: 2020-11-17T00:32:12Z
          custom_role_id: null
          default_group_id: 1873
          details: ""
          email: cgoddard+ted@zendesk.com
          external_id: null
          iana_time_zone: America/Juneau
          id: 158488612
          last_login_at: 2020-11-17T00:33:44Z
          locale: en-gb
          locale_id: 5
          moderator: true
          name: Tedd
          notes: ""
          only_private_comments: false
          organization_id: null
          phone: null
          photo: null
          report_csv: true
          restricted_agent: false
          role: admin
          role_type: null
          shared: false
          shared_agent: false
          shared_phone_number: null
          signature: ""
          suspended: false
          tags: []
          ticket_restriction: null
          time_zone: Alaska
          two_factor_auth_enabled: null
          updated_at: 2020-11-17T00:34:38Z
          url: https://example.zendesk.com/api/v2/users/158488612.json
          user_fields:
            its_remember_september: null
            skittles: null
            user_field_1: null
          verified: true
        count: 1
        next_page: null
        previous_page: null
        users:
        - active: true
          alias: test
          created_at: 2017-08-14T20:13:53Z
          custom_role_id: null
          default_group_id: 1873
          details: ""
          email: user@zendesk.com
          external_id: oev7jj
          iana_time_zone: Pacific/Pago_Pago
          id: 3343
          last_login_at: 2020-11-16T22:57:45Z
          locale: en-gb
          locale_id: 5
          moderator: true
          name: Samwise Gamgee
          notes: test
          only_private_comments: false
          organization_id: 1873
          phone: null
          photo:
            content_type: image/gif
            content_url: https://example.zendesk.com/system/photos/8730791/1f84950b8d7949b3.gif
            deleted: false
            file_name: 1f84950b8d7949b3.gif
            height: 80
            id: 8730791
            inline: false
            mapped_content_url: https://example.zendesk.com/system/photos/8730791/1f84950b8d7949b3.gif
            size: 4566
            thumbnails:
            - content_type: image/gif
              content_url: https://example.zendesk.com/system/photos/8730801/1f84950b8d7949b3_thumb.gif
              deleted: false
              file_name: 1f84950b8d7949b3_thumb.gif
              height: 32
              id: 8730801
              inline: false
              mapped_content_url: https://example.zendesk.com/system/photos/8730801/1f84950b8d7949b3_thumb.gif
              size: 1517
              url: https://example.zendesk.com/api/v2/attachments/8730801.json
              width: 32
            url: https://example.zendesk.com/api/v2/attachments/8730791.json
            width: 80
          report_csv: true
          restricted_agent: false
          role: admin
          role_type: null
          shared: false
          shared_agent: false
          shared_phone_number: null
          signature: test
          suspended: false
          tags:
          - "101"
          ticket_restriction: null
          time_zone: American Samoa
          two_factor_auth_enabled: null
          updated_at: 2020-11-17T00:33:55Z
          url: https://example.zendesk.com/api/v2/users/3343.json
          user_fields:
            its_remember_september: null
            skittles: 2018-09-14T00:00:00+00:00
            user_field_1: "101"
          verified: true
    ActivityResponseExample:
      value:
        activity:
          actor:
            active: true
            alias: ""
            created_at: 2020-11-17T00:32:12Z
            custom_role_id: null
            default_group_id: 1873
            details: ""
            email: cgoddard+ted@zendesk.com
            external_id: null
            iana_time_zone: America/Juneau
            id: 158488612
            last_login_at: 2020-11-17T00:33:44Z
            locale: en-gb
            locale_id: 5
            moderator: true
            name: Tedd
            notes: ""
            only_private_comments: false
            organization_id: null
            phone: null
            photo: null
            report_csv: true
            restricted_agent: false
            role: admin
            role_type: null
            shared: false
            shared_agent: false
            shared_phone_number: null
            signature: ""
            suspended: false
            tags: []
            ticket_restriction: null
            time_zone: Alaska
            two_factor_auth_enabled: null
            updated_at: 2020-11-17T00:34:38Z
            url: https://example.zendesk.com/api/v2/users/158488612.json
            user_fields:
              its_remember_september: null
              skittles: null
              user_field_1: null
            verified: true
          actor_id: 158488612
          created_at: 2020-11-17T00:34:40Z
          id: 29183462
          object:
            ticket:
              id: 1521
              subject: test
          target:
            ticket:
              id: 1521
              subject: test
          title: "Tedd assigned ticket #1521 to you."
          updated_at: 2020-11-17T00:34:40Z
          url: https://example.zendesk.com/api/v2/activities/29183462.json
          user:
            active: true
            alias: test
            created_at: 2017-08-14T20:13:53Z
            custom_role_id: null
            default_group_id: 1873
            details: ""
            email: user@zendesk.com
            external_id: oev7jj
            iana_time_zone: Pacific/Pago_Pago
            id: 3343
            last_login_at: 2020-11-16T22:57:45Z
            locale: en-gb
            locale_id: 5
            moderator: true
            name: Samwise Gamgee
            notes: test
            only_private_comments: false
            organization_id: 1873
            phone: null
            photo:
              content_type: image/gif
              content_url: https://example.zendesk.com/system/photos/8730791/1f84950b8d7949b3.gif
              deleted: false
              file_name: 1f84950b8d7949b3.gif
              height: 80
              id: 8730791
              inline: false
              mapped_content_url: https://example.zendesk.com/system/photos/8730791/1f84950b8d7949b3.gif
              size: 4566
              thumbnails:
              - content_type: image/gif
                content_url: https://example.zendesk.com/system/photos/8730801/1f84950b8d7949b3_thumb.gif
                deleted: false
                file_name: 1f84950b8d7949b3_thumb.gif
                height: 32
                id: 8730801
                inline: false
                mapped_content_url: https://example.zendesk.com/system/photos/8730801/1f84950b8d7949b3_thumb.gif
                size: 1517
                url: https://example.zendesk.com/api/v2/attachments/8730801.json
                width: 32
              url: https://example.zendesk.com/api/v2/attachments/8730791.json
              width: 80
            report_csv: true
            restricted_agent: false
            role: admin
            role_type: null
            shared: false
            shared_agent: false
            shared_phone_number: null
            signature: test
            suspended: false
            tags:
            - "101"
            ticket_restriction: null
            time_zone: American Samoa
            two_factor_auth_enabled: null
            updated_at: 2020-11-17T00:33:55Z
            url: https://example.zendesk.com/api/v2/users/3343.json
            user_fields:
              its_remember_september: null
              skittles: 2018-09-14T00:00:00+00:00
              user_field_1: "101"
            verified: true
          user_id: 3343
          verb: tickets.assignment
    AddTagsByObjectIdResponseExample:
      value:
        tags:
        - urgent
        - printer
        - fire
        - paper
    AssigneeFieldAssignableGroupAgentsResponseExample:
      value:
        agents:
        - avatar_url: https://z3n-example.zendesk.com/system/photos/900005192023/my_profile.png
          id: 6473829100
          name: Joe Smith
        - avatar_url: https://z3n-example.zendesk.com/system/photos/412005192023/my_profile.png
          id: 9182736400
          name: Jane Doe
        - avatar_url: https://z3n-example.zendesk.com/system/photos/887005192023/my_profile.png
          id: 1928373460
          name: Cookie Monster
        count: 3
        next_page: null
        previous_page: null
    AssigneeFieldAssignableGroupsAndAgentsSearchResponseExample:
      value:
        agents:
        - group: Tech
          group_id: 6574839201
          id: 8392017465
          name: Sam Technologist
          photo_url: https://z3n-example.zendesk.com/system/photos/410305192023/my_profile.png
        count: 2
        groups:
        - id: 6574839201
          name: Tech
    AssigneeFieldAssignableGroupsResponseExample:
      value:
        count: 3
        groups:
        - description: Engineering
          id: 9182736455
          name: Group for Bugs for Engineering
        - description: Product
          id: 1928374655
          name: Group for feature requests
        - description: Customer Support
          id: 5519283746
          name: Group for customer inquiries
        next_page: null
        previous_page: null
    AttachmentResponseExample:
      value:
        attachment:
          content_type: application/binary
          content_url: https://company.zendesk.com/attachments/myfile.dat
          file_name: myfile.dat
          id: 498483
          size: 2532
          thumbnails: []
          url: https://company.zendesk.com/api/v2/attachments/498483.json
    AttachmentUpdateRequestExample:
      value:
        attachment:
          malware_access_override: true
    AttachmentUploadResponseExample:
      value:
        upload:
          attachment:
            content_type: image/png
            content_url: https://company.zendesk.com/attachments/token/tyBq1ms40dFaHefSIigxZpwGg/?name=crash.png
            deleted: false
            file_name: crash.png
            height: "62"
            id: 1503729607981
            inline: false
            mapped_content_url: https://company.zendesk.com/attachments/token/tyBq1ms40dFaHefSIigxZpwGg/?name=crash.png
            size: 5172
            thumbnails: []
            url: https://company.zendesk.com/api/v2/attachments/1503729607981.json
            width: "80"
          attachments:
          - content_type: image/png
            content_url: https://company.zendesk.com/attachments/token/tyBq1ms40dFaHefSIigxZpwGg/?name=crash.png
            deleted: false
            file_name: crash.png
            height: "62"
            id: 1503729607981
            inline: false
            mapped_content_url: https://company.zendesk.com/attachments/token/tyBq1ms40dFaHefSIigxZpwGg/?name=crash.png
            size: 5172
            thumbnails: []
            url: https://company.zendesk.com/api/v2/attachments/1503729607981.json
            width: "80"
          token: LXJdriewLBP8JrtzzkN7Ne4k6
    AuditLogResponseExample:
      value:
        audit_log:
          action: update
          actor_id: 1234
          actor_name: Sameer Patel
          change_description: Role changed from Administrator to End User
          created_at: 2012-03-05T11:32:44Z
          id: 498483
          ip_address: 209.119.38.228
          source_id: 3456
          source_label: John Doe
          source_type: user
          url: https://company.zendesk.com/api/v2/audit_logs/498483.json
    AuditLogsResponseExample:
      value:
        audit_logs:
        - action: update
          actor_id: 1234
          actor_name: Sameer Patel
          change_description: Role changed from Administrator to End User
          created_at: 2012-03-05T11:32:44Z
          id: 498483
          ip_address: 209.119.38.228
          source_id: 3456
          source_label: John Doe
          source_type: user
          url: https://company.zendesk.com/api/v2/audit_logs/498483.json
    AutocompleteOrganizationsResponseExample:
      value:
        count: 2
        next_page: null
        organizations:
        - created_at: 2018-11-14T00:14:52Z
          details: caterpillar =)
          domain_names:
          - remain.com
          external_id: null
          group_id: 1835962
          id: 35436
          name: Important Customers
          notes: donkey
          organization_fields:
            datepudding: 2018-11-04T00:00:00+00:00
            org_field_1: happy happy
            org_field_2: teapot_kettle
          shared_comments: false
          shared_tickets: false
          tags:
          - smiley
          - teapot_kettle
          updated_at: 2018-11-14T00:54:22Z
          url: https://example.zendesk.com/api/v2/organizations/4112492.json
        - created_at: 2017-08-14T20:13:52Z
          details: test
          domain_names:
          - test.com
          external_id: null
          group_id: null
          id: 20057623
          name: Imperial College
          notes: ""
          organization_fields:
            datepudding: 2018-11-02T00:00:00+00:00
            org_field_1: malarky
            org_field_2: teapot_kettle
          shared_comments: false
          shared_tickets: false
          tags:
          - teapot_kettle
          updated_at: 2019-05-16T01:27:46Z
          url: https://example.zendesk.com.com/api/v2/organizations/1873.json
        previous_page: null
    AutomationCreateResponseExample:
      value:
        automation:
          actions:
          - field: priority
            value: high
          active: true
          conditions:
            all:
            - field: status
              operator: is
              value: open
            - field: priority
              operator: less_than
              value: high
            any: []
          id: 9873843
          position: 8
          raw_title: Roger Wilco
          title: Roger Wilco
    AutomationResponseExample:
      value:
        automation:
          actions:
          - field: status
            value: open
          - field: assignee_id
            value: "296220096"
          active: true
          conditions:
            all:
            - field: status
              operator: less_than
              value: solved
            - field: assignee_id
              operator: is
              value: "296220096"
            any:
            - field: current_tags
              operator: includes
              value: hello
          id: 25
          position: 8
          raw_title: Close and Save
          title: Close and Save
    AutomationsResponseExample:
      value:
        automations:
        - actions:
          - field: status
            value: open
          - field: assignee_id
            value: "296220096"
          active: true
          conditions:
            all:
            - field: status
              operator: less_than
              value: solved
            - field: assignee_id
              operator: is
              value: "296220096"
            any:
            - field: current_tags
              operator: includes
              value: hello
          id: 25
          position: 8
          raw_title: Close and Save
          title: Close and Save
        - actions:
          - field: status
            value: open
          - field: assignee_id
            value: "296220096"
          active: false
          conditions:
            all:
            - field: status
              operator: less_than
              value: solved
            - field: assignee_id
              operator: is
              value: "296220096"
            any:
            - field: current_tags
              operator: includes
              value: hello
          id: 26
          position: 9
          raw_title: "{{dc.assign_priority_tag}}"
          title: Assign priority tag
        count: 2
        next_page: null
        previous_page: null
    AutomationsSearchResponseExample:
      value:
        automations:
        - actions:
          - field: status
            value: open
          - field: assignee_id
            value: "296220096"
          active: true
          conditions:
            all:
            - field: status
              operator: less_than
              value: solved
            - field: assignee_id
              operator: is
              value: "296220096"
            any:
            - field: current_tags
              operator: includes
              value: hello
          id: 25
          position: 9
          raw_title: Close and Save
          title: Close and Save
        - actions:
          - field: status
            value: open
          - field: assignee_id
            value: "296220096"
          active: true
          conditions:
            all:
            - field: status
              operator: less_than
              value: solved
            - field: assignee_id
              operator: is
              value: "296220096"
            any:
            - field: current_tags
              operator: includes
              value: hello
          id: 28
          position: 9
          raw_title: "{{dc.close_and_redirect}}"
          title: Close and redirect to topics
        count: 2
        next_page: null
        previous_page: null
    AutomationsUpdateManyResponseExample:
      value:
        automations:
        - actions:
          - field: status
            value: open
          - field: assignee_id
            value: "296220096"
          active: true
          conditions:
            all:
            - field: status
              operator: less_than
              value: solved
            - field: assignee_id
              operator: is
              value: "296220096"
            any:
            - field: current_tags
              operator: includes
              value: hello
          id: 25
          position: 15
          raw_title: Close and Save
          title: Close and Save
        - actions:
          - field: status
            value: open
          - field: assignee_id
            value: "296220096"
          active: false
          conditions:
            all:
            - field: status
              operator: less_than
              value: solved
            - field: assignee_id
              operator: is
              value: "296220096"
            any:
            - field: current_tags
              operator: includes
              value: hello
          id: 26
          position: 8
          raw_title: "{{dc.assign_priority_tag}}"
          title: Assign priority tag
        count: 2
        next_page: null
        previous_page: null
    BookmarkCreateRequest:
      value:
        bookmark:
          ticket_id: 113
    BookmarkResponse:
      value:
        bookmark:
          created_at: 2020-10-01T08:33:45Z
          id: 900000009567
          ticket:
            id: 123
            priority: high
            raw_subject: Chat with Visitor 19785128
            requester_id: 156
            subject: Chat with Visitor 19785128
            url: "https://{subdomain}.zendesk.com/api/v2/tickets/123.json"
          url: "https://{subdomain}.zendesk.com/api/v2/bookmarks/900000001111.json"
    BookmarksResponse:
      value:
        bookmarks:
        - created_at: 2020-10-01T08:33:45Z
          id: 900000009567
          ticket:
            id: 123
            priority: high
            raw_subject: Chat with Visitor 19785128
            requester_id: 165
            subject: Chat with Visitor 19785128
            url: "https://{subdomain}.zendesk.com/api/v2/tickets/123.json"
          url: "https://{subdomain}.zendesk.com/api/v2/bookmarks/900000001111.json"
        - created_at: 2020-09-11T10:22:45Z
          id: 900000009568
          ticket:
            id: 123
            priority: high
            raw_subject: Chat with Visitor 19785128
            requester_id: 156
            subject: Chat with Visitor 19785128
            url: "https://{subdomain}.zendesk.com/api/v2/tickets/123.json"
          url: "https://{subdomain}.zendesk.com/api/v2/bookmarks/900000001112.json"
        count: 1
        next_page: null
        previous_page: null
    BrandCreateRequestExample:
      value:
        brand:
          name: Brand 1
          subdomain: Brand1
    BrandResponseExample:
      value:
        brand:
          active: true
          brand_url: https://brand1.zendesk.com
          created_at: 2019-08-06T02:43:39Z
          default: true
          has_help_center: true
          help_center_state: enabled
          host_mapping: brand1.com
          id: 360002783572
          is_deleted: false
          logo:
            content_type: image/png
            content_url: https://company.zendesk.com/logos/brand1_logo.png
            file_name: brand1_logo.png
            id: 928374
            mapped_content_url: https://company.com/logos/brand1_logo.png
            size: 166144
            thumbnails:
            - content_type: image/png
              content_url: https://company.zendesk.com/photos/brand1_logo_thumb.png
              file_name: brand1_logo_thumb.png
              id: 928375
              mapped_content_url: https://company.com/photos/brand1_logo_thumb.png
              size: 58298
              url: https://company.zendesk.com/api/v2/attachments/928375.json
            - content_type: image/png
              content_url: https://company.zendesk.com/photos/brand1_logo_small.png
              file_name: brand1_logo_small.png
              id: 928376
              mapped_content_url: https://company.com/photos/brand1_logo_small.png
              size: 58298
              url: https://company.zendesk.com/api/v2/attachments/928376.json
            url: https://company.zendesk.com/api/v2/attachments/928374.json
          name: Brand 1
          signature_template: "{{agent.signature}}"
          subdomain: hello-world
          ticket_form_ids:
          - 360000660811
          updated_at: 2019-08-06T02:43:40Z
          url: https://company.zendesk.com/api/v2/brands/360002783572.json
    BrandUpdateRequestExample:
      value:
        brand:
          active: true
          host_mapping: brand1.com
          name: Brand 1
          subdomain: Brand1
    BrandsResponseExample:
      value:
        brands:
        - active: true
          brand_url: https://brand1.zendesk.com
          created_at: 2019-08-06T02:43:39Z
          default: true
          has_help_center: true
          help_center_state: enabled
          host_mapping: brand1.com
          id: 360002783572
          is_deleted: false
          logo:
            content_type: image/png
            content_url: https://company.zendesk.com/logos/brand1_logo.png
            file_name: brand1_logo.png
            id: 928374
            mapped_content_url: https://company.com/logos/brand1_logo.png
            size: 166144
            thumbnails:
            - content_type: image/png
              content_url: https://company.zendesk.com/photos/brand1_logo_thumb.png
              file_name: brand1_logo_thumb.png
              id: 928375
              mapped_content_url: https://company.com/photos/brand1_logo_thumb.png
              size: 58298
              url: https://company.zendesk.com/api/v2/attachments/928375.json
            - content_type: image/png
              content_url: https://company.zendesk.com/photos/brand1_logo_small.png
              file_name: brand1_logo_small.png
              id: 928376
              mapped_content_url: https://company.com/photos/brand1_logo_small.png
              size: 58298
              url: https://company.zendesk.com/api/v2/attachments/928376.json
            url: https://company.zendesk.com/api/v2/attachments/928374.json
          name: Brand 1
          signature_template: "{{agent.signature}}"
          subdomain: hello-world
          ticket_form_ids:
          - 360000660811
          updated_at: 2019-08-06T02:43:40Z
          url: https://company.zendesk.com/api/v2/brands/360002783572.json
        count: 1
        next_page: null
        previous_page: null
    BulkUpdateDefaultCustomStatusRequestExample:
      value:
        ids: "1234567,1234577"
    BulkUpdateDefaultCustomStatusResponseExample:
      value: {}
    ChannelFrameworkPushResultsResponseExample:
      value:
        results:
        - external_resource_id: "234"
          status:
            code: could_not_locate_parent_external_resource
            description: "123"
    ComplianceDeletionStatusesResponseExample:
      value:
        compliance_deletion_statuses:
        - account_subdomain: accountABC
          action: request_deletion
          application: all
          created_at: 2009-07-20T22:55:23Z
          executer_id: 2000
          user_id: 1
        - account_subdomain: accountABC
          action: started
          application: support
          created_at: 2009-07-20T22:55:29Z
          executer_id: null
          user_id: 1
        - account_subdomain: accountABC
          action: complete
          application: support
          created_at: 2009-07-20T22:57:02Z
          executer_id: null
          user_id: 1
        - account_subdomain: accountABC
          action: started
          application: chat
          created_at: 2009-07-21T02:51:18Z
          executer_id: null
          user_id: 1
    CountOrganizationsResponseExample:
      value:
        count:
          refreshed_at: 2020-04-06T02:18:17Z
          value: 102
    CreateMacroResponseExample:
      value:
        macro:
          actions:
          - field: status
            value: solved
          id: 25
          restriction: {}
          title: Roger Wilco
    CreatedOrganizationResponseExample:
      value:
        organization:
          created_at: 2020-09-30T01:50:12Z
          details: null
          domain_names: []
          external_id: null
          group_id: null
          id: 23409462
          name: My Organization
          notes: null
          organization_fields: null
          shared_comments: false
          shared_tickets: false
          tags: []
          updated_at: 2020-09-30T01:50:12Z
          url: https://example.zendesk.com/api/v2/organizations/23409462.json
    CurrentUserResponseExample:
      value:
        user:
          authenticity_token: <CORS TOKEN>
          id: 35436
          name: Johnny Agent
    CursorBasedExportIncrementalTicketsResponseExample:
      value:
        after_cursor: MTU3NjYxMzUzOS4wfHw0Njd8
        after_url: "https://{subdomain}.zendesk.com/api/v2/incremental/tickets/cursor.json?cursor=MTU3NjYxMzUzOS4wfHw0Njd8"
        before_cursor: null
        before_url: null
        end_of_stream: true
        tickets:
        - assignee_id: 235323
          collaborator_ids:
          - 35334
          - 234
          created_at: 2009-07-20T22:55:29Z
          custom_fields:
          - id: 27642
            value: "745"
          - id: 27648
            value: "yes"
          description: The fire is very colorful.
          due_at: null
          external_id: ahg35h3jh
          follower_ids:
          - 35334
          - 234
          from_messaging_channel: false
          group_id: 98738
          has_incidents: false
          id: 35436
          organization_id: 509974
          priority: high
          problem_id: 9873764
          raw_subject: "{{dc.printer_on_fire}}"
          recipient: support@company.com
          requester_id: 20978392
          satisfaction_rating:
            comment: Great support!
            id: 1234
            score: good
          sharing_agreement_ids:
          - 84432
          status: open
          subject: "Help, my printer is on fire!"
          submitter_id: 76872
          tags:
          - enterprise
          - other_tag
          type: incident
          updated_at: 2011-05-05T10:38:52Z
          url: https://company.zendesk.com/api/v2/tickets/35436.json
          via:
            channel: web
    CursorBasedExportIncrementalUsersResponseExample:
      value:
        after_cursor: MTU3NjYxMzUzOS4wfHw0Njd8
        after_url: "https://{subdomain}.zendesk.com/api/v2/incremental/users/cursor.json?cursor=MTU3NjYxMzUzOS4wfHw0Njd8"
        before_cursor: null
        before_url: null
        end_of_stream: true
        users:
        - active: true
          alias: Mr. Johnny
          created_at: 2009-07-20T22:55:29Z
          custom_role_id: 9373643
          details: ""
          email: johnny@example.com
          external_id: sai989sur98w9
          id: 35436
          last_login_at: 2011-05-05T10:38:52Z
          locale: en-US
          locale_id: 1
          moderator: true
          name: Johnny Agent
          notes: Johnny is a nice guy!
          only_private_comments: false
          organization_id: 57542
          phone: "+15551234567"
          photo:
            content_type: image/png
            content_url: https://company.zendesk.com/photos/my_funny_profile_pic.png
            id: 928374
            name: my_funny_profile_pic.png
            size: 166144
            thumbnails:
            - content_type: image/png
              content_url: https://company.zendesk.com/photos/my_funny_profile_pic_thumb.png
              id: 928375
              name: my_funny_profile_pic_thumb.png
              size: 58298
          restricted_agent: true
          role: agent
          role_type: 0
          shared: false
          shared_agent: false
          signature: "Have a nice day, Johnny"
          suspended: true
          tags:
          - enterprise
          - other_tag
          ticket_restriction: assigned
          time_zone: Copenhagen
          updated_at: 2011-05-05T10:38:52Z
          url: https://company.zendesk.com/api/v2/users/35436.json
          user_fields:
            user_date: 2012-07-23T00:00:00Z
            user_decimal: 5.1
            user_dropdown: option_1
          verified: true
    CustomObjectFieldCreateResponseExample:
      value:
        custom_object_field:
          active: true
          created_at: 2022-09-07T23:21:59Z
          description: Make
          id: 4398096842879
          key: make
          position: 0
          raw_description: Make
          raw_title: Make
          regexp_for_validation: null
          system: false
          title: Make
          type: text
          updated_at: 2022-09-07T23:22:00Z
          url: "https://{subdomain}.zendesk.com/api/v2/custom_objects/car/fields.json?id=4398096842879"
    CustomObjectFieldsCreateRequestExample:
      value:
        custom_object_field:
          key: color
          title: Color
          type: text
    CustomObjectFieldsLimitResponseExample:
      value:
        count: 44
        limit: 400
    CustomObjectFieldsResponseExample:
      value:
        custom_object_fields:
        - active: true
          created_at: 2022-09-07T23:21:59Z
          description: Name
          id: 4398096842877
          key: standard::name
          position: 0
          raw_description: Name
          raw_title: Name
          regexp_for_validation: null
          system: false
          title: Name
          type: text
          updated_at: 2022-09-07T23:22:00Z
          url: "https://{subdomain}.zendesk.com/api/v2/custom_objects/car/fields.json?id=4398096842877"
        - active: true
          created_at: 2022-09-07T23:21:59Z
          description: External ID
          id: 4398096842878
          key: standard::external_id
          position: 1
          raw_description: External ID
          raw_title: External ID
          regexp_for_validation: null
          system: false
          title: External ID
          type: text
          updated_at: 2022-09-07T23:22:00Z
          url: "https://{subdomain}.zendesk.com/api/v2/custom_objects/car/fields.json?id=4398096842878"
        - active: true
          created_at: 2022-09-07T23:22:14Z
          description: Model
          id: 4398096843007
          key: model
          position: 2
          raw_description: Model
          raw_title: Model
          regexp_for_validation: null
          system: false
          title: Model
          type: text
          updated_at: 2022-09-07T23:22:14Z
          url: "https://{subdomain}.zendesk.com/api/v2/custom_objects/car/fields.json?id=4398096843007"
    CustomObjectRecordsAutocompleteResponseExample:
      value:
        count: 100
        custom_object_records:
        - created_at: 2022-09-12T19:29:59Z
          created_by_user_id: "10001"
          custom_object_fields:
            make: Tesla
            model: S
          custom_object_key: car
          external_id: Internal System Record 54848
          id: 01GCSJW391QVSC80GYDH7E93Q6
          name: My Tesla CO record
          updated_at: 2022-09-15T21:07:03Z
          updated_by_user_id: "10001"
          url: "https://{subdomain}.zendesk.com/api/v2/custom_objects/car/records/01GCSJW391QVSC80GYDH7E93Q6.json"
        - created_at: 2022-09-26T22:24:15Z
          created_by_user_id: "123123"
          custom_object_fields:
            make: Honda
            model: Civic
          custom_object_key: car
          external_id: null
          id: 01GDXYD7ZTWYP542BA8MDDTE36
          name: My Tesla CO record2
          updated_at: 2022-09-26T22:24:15Z
          updated_by_user_id: "245159"
          url: "https://{subdomain}.zendesk.com/api/v2/custom_objects/car/records/01GDXYD7ZTWYP542BA8MDDTE36.json"
        links:
          next: "https://{subdomain}.zendesk.com/api/v2/custom_objects/car/records/autocomplete.json?page%5Bafter%5D=eyJmcm9tIjoxLCJzaXplIjoxLCJzZWFyY2hBZnRlciI6bnVsbCwic29ydCI6bnVsbH0%3D&page%5Bsize%5D=1&query="
          prev: null
        meta:
          after_cursor: eyJmcm9tIjoxLCJzaXplIjoxLCJzZWFyY2hBZnRlciI6bnVsbCwic29ydCI6bnVsbH0=
          before_cursor: null
          has_more: true
    CustomObjectRecordsBulkCreateRequestExample:
      value:
        job:
          action: create
          items:
          - custom_object_fields:
              color: Red
              year: 2020
            name: 2020 Tesla
          - custom_object_fields:
              color: Blue
              external_id: ddd444
              year: 2012
            name: 2012 Toyota
          - custom_object_fields:
              color: Silver
              external_id: ddd445
              year: 2017
            name: 2017 Ford
    CustomObjectRecordsCreateRequestExample:
      value:
        custom_object_record:
          custom_object_fields:
            make: Tesla
            model: "Y"
          name: My car 1
    CustomObjectRecordsCreateResponseExample:
      value:
        custom_object_record:
          created_at: 2022-09-26T22:25:10Z
          created_by_user_id: "10001"
          custom_object_fields:
            color: white
            make: Tesla
            model: "Y"
          custom_object_key: car
          external_id: null
          id: 01GDXYEY1FQYN066VHF49YHJ21
          name: My Tesla
          updated_at: 2022-09-26T22:25:10Z
          updated_by_user_id: "10001"
          url: "https://{subdomain}.zendesk.com/api/v2/custom_objects/car/records/01GDXYEY1FQYN066VHF49YHJ21.json"
    CustomObjectRecordsIndexResponseExample:
      value:
        custom_object_records:
        - created_at: 2022-09-12T19:29:59Z
          created_by_user_id: "10001"
          custom_object_fields:
            make: Tesla
            model: S
          custom_object_key: car
          external_id: Internal System Record 54848
          id: 01GCSJW391QVSC80GYDH7E93Q6
          name: My Tesla CO record
          updated_at: 2022-09-15T21:07:03Z
          updated_by_user_id: "10001"
          url: "https://{subdomain}.zendesk.com/api/v2/custom_objects/car/records/01GCSJW391QVSC80GYDH7E93Q6.json"
        - created_at: 2022-09-26T22:24:15Z
          created_by_user_id: "123123"
          custom_object_fields:
            make: Honda
            model: Civic
          custom_object_key: car
          external_id: null
          id: 01GDXYD7ZTWYP542BA8MDDTE36
          name: My Tesla CO record2
          updated_at: 2022-09-26T22:24:15Z
          updated_by_user_id: "245159"
          url: "https://{subdomain}.zendesk.com/api/v2/custom_objects/car/records/01GDXYD7ZTWYP542BA8MDDTE36.json"
        links:
          next: "https://{subdomain}.zendesk.com/api/v2/custom_objects/car/records.json?page%5Bafter%5D=eyJmcm9tIjoxLCJzaXplIjoxLCJzZWFyY2hBZnRlciI6bnVsbCwic29ydCI6bnVsbH0%3D&page%5Bsize%5D=1&query="
          prev: null
        meta:
          after_cursor: eyJmcm9tIjoxLCJzaXplIjoxLCJzZWFyY2hBZnRlciI6bnVsbCwic29ydCI6bnVsbH0=
          before_cursor: null
          has_more: true
    CustomObjectRecordsJobsResponseExample:
      value:
        job_status:
          id: V3-291e720c98aef4d953563ab090486213
          message: null
          progress: null
          results: null
          status: queued
          total: 2
          url: "https://{subdomain}.zendesk.com/api/v2/job_statuses/V3-291e720c98aef4d953563ab090486213.json"
    CustomObjectRecordsLimitResponseExample:
      value:
        count: 10294
        limit: 1000000
    CustomObjectRecordsSearchResponseExample:
      value:
        count: 100
        custom_object_records:
        - created_at: 2022-09-12T19:29:59Z
          created_by_user_id: "10001"
          custom_object_fields:
            make: Tesla
            model: S
          custom_object_key: car
          external_id: Internal System Record 54848
          id: 01GCSJW391QVSC80GYDH7E93Q6
          name: My Tesla CO record
          updated_at: 2022-09-15T21:07:03Z
          updated_by_user_id: "10001"
          url: "https://{subdomain}.zendesk.com/api/v2/custom_objects/car/records/01GCSJW391QVSC80GYDH7E93Q6.json"
        - created_at: 2022-09-26T22:24:15Z
          created_by_user_id: "123123"
          custom_object_fields:
            make: Honda
            model: Civic
          custom_object_key: car
          external_id: null
          id: 01GDXYD7ZTWYP542BA8MDDTE36
          name: My Tesla CO record2
          updated_at: 2022-09-26T22:24:15Z
          updated_by_user_id: "245159"
          url: "https://{subdomain}.zendesk.com/api/v2/custom_objects/car/records/01GDXYD7ZTWYP542BA8MDDTE36.json"
        links:
          next: "https://{subdomain}.zendesk.com/api/v2/custom_objects/car/records/search.json?page%5Bafter%5D=eyJmcm9tIjoxLCJzaXplIjoxLCJzZWFyY2hBZnRlciI6bnVsbCwic29ydCI6bnVsbH0%3D&page%5Bsize%5D=1&query="
          prev: null
        meta:
          after_cursor: eyJmcm9tIjoxLCJzaXplIjoxLCJzZWFyY2hBZnRlciI6bnVsbCwic29ydCI6bnVsbH0=
          before_cursor: null
          has_more: true
    CustomObjectRecordsUpsertRequestExample:
      value:
        custom_object_record:
          custom_object_fields:
            make: Oldsmobile
            model: Cutlass Supreme
          name: 1997 Cutlass Supreme
    CustomObjectRecordsUpsertResponseExample:
      value:
        custom_object_record:
          created_at: 2023-09-26T22:25:10Z
          created_by_user_id: "10001"
          custom_object_fields:
            make: Oldsmobile
            model: Cutlass Supreme
          custom_object_key: car
          external_id: X90001
          id: 01GDXYEY1FQYN066VHF49YHJ21
          name: 1997 Cutlass Supreme
          updated_at: 2023-09-26T22:25:10Z
          updated_by_user_id: "10001"
          url: "https://{subdomain}.zendesk.com/api/v2/custom_objects/car/records/01GDXYEY1FQYN066VHF49YHJ21.json"
    CustomObjectsCreateRequestExample:
      value:
        custom_object:
          key: apartment
          title: Apartment
          title_pluralized: Apartments
    CustomObjectsCreateResponseExample:
      value:
        custom_object:
          created_at: 2022-09-02T22:44:35Z
          created_by_user_id: "16485"
          description: The list of cars in our fleet
          key: car
          raw_description: "{{dc.car_description}}"
          raw_title: "{{dc.car_title}}"
          raw_title_pluralized: "{{dc.car_title_plural}}"
          title: Car
          title_pluralized: Cars
          updated_at: 2022-09-02T22:44:35Z
          updated_by_user_id: "10234"
          url: "https://{subdomain}.zendesk.com/api/v2/custom_objects/01GC0617DV48CAXK6WA4DW51HD.json"
    CustomObjectsLimitResponseExample:
      value:
        count: 19
        limit: 50
    CustomObjectsResponseExample:
      value:
        custom_objects:
        - created_at: 2022-09-02T22:44:35Z
          created_by_user_id: "16485"
          description: The list of cars in our fleet
          key: car
          raw_description: "{{dc.car_description}}"
          raw_title: "{{dc.car_title}}"
          raw_title_pluralized: "{{dc.car_title_plural}}"
          title: Car
          title_pluralized: Cars
          updated_at: 2022-09-02T22:44:35Z
          updated_by_user_id: "10234"
          url: "https://{subdomain}.zendesk.com/api/v2/custom_objects/01GC0617DV48CAXK6WA4DW51HD.json"
        - created_at: 2022-08-01T22:44:35Z
          created_by_user_id: "123123"
          description: The list of vessels in our fleet
          key: vessel
          raw_description: "{{dc.vessel_description}}"
          raw_title: "{{dc.vessel_title}}"
          raw_title_pluralized: "{{dc.vessel_title_plural}}"
          title: Vessel
          title_pluralized: Vessel
          updated_at: 2022-09-02T22:44:35Z
          updated_by_user_id: "251251"
          url: "https://{subdomain}.zendesk.com/api/v2/custom_objects/01GC9TXVMNT6VHB5GBGAR09WPF.json"
    CustomRoleResponseExample:
      value:
        custom_role:
          configuration:
            assign_tickets_to_any_group: false
            chat_access: true
            end_user_list_access: full
            end_user_profile_access: readonly
            explore_access: edit
            forum_access: readonly
            forum_access_restricted_content: false
            group_access: true
            light_agent: false
            macro_access: full
            manage_business_rules: true
            manage_contextual_workspaces: false
            manage_dynamic_content: false
            manage_extensions_and_channels: true
            manage_facebook: false
            manage_organization_fields: false
            manage_ticket_fields: false
            manage_ticket_forms: false
            manage_user_fields: false
            moderate_forums: false
            organization_editing: false
            organization_notes_editing: false
            report_access: none
            side_conversation_create: true
            ticket_access: within-groups
            ticket_comment_access: none
            ticket_deletion: false
            ticket_editing: true
            ticket_merge: false
            ticket_tag_editing: true
            twitter_search_access: true
            user_view_access: readonly
            view_access: full
            view_deleted_tickets: false
            voice_access: true
            voice_dashboard_access: false
          created_at: 2012-03-12T16:32:22Z
          description: sample description
          id: 10127
          name: sample role
          role_type: 0
          team_member_count: 10
          updated_at: 2012-03-12T16:32:22Z
    CustomRolesResponseExample:
      value:
        custom_roles:
        - configuration:
            assign_tickets_to_any_group: false
            chat_access: true
            end_user_list_access: full
            end_user_profile_access: readonly
            explore_access: edit
            forum_access: readonly
            forum_access_restricted_content: false
            group_access: true
            light_agent: false
            macro_access: full
            manage_business_rules: true
            manage_contextual_workspaces: false
            manage_dynamic_content: false
            manage_extensions_and_channels: true
            manage_facebook: false
            manage_organization_fields: false
            manage_ticket_fields: false
            manage_ticket_forms: false
            manage_user_fields: false
            moderate_forums: false
            organization_editing: false
            organization_notes_editing: false
            report_access: none
            side_conversation_create: true
            ticket_access: within-groups
            ticket_comment_access: none
            ticket_deletion: false
            ticket_editing: true
            ticket_merge: false
            ticket_tag_editing: true
            twitter_search_access: true
            user_view_access: readonly
            view_access: full
            view_deleted_tickets: false
            voice_access: true
            voice_dashboard_access: false
          created_at: 2012-03-12T16:32:22Z
          description: "Advisors manage the workflow and configure the help desk.\
            \ They create or manage automations, macros, triggers, views, and SLA\
            \ targets. They also set up channels and extensions. Advisors don't solve\
            \ tickets, they can only make private comments."
          id: 16
          name: Advisor
          role_type: 0
          team_member_count: 10
          updated_at: 2012-03-12T16:32:22Z
        - configuration:
            assign_tickets_to_any_group: false
            chat_access: true
            end_user_list_access: full
            end_user_profile_access: readonly
            explore_access: edit
            forum_access: readonly
            forum_access_restricted_content: false
            group_access: true
            light_agent: false
            macro_access: full
            manage_business_rules: true
            manage_contextual_workspaces: false
            manage_dynamic_content: false
            manage_extensions_and_channels: true
            manage_facebook: false
            manage_organization_fields: false
            manage_ticket_fields: false
            manage_ticket_forms: false
            manage_user_fields: false
            moderate_forums: false
            organization_editing: false
            organization_notes_editing: false
            report_access: none
            side_conversation_create: true
            ticket_access: within-groups
            ticket_comment_access: none
            ticket_deletion: false
            ticket_editing: true
            ticket_merge: false
            ticket_tag_editing: true
            twitter_search_access: true
            user_view_access: readonly
            view_access: full
            view_deleted_tickets: false
            voice_access: true
            voice_dashboard_access: false
          created_at: 2011-07-20T04:31:29Z
          description: "A Staff agent's primary role is to solve tickets. They can\
            \ edit tickets within their groups, view reports, and add or edit personal\
            \ views and macros."
          id: 6
          name: Staff
          role_type: 0
          team_member_count: 10
          updated_at: 2012-02-02T10:32:59Z
    CustomStatusCreateRequestExample:
      value:
        custom_status:
          active: true
          agent_label: Responding quickly
          description: Customer needs a response quickly
          end_user_description: Your ticket is being responded to
          end_user_label: Urgent processing
          status_category: open
    CustomStatusResponseExample:
      value:
        custom_status:
          active: true
          agent_label: Responding quickly
          created_at: 2021-07-20T22:55:29Z
          default: false
          description: Customer needs a response quickly
          end_user_description: Your ticket is being responded to
          end_user_label: Urgent processing
          id: 35436
          raw_agent_label: Responding quickly
          raw_description: Customer needs a response quickly
          raw_end_user_description: Your ticket is being responded to
          raw_end_user_label: Urgent processing
          status_category: open
          updated_at: 2021-07-20T22:55:29Z
    CustomStatusUpdateRequestExample:
      value:
        custom_status:
          active: true
          agent_label: Responding quickly
          description: Customer needs a response quickly
          end_user_description: Your ticket is being responded to
          end_user_label: Urgent processing
    CustomStatusesResponseExample:
      value:
        custom_statuses:
        - active: true
          agent_label: Responding quickly
          created_at: 2021-07-20T22:55:29Z
          default: false
          description: Customer needs a response quickly
          end_user_description: Your ticket is being responded to
          end_user_label: Urgent processing
          id: 35436
          raw_agent_label: Responding quickly
          raw_description: Customer needs a response quickly
          raw_end_user_description: Your ticket is being responded to
          raw_end_user_label: Urgent processing
          status_category: open
          updated_at: 2021-07-20T22:55:29Z
    CustomTicketFieldOptionCreateResponseExample:
      value:
        custom_field_option:
          id: 10002
          name: Grapes
          position: 2
          raw_name: Grapes
          url: "http://{subdomain}.zendesk.com/api/v2/ticket_fields/1/options/10002.json"
          value: grape
    CustomTicketFieldOptionResponseExample:
      value:
        custom_field_option:
          id: 10001
          name: Bananas
          position: 1
          raw_name: Bananas
          url: "http://{subdomain}.zendesk.com/api/v2/ticket_fields/1/options/10001.json"
          value: banana
    CustomTicketFieldOptionUpdateResponseExample:
      value:
        custom_field_option:
          id: 10002
          name: Pineapples
          position: 2
          raw_name: Pineapples
          url: "http://{subdomain}.zendesk.com/api/v2/ticket_fields/1/options/10002.json"
          value: pineapple
    CustomTicketFieldOptionsResponseExample:
      value:
        count: 2
        custom_field_options:
        - id: 10000
          name: Apples
          position: 0
          raw_name: Apples
          url: "http://{subdomain}.zendesk.com/api/v2/ticket_fields/1/options/10000.json"
          value: apple
        - id: 10001
          name: Bananas
          position: 1
          raw_name: Bananas
          url: "http://{subdomain}.zendesk.com/api/v2/ticket_fields/1/options/10001.json"
          value: banana
        next_page: null
        previous_page: null
    CustomUserFieldOptionCreateResponseExample:
      value:
        custom_field_option:
          id: 10002
          name: Grapes
          position: 2
          raw_name: Grapes
          url: "http://{subdomain}.zendesk.com/api/v2/user_fields/1/options/10002.json"
          value: grape
    CustomUserFieldOptionResponseExample:
      value:
        custom_field_option:
          id: 10001
          name: Bananas
          position: 1
          raw_name: Bananas
          url: "http://{subdomain}.zendesk.com/api/v2/user_fields/1/options/10001.json"
          value: banana
    CustomUserFieldOptionUpdateResponseExample:
      value:
        custom_field_option:
          id: 10002
          name: Pineapples
          position: 2
          raw_name: Pineapples
          url: "http://{subdomain}.zendesk.com/api/v2/user_fields/1/options/10002.json"
          value: pineapple
    CustomUserFieldOptionsResponseExample:
      value:
        count: 2
        custom_field_options:
        - id: 10000
          name: Apples
          position: 0
          raw_name: Apples
          url: "http://{subdomain}.zendesk.com/api/v2/user_fields/1/options/10000.json"
          value: apple
        - id: 10001
          name: Bananas
          position: 1
          raw_name: Bananas
          url: "http://{subdomain}.zendesk.com/api/v2/user_fields/1/options/10001.json"
          value: banana
        next_page: null
        previous_page: null
    DefinitionsResponseExample:
      value:
        definitions:
          conditions_all:
          - group: ticket
            nullable: false
            operators:
            - terminal: false
              title: Is
              value: is
            repeatable: false
            subject: status
            title: Status
            type: list
            values:
            - enabled: false
              title: Closed
              value: closed
          conditions_any:
          - group: ticket
            nullable: false
            operators:
            - terminal: false
              title: Is
              value: is
            repeatable: false
            subject: status
            title: Status
            type: list
            values:
            - enabled: false
              title: Closed
              value: closed
    DeleteUserResponseExample:
      value:
        user:
          active: false
          id: 9873843
          name: Roger Wilco II
    DeletedUserResponseExample:
      value:
        deleted_user:
          active: false
          created_at: 2019-08-26T02:10:24Z
          email: david@email.com
          id: 189304711533
          locale: en-US
          locale_id: 1
          name: David
          organization_id: 360000000008
          phone: null
          photo: null
          role: end-user
          shared_phone_number: null
          time_zone: Eastern Time (US & Canada)
          updated_at: 2019-08-26T02:10:27Z
          url: "https://{subdomain}.zendesk.com/api/v2/deleted_users/189304711533"
    DeletedUsersCountResponseExample:
      value:
        count:
          refreshed_at: 2020-04-06T02:18:17Z
          value: 13
    DeletedUsersResponseExample:
      value:
        deleted_users:
        - active: false
          created_at: 2019-08-26T02:10:24Z
          email: david@gmail.com
          id: 189304711533
          locale: en-US
          locale_id: 1
          name: David
          organization_id: 12312312
          phone: null
          photo: null
          role: end-user
          shared_phone_number: null
          time_zone: Eastern Time (US & Canada)
          updated_at: 2019-08-26T02:10:27Z
          url: "https://{subdomain}.zendesk.com/api/v2/deleted_users/189304711533"
        - active: false
          created_at: 2019-08-26T02:10:28Z
          email: linda@gmail.com
          id: 12204720593
          locale: en-US
          locale_id: 1
          name: Linda
          organization_id: 123123123
          phone: null
          photo: null
          role: end-user
          shared_phone_number: null
          time_zone: Eastern Time (US & Canada)
          updated_at: 2019-08-26T02:10:29Z
          url: "https://{subdomain}.zendesk.com/api/v2/deleted_users/12204720593"
    DynamicContentResponseExample:
      value:
        item:
          created_at: 2015-05-13T22:33:12Z
          default_locale_id: 1
          id: 47
          name: Snowboard Problem
          outdated: false
          placeholder: "{{dc.snowboard_problem}}"
          updated_at: 2015-05-13T22:33:12Z
          url: https://company.zendesk.com/api/v2/dynamic_content/items/47.json
          variants:
          - active: true
            content: Voici mon contenu dynamique en français
            created_at: 2015-05-13T22:33:12Z
            default: true
            id: 47
            locale_id: 16
            outdated: false
            updated_at: 2015-05-13T22:33:12Z
            url: https://company.zendesk.com/api/v2/dynamic_content/items/47/variants/47.json
          - active: true
            content: Este es mi contenido dinámico en español
            created_at: 2015-05-13T22:33:12Z
            default: false
            id: 48
            locale_id: 2
            outdated: false
            updated_at: 2015-05-13T22:33:12Z
            url: https://company.zendesk.com/api/v2/dynamic_content/items/47/variants/48.json
    DynamicContentUpdateResponseExample:
      value:
        item:
          created_at: 2015-05-13T22:33:12Z
          default_locale_id: 1
          id: 47
          name: New name
          outdated: false
          placeholder: "{{dc.snowboard_problem}}"
          updated_at: 2015-05-13T22:33:12Z
          url: https://company.zendesk.com/api/v2/dynamic_content/items/47.json
          variants:
          - active: true
            content: Voici mon contenu dynamique en français
            created_at: 2015-05-13T22:33:12Z
            default: true
            id: 47
            locale_id: 16
            outdated: false
            updated_at: 2015-05-13T22:33:12Z
            url: https://company.zendesk.com/api/v2/dynamic_content/items/47/variants/47.json
          - active: true
            content: Este es mi contenido dinámico en español
            created_at: 2015-05-13T22:33:12Z
            default: false
            id: 48
            locale_id: 2
            outdated: false
            updated_at: 2015-05-13T22:33:12Z
            url: https://company.zendesk.com/api/v2/dynamic_content/items/47/variants/48.json
    DynamicContentVariantResponseExample:
      value:
        variant:
          active: true
          content: C'est mon contenu dynamique en français
          created_at: 2014-04-09T19:53:23Z
          default: false
          id: 23
          locale_id: 127
          outdated: false
          updated_at: 2014-04-09T19:53:23Z
          url: https://subdomain.zendesk.com/api/v2/dynamic_content/items/3/variants/23.json
    DynamicContentVariantUpdateResponseExample:
      value:
        variant:
          active: false
          content: C'est mon contenu dynamique en français
          created_at: 2014-04-09T19:53:23Z
          default: false
          id: 23
          locale_id: 125
          outdated: false
          updated_at: 2014-04-09T19:53:23Z
          url: https://subdomain.zendesk.com/api/v2/dynamic_content/items/3/variants/23.json
    DynamicContentVariantsCreateManyResponseExample:
      value:
        variants:
        - active: true
          content: C'est mon contenu dynamique en français
          created_at: 2014-04-09T19:53:23Z
          default: false
          id: 23
          locale_id: 127
          outdated: false
          updated_at: 2014-04-09T19:53:23Z
          url: https://subdomain.zendesk.com/api/v2/dynamic_content/items/3/variants/23.json
        - active: true
          content: Este es mi contenido dinámico en español
          created_at: 2014-04-09T19:53:23Z
          default: false
          id: 24
          locale_id: 126
          outdated: false
          updated_at: 2014-04-09T19:53:23Z
          url: https://subdomain.zendesk.com/api/v2/dynamic_content/items/3/variants/24.json
    DynamicContentVariantsResponseExample:
      value:
        variants:
        - active: true
          content: This is my dynamic content in English
          created_at: 2014-04-09T19:53:23Z
          default: true
          id: 23
          locale_id: 125
          outdated: false
          updated_at: 2014-04-09T19:53:23Z
          url: https://subdomain.zendesk.com/api/v2/dynamic_content/items/3/variants/23.json
        - active: false
          content: Este es mi contenido dinámico en español
          created_at: 2014-04-09T19:53:23Z
          default: false
          id: 24
          locale_id: 126
          outdated: true
          updated_at: 2014-04-09T19:53:23Z
          url: https://subdomain.zendesk.com/api/v2/dynamic_content/items/3/variants/24.json
    DynamicContentVariantsUpdateManyResponseExample:
      value:
        variants:
        - active: true
          content: C'est mon contenu dynamique en français
          created_at: 2014-04-09T19:53:23Z
          default: false
          id: 23
          locale_id: 16
          outdated: false
          updated_at: 2014-04-09T19:53:23Z
          url: https://subdomain.zendesk.com/api/v2/dynamic_content/items/3/variants/23.json
        - active: true
          content: Este es mi contenido dinámico en español
          created_at: 2014-04-09T19:53:23Z
          default: false
          id: 24
          locale_id: 2
          outdated: false
          updated_at: 2014-04-09T19:53:23Z
          url: https://subdomain.zendesk.com/api/v2/dynamic_content/items/3/variants/24.json
    DynamicContentsResponseExample:
      value:
        items:
        - created_at: 2015-05-13T22:33:12Z
          default_locale_id: 1
          id: 47
          name: Snowboard Problem
          outdated: true
          placeholder: "{{dc.snowboard_problem}}"
          updated_at: 2015-05-13T22:33:12Z
          url: https://company.zendesk.com/api/v2/dynamic_content/items/47.json
          variants:
          - active: true
            content: C'est mon contenu dynamique en français
            created_at: 2015-05-13T22:33:12Z
            default: true
            id: 47
            locale_id: 1
            outdated: false
            updated_at: 2015-05-13T22:33:12Z
            url: https://company.zendesk.com/api/v2/dynamic_content/items/47/variants/47.json
    EssentialsCardExample:
      value:
        object_layout:
          created_at: 2022-04-02T22:55:29Z
          default: true
          fields:
          - id: null
            zrn: zen:user:identity:email
          - id: null
            zrn: zen:user:field:standard:external_id
          - id: null
            zrn: zen:user:field:standard:iana_time_zone
          - id: null
            zrn: zen:user:field:standard:locale
          - id: null
            zrn: zen:user:field:standard:organization_id
          id: null
          key: zen:user
          layout: essentials_card
          max_count: 20
          updated_at: 2022-04-02T22:55:29Z
    EssentialsCardsExample:
      value:
        object_layouts:
        - created_at: 2022-04-02T22:55:29Z
          default: true
          fields: []
          id: null
          key: zen:user
          layout: essentials_card
          max_count: 20
          updated_at: 2022-04-02T22:55:29Z
        - created_at: 2022-05-02T22:55:29Z
          default: true
          fields: []
          id: null
          key: zen:custome_object:car
          layout: essentials_card
          max_count: 20
          updated_at: 2022-05-02T22:55:29Z
    ExportIncrementalOrganizationsResponseExample:
      value:
        count: 1
        end_of_stream: true
        end_time: 1601357503
        next_page: https://example.zendesk.com/api/v2/incremental/ticket_events.json?start_time=1601357503
        organizations:
        - created_at: 2018-11-14T00:14:52Z
          details: caterpillar =)
          domain_names:
          - remain.com
          external_id: ABC198
          group_id: 1835962
          id: 4112492
          name: Groablet Enterprises
          notes: donkey
          organization_fields:
            datepudding: 2018-11-04T00:00:00+00:00
            org_field_1: happy happy
            org_field_2: teapot_kettle
          shared_comments: false
          shared_tickets: false
          tags:
          - smiley
          - teapot_kettle
          updated_at: 2018-11-14T00:54:22Z
          url: https://example.zendesk.com/api/v2/organizations/4112492.json
    ExportIncrementalTicketEventsResponseExample:
      value:
        count: 1
        end_of_stream: true
        end_time: 1601357503
        next_page: https://example.zendesk.com/api/v2/incremental/ticket_events.json?start_time=1601357503
        ticket_events:
        - id: 926256957613
          instance_id: 1
          metric: agent_work_time
          ticket_id: 155
          time: 2020-10-26T12:53:12Z
          type: measure
    GroupCreateResponseExample:
      value:
        group:
          created_at: 2009-08-26T00:07:08Z
          id: 122
          is_public: true
          name: My Group
          updated_at: 2010-05-13T00:07:08Z
    GroupMembershipResponseExample:
      value:
        group_membership:
          created_at: 2012-04-03T12:34:01Z
          default: true
          group_id: 88
          id: 461
          updated_at: 2012-04-03T12:34:01Z
          user_id: 72
    GroupMembershipsResponseExample:
      value:
        group_memberships:
        - created_at: 2009-05-13T00:07:08Z
          default: true
          group_id: 12
          id: 4
          updated_at: 2011-07-22T00:11:12Z
          user_id: 29
        - created_at: 2012-03-13T22:01:32Z
          default: false
          group_id: 3
          id: 49
          updated_at: 2012-03-13T22:01:32Z
          user_id: 155
    GroupResponseExample:
      value:
        group:
          created_at: 2009-08-26T00:07:08Z
          id: 122
          is_public: true
          name: MCs
          updated_at: 2010-05-13T00:07:08Z
    GroupSLAPoliciesResponseExample:
      value:
        count: 1
        group_sla_policies:
        - description: "For low priority tickets, the Tier 1 group will solve or reassign\
            \ the ticket in one hour."
          filter:
            all:
            - field: group_ownership_time
              operator: includes
              value:
              - 6
          id: 01H078CBDY28BZG7P6BONY09DN
          policy_metrics:
          - business_hours: false
            metric: group_ownership_time
            priority: low
            target: 3600
          position: 3
          title: Incidents
          url: "https://{subdomain}.zendesk.com/api/v2/group_sla/policies/01H078CBDY28BZG7P6BONY09DN.json"
        next_page: null
        previous_page: null
    GroupSLAPolicyCreateResponse:
      value:
        group_sla_policy:
          description: The group with id 6 will have to solve or reassign normal priority
            tickets in 30 minutes and urgent tickets in 10.
          filter:
            all:
            - field: group_ownership_time
              operator: includes
              value:
              - 6
          id: 01H078CBDY28BZG7P6BONY09DN
          policy_metrics:
          - business_hours: false
            metric: group_ownership_time
            priority: normal
            target: 1800
          - business_hours: false
            metric: group_ownership_time
            priority: urgent
            target: 600
          position: 3
          title: Incidents
          url: "https://{subdomain}.zendesk.com/api/v2/group_slas/policies/01H078CBDY28BZG7P6BONY09DN.json"
    GroupSLAPolicyFilterDefinitionResponseExample:
      value:
        definitions:
          all:
          - group: ticket
            operators:
            - title: Contains at least one of the following
              value: includes
            - title: Contains at least none of the following
              value: not_includes
            title: Group ID
            value: group_id
            values:
              list:
              - title: Tier 1
                value: 6
              type: list
    GroupSLAPolicyResponseExample:
      value:
        group_sla_policy:
          description: Low priority tickets assigned to the group with id 6 will be
            completed or reassigned in one hour.
          filter:
            all:
            - field: group_id
              operator: includes
              value:
              - 6
          id: 01H078CBDY28BZG7P6BONY09DN
          policy_metrics:
          - business_hours: false
            metric: group_ownership_time
            priority: low
            target: 3600
          position: 3
          title: Incidents
          url: "https://{subdomain}.zendesk.com/api/v2/group_sla/policies/01H078CBDY28BZG7P6BONY09DN.json"
    GroupSLAPolicyUpdateResponse:
      value:
        group_sla_policy:
          description: Normal priority tickets assigned to the groups 6 or 7 will
            be completed or reassigned in 30 minutes.
          filter:
            all:
            - field: group_id
              operator: includes
              value:
              - 6
              - 7
          id: 01H078CBDY28BZG7P6BONY09DN
          policy_metrics:
          - business_hours: false
            metric: group_ownership_time
            priority: normal
            target: 1800
          position: 3
          title: Urgent Incidents
          url: "https://{subdomain}.zendesk.com/api/v2/group_slas/policies/01H078CBDY28BZG7P6BONY09DN.json"
    GroupUpdateResponseExample:
      value:
        group:
          created_at: 2009-08-26T00:07:08Z
          id: 123
          is_public: false
          name: Interesting Group
          updated_at: 2010-05-13T00:07:08Z
    GroupsCountResponseExample:
      value:
        count:
          refreshed_at: 2020-04-06T02:18:17Z
          value: 102
    GroupsResponseExample:
      value:
        groups:
        - created_at: 2009-05-13T00:07:08Z
          id: 211
          is_public: true
          name: DJs
          updated_at: 2011-07-22T00:11:12Z
        - created_at: 2009-08-26T00:07:08Z
          id: 122
          is_public: true
          name: MCs
          updated_at: 2010-05-13T00:07:08Z
    HostMappingResponseInvalidCNAMEExample:
      value:
        expected_cnames:
        - bar.zendesk.com
        is_valid: false
        reason: not_a_cname
    HostMappingResponseValidExample:
      value:
        cname: bar.zendesk.com
        is_valid: true
    HostMappingResponseWrongCNAMEExample:
      value:
        cname: bar.zendesk.com
        expected_cnames:
        - bar.zendesk.com
        is_valid: false
        reason: google.com
    IncrementalSkillBasedRoutingAttributeValuesExample:
      value:
        attribute_values:
        - attribute_id: 15821cba-7326-11e8-b07e-950ba849aa27
          id: 19ed17fb-7326-11e8-b07e-9de44e7e7f20
          name: English
          time: 2018-06-19T01:33:26Z
          type: create
        count: 1200
        end_time: 1533266020
        next_page: "https://{subdomain}.zendesk.com/api/v2/incremental/routing/attribute_values.json?cursor=7d724c71-3911-11e8-9621-836b8c683dc6"
    IncrementalSkillBasedRoutingAttributesExample:
      value:
        attributes:
        - id: 15821cba-7326-11e8-b07e-950ba849aa27
          name: Languages
          time: 2018-06-19T01:33:19Z
          type: create
        count: 1200
        end_time: 1533266020
        next_page: "https://{subdomain}.zendesk.com/api/v2/incremental/routing/attributes.json?cursor=7d724c71-3911-11e8-9621-836b8c683dc6"
    IncrementalSkillBasedRoutingInstanceValuesExample:
      value:
        count: 1200
        end_time: 1533266020
        instance_values:
        - attribute_value_id: 19ed17fb-7326-11e8-b07e-9ab44e7e7f28
          id: 62055cad-7326-11e8-b07e-73653560136b
          instance_id: "10001"
          time: 2019-06-19T01:35:27Z
          type: associate_agent
        - attribute_value_id: 19ed17fb-7326-11e8-b07e-9ab44e7e7f28
          id: 62055cad-7326-11e8-b07e-cf1082b7e6d4
          instance_id: "11375"
          time: 2019-06-19T01:35:27Z
          type: associate_agent
        - attribute_value_id: 19ed17fb-7326-11e8-b07e-9ab44e7e7f28
          id: 62055cad-7326-11e8-b07e-5b8483a47e24
          instance_id: "14187"
          time: 2020-11-14T16:32:22Z
          type: unassociate_agent
        next_page: "https://{subdomain}.zendesk.com/api/v2/incremental/routing/instance_values.json?cursor=62055cad-7326-11e8-b07e-73653560136b"
    JobStatusBulkDeleteResponseExample:
      value:
        job_status:
          id: 82de0b044094f0c67893ac9fe64f1a99
          message: Completed at 2018-03-08 10:07:04 +0000
          progress: 2
          results:
          - action: delete
            id: 244
            status: Deleted
            success: true
          - action: delete
            id: 245
            status: Deleted
            success: true
          status: completed
          total: 2
          url: https://example.zendesk.com/api/v2/job_statuses/82de0b0467893ac9fe64f1a99.json
    JobStatusResponseExample:
      value:
        job_status:
          id: 82de0b044094f0c67893ac9fe64f1a99
          message: Completed at 2018-03-08 10:07:04 +0000
          progress: 2
          results:
          - action: update
            id: 244
            status: Updated
            success: true
          - action: update
            id: 245
            status: Updated
            success: true
          status: completed
          total: 2
          url: https://example.zendesk.com/api/v2/job_statuses/82de0b0467893ac9fe64f1a99.json
    JobStatusesResponseExample:
      value:
        job_statuses:
        - id: 8b726e606741012ffc2d782bcb7848fe
          status: completed
        - id: e7665094164c498781ebe4c8db6d2af5
          status: completed
    ListDeletedTicketsResponseExample:
      value:
        count: 1
        deleted_tickets:
        - actor:
            id: 3946
            name: Taz Wombat
          deleted_at: 20140704T15:37:04Z
          id: 581
          previous_state: open
          subject: Wombat Party
        next_page: null
        previous_page: null
    ListTicketCollaboratorsResponseExample:
      value:
        users:
        - id: 223443
          name: Johnny Agent
        - id: 8678530
          name: Peter Admin
    ListTicketEmailCCsResponseExample:
      value:
        users:
        - id: "223443"
          name: Johnny Agent
        - id: "8678530"
          name: Peter Admin
        - id: "6748530"
          name: Jane End User
    ListTicketFollowersResponseExample:
      value:
        users:
        - id: 223443
          name: Johnny Agent
        - id: 8678530
          name: Peter Admin
    ListTicketIncidentsResponseExample:
      value:
        tickets:
        - description: The fire is very colorful.
          id: 33
          status: open
          subject: My printer is on fire
        - description: The fire is very colorful as well!
          id: 34
          status: pending
          subject: The printer is on fire over here too
    ListTicketProblemsResponseExample:
      value:
        tickets:
        - custom_status_id: 123
          description: The fire is very colorful.
          id: 33
          status: open
          subject: My printer is on fire
        - custom_status_id: 231
          description: The fire is very colorful as well!
          id: 34
          status: pending
          subject: The printer is on fire over here too
    LocaleDetectBestLanguageResponseExample:
      value:
        locale:
          created_at: 2010-12-23T12:45:22Z
          id: 1
          locale: en
          name: English
          updated_at: 2012-04-01T10:44:12Z
          url: https://company.zendesk.com/api/v2/locales/en-US.json
    LocaleResponseExample:
      value:
        locale:
          created_at: 2010-12-23T12:45:22Z
          id: 8
          locale: de
          name: Deutsch
          updated_at: 2012-04-01T10:44:12Z
          url: https://company.zendesk.com/api/v2/locales/de.json
    LocalesResponseExample:
      value:
        locales:
        - created_at: 2009-07-20T22:55:29Z
          id: 1
          locale: en-US
          name: English
          updated_at: 2011-05-05T10:38:52Z
          url: https://company.zendesk.com/api/v2/locales/en-US.json
        - created_at: 2010-12-23T12:45:22Z
          id: 8
          locale: de
          name: Deutsch
          updated_at: 2012-04-01T10:44:12Z
          url: https://company.zendesk.com/api/v2/locales/de.json
    MacroActionsResponseExample:
      value:
        actions:
        - group: ticket
          operators:
          - title: Is
            value: is
          output_key: null
          target: null
          title: Set subject
          title_for_field: Set subject
          value: subject
          values:
            list: []
            type: text
        - group: ticket
          operators:
          - title: Is
            value: is
          output_key: null
          target: null
          title: Status
          title_for_field: Set subject
          value: subject
          values:
            list:
            - enabled: true
              title: Open
              value: open
            - enabled: true
              title: Pending
              value: pending
            - enabled: true
              title: Solved
              value: solved
            type: list
        - field: priority
          group: ticket
          operators:
          - title: Is
            value: is
          output_key: null
          title: Priority
          title_for_field: Priority
          value: priority
          values:
            list:
            - enabled: false
              title: Low
              value: low
            - enabled: true
              title: Normal
              value: normal
            - enabled: true
              title: High
              value: high
            - enabled: false
              title: Urgent
              value: urgent
            type: list
    MacroAttachmentResponseExample:
      value:
        macro_attachment:
          content_type: image/jpeg
          content_url: https://company.zendesk.com/api/v2/macros/attachments/100/content
          created_at: 2016-08-15T16:04:06Z
          filename: foobar.jpg
          id: 100
          size: 2532
    MacroAttachmentsResponseExample:
      value:
        macro_attachments:
        - content_type: image/jpeg
          content_url: https://company.zendesk.com/api/v2/macros/attachments/100/content
          created_at: 2016-08-15T16:04:06Z
          filename: foobar.jpg
          id: 100
          size: 2532
        - content_type: image/jpeg
          content_url: https://company.zendesk.com/api/v2/macros/attachments/342/content
          created_at: 2016-08-16T12:42:25Z
          filename: bazbat.jpg
          id: 342
          size: 5028
    MacroCategoriesResponseExample:
      value:
        categories:
        - FAQ
        - Triage
    MacroChangesToTicketsResponseExample:
      value:
        result:
          ticket:
            assignee_id: 235323
            comment:
              body: Assigned to Agent Uno.
              public: false
              scoped_body:
              - - channel:all
                - Assigned to Agent Uno.
            fields:
              id: 27642
              value: "745"
            group_id: 98738
    MacroResponseExample:
      value:
        macro:
          actions: []
          active: true
          description: Sets the ticket status to `solved`
          id: 25
          position: 42
          restriction: {}
          title: Close and Save
    MacrosResponseExample:
      value:
        count: 2
        macros:
        - actions: []
          active: true
          description: Sets the ticket status to `solved`
          id: 25
          position: 42
          restriction: {}
          title: Close and Save
        - actions: []
          active: false
          description: Adds a `priority` tag to the ticket
          id: 26
          restriction: {}
          title: Assign priority tag
        next_page: null
        previous_page: null
    MergeEndUsersRequestExample:
      value:
        user:
          id: 1234
    MergeUserWithCurrentUserRequestExample:
      value:
        user:
          email: roge@example.org
          password: foo1234
    MergeUserWithCurrentUserResponseExample:
      value:
        user:
          id: 9873843
          name: Roger Wilco
    OrganizationFieldCreateResponseExample:
      value:
        organization_field:
          active: true
          created_at: 2013-02-27T20:35:55Z
          description: This field describes the support plan this organization has
          id: 75
          key: support_description
          position: 0
          raw_description: This field describes the support plan this organization
            has
          raw_title: Support description
          regexp_for_validation: null
          title: Support description
          type: text
          updated_at: 2013-02-27T20:35:55Z
          url: https://company.zendesk.com/api/v2/organization_fields/75.json
    OrganizationFieldResponseExample:
      value:
        organization_field:
          active: true
          created_at: 2012-10-16T16:04:06Z
          description: Description of Custom Field
          id: 7
          key: custom_field_1
          position: 9999
          raw_description: "{{dc.my_description}}"
          raw_title: Custom Field 1
          regexp_for_validation: null
          title: Custom Field 1
          type: text
          updated_at: 2012-10-16T16:04:06Z
          url: https://company.zendesk.com/api/v2/organization_fields/7.json
    OrganizationFieldUpdateResponseExample:
      value:
        organization_field:
          active: true
          created_at: 2013-02-27T20:35:55Z
          description: This field describes the support plan this organization has
          id: 75
          key: support_description
          position: 0
          raw_description: This field describes the support plan this organization
            has
          raw_title: Support description
          regexp_for_validation: null
          title: Support description
          type: text
          updated_at: 2013-02-27T20:35:55Z
          url: https://company.zendesk.com/api/v2/organization_fields/75.json
    OrganizationFieldsResponseExample:
      value:
        count: 1
        next_page: null
        organization_fields:
        - active: true
          created_at: 2012-10-16T16:04:06Z
          description: Description of Custom Field
          id: 7
          key: custom_field_1
          position: 9999
          raw_description: "{{dc.my_description}}"
          raw_title: Custom Field 1
          regexp_for_validation: null
          title: Custom Field 1
          type: text
          updated_at: 2012-10-16T16:04:06Z
          url: https://company.zendesk.com/api/v2/organization_fields/7.json
        previous_page: null
    OrganizationMembershipCreateManyResponseExample:
      value:
        job_status:
          id: 8b726e606741012ffc2d782bcb7848fe
          message: Completed at Fri Apr 13 02:51:53 +0000 2012
          progress: 2
          results:
          - action: create
            id: 380
            status: Created
            success: true
          status: completed
          total: 2
          url: https://company.zendesk.com/api/v2/job_statuses/8b726e606741012ffc2d782bcb7848fe.json
    OrganizationMembershipCreateResponseExample:
      value:
        organization_membership:
          created_at: 2012-04-03T12:34:01Z
          default: true
          id: 461
          organization_id: 88
          updated_at: 2012-04-03T12:34:01Z
          user_id: 72
    OrganizationMembershipResponseExample:
      value:
        organization_membership:
          created_at: 2009-05-13T00:07:08Z
          default: true
          id: 4
          organization_id: 12
          updated_at: 2011-07-22T00:11:12Z
          user_id: 29
    OrganizationMembershipsResponseExample:
      value:
        organization_memberships:
        - created_at: 2009-05-13T00:07:08Z
          default: true
          id: 4
          organization_id: 12
          organization_name: first organization
          updated_at: 2011-07-22T00:11:12Z
          user_id: 29
          view_tickets: true
        - created_at: 2012-03-13T22:01:32Z
          default: null
          id: 49
          organization_id: 3
          organization_name: second organization
          updated_at: 2012-03-13T22:01:32Z
          user_id: 155
          view_tickets: true
    OrganizationResponseExample:
      value:
        organization:
          created_at: 2018-11-14T00:14:52Z
          details: caterpillar =)
          domain_names:
          - remain.com
          external_id: null
          group_id: 1835962
          id: 4112492
          name: Groablet Enterprises
          notes: donkey
          organization_fields:
            datepudding: 2018-11-04T00:00:00+00:00
            org_field_1: happy happy
            org_field_2: teapot_kettle
          shared_comments: false
          shared_tickets: false
          tags:
          - smiley
          - teapot_kettle
          updated_at: 2018-11-14T00:54:22Z
          url: https://example.zendesk.com/api/v2/organizations/4112492.json
    OrganizationSubscriptionCreateRequestExample:
      value:
        organization_subscription:
          organization_id: 32
          user_id: 482
    OrganizationSubscriptionResponseExample:
      value:
        organization_subscription:
          created_at: 2009-07-20T22:55:29Z
          id: 1234
          organization_id: 32
          user_id: 482
    OrganizationSubscriptionsResponseExample:
      value:
        organization_subscriptions:
        - created_at: 2009-07-20T22:55:29Z
          id: 1234
          organization_id: 32
          user_id: 482
        - created_at: 2011-08-22T21:12:09Z
          id: 43681
          organization_id: 334
          user_id: 49471
    OrganizationsRelatedResponse:
      value:
        organization_related:
          tickets_count: 12
          users_count: 4
    OrganizationsResponseExample:
      value:
        count: 2
        next_page: null
        organizations:
        - created_at: 2018-11-14T00:14:52Z
          details: caterpillar =)
          domain_names:
          - remain.com
          external_id: ABC198
          group_id: 1835962
          id: 4112492
          name: Groablet Enterprises
          notes: donkey
          organization_fields:
            datepudding: 2018-11-04T00:00:00+00:00
            org_field_1: happy happy
            org_field_2: teapot_kettle
          shared_comments: false
          shared_tickets: false
          tags:
          - smiley
          - teapot_kettle
          updated_at: 2018-11-14T00:54:22Z
          url: https://example.zendesk.com/api/v2/organizations/4112492.json
        - created_at: 2017-08-14T20:13:52Z
          details: test
          domain_names:
          - test.com
          external_id: TTV273
          group_id: null
          id: 1873
          name: Willy Wonkas Chocolate Factory
          notes: ""
          organization_fields:
            datepudding: 2018-11-02T00:00:00+00:00
            org_field_1: malarky
            org_field_2: teapot_kettle
          shared_comments: false
          shared_tickets: false
          tags:
          - teapot_kettle
          updated_at: 2019-05-16T01:27:46Z
          url: https://example.zendesk.com.com/api/v2/organizations/1873.json
        previous_page: null
    PermanentlyDeleteTicketJobStatusResponseExample:
      value:
        job_status:
          id: 82de0b044094f0c67893ac9fe64f1a99
          message: null
          progress: null
          results: null
          status: queued
          total: null
          url: https://example.zendesk.com/api/v2/job_statuses/82de0b0467893ac9fe64f1a99.json
    PushNotificationDevicesRequestExample:
      value:
        push_notification_devices:
        - token1
        - token2
    QueueCreateResponseExample:
      value:
        queue:
          created_at: 2023-11-27T09:03:59Z
          definition:
            all:
            - field: priority
              operator: is
              value: urgent
            any: []
          description: Queue description
          id: 01HG80ATNNZK1N7XRFVKX48XD6
          name: New queue with valid definition
          order: 1
          primary_groups:
            count: 2
            groups:
            - id: 6784729637757
              name: EW
            - id: 5399674286077
              name: test
          priority: 1
          secondary_groups:
            count: 0
            groups: []
          updated_at: 2023-11-27T09:03:59Z
          url: https://company.zendesk.com/api/v2/queues/01HG80ATNNZK1N7XRFVKX48XD6.json
    QueueResponseExample:
      value:
        queue:
          created_at: 2023-11-27T09:03:59Z
          definition:
            all:
            - field: priority
              operator: is
              value: urgent
            any: []
          description: Queue description
          id: 01HG80ATNNZK1N7XRFVKX48XD6
          name: New queue with valid definition
          order: 1
          primary_groups:
            count: 2
            groups:
            - id: 6784729637757
              name: EW
            - id: 5399674286077
              name: test
          priority: 1
          secondary_groups:
            count: 0
            groups: []
          updated_at: 2023-11-27T09:03:59Z
          url: https://company.zendesk.com/api/v2/queues/01HG80ATNNZK1N7XRFVKX48XD6.json
    QueuesResponseExample:
      value:
        queues:
        - created_at: 2023-11-27T09:03:59Z
          definition:
            all:
            - field: priority
              operator: is
              value: urgent
            any: []
          description: Queue description
          id: 01HG80ATNNZK1N7XRFVKX48XD6
          name: New queue with valid definition
          order: 1
          primary_groups:
            count: 2
            groups:
            - id: 6784729637757
              name: EW
            - id: 5399674286077
              name: test
          priority: 1
          secondary_groups:
            count: 0
            groups: []
          updated_at: 2023-11-27T09:03:59Z
          url: https://company.zendesk.com/api/v2/queues/01HG80ATNNZK1N7XRFVKX48XD6.json
    QueuesUpdateResponseExample:
      value:
        queue:
          created_at: 2023-11-27T09:03:59Z
          definition:
            all:
            - field: priority
              operator: is
              value: urgent
            any: []
          description: Queue description
          id: 01HG80ATNNZK1N7XRFVKX48XD6
          name: New queue with valid definition
          order: 1
          primary_groups:
            count: 2
            groups:
            - id: 6784729637757
              name: EW
            - id: 5399674286077
              name: test
          priority: 1
          secondary_groups:
            count: 0
            groups: []
          updated_at: 2023-11-27T09:03:59Z
          url: https://company.zendesk.com/api/v2/queues/01HG80ATNNZK1N7XRFVKX48XD6.json
    RecoverSuspendedTicketResponseExample:
      value:
        ticket:
        - author:
            email: spammer@example.com
            id: 66
            name: Spammer
          brand_id: 123
          cause: Detected as spam
          cause_id: 0
          content: Visit http://casino.spam.com
          created_at: 2009-07-20T22:55:29Z
          id: 3436
          recipient: support@example.support.com
          subject: Free Casino Money!
          ticket_id: 67321
          updated_at: 2011-05-05T10:38:52Z
          url: https://example.zendesk.com/api/v2/tickets/67321.json
          via:
            channel: web
    RecoverSuspendedTicketUnprocessableContentResponseExample:
      value:
        ticket:
        - author:
            email: help@example.com
            id: 1
            name: Help
          brand_id: 123
          cause: Received from support address
          cause_id: 22
          content: Your request has been received and is being reviewed by our support
            staff.
          created_at: 2023-04-06T20:51:31Z
          error_messages: null
          id: 14668816692628
          message_id: <message-id@mail.gmail.com>
          recipient: support@example.support.com
          subject: Received from support address
          ticket_id: 14668816692628
          updated_at: 2023-04-06T20:51:31Z
          url: https://example.zendesk.com/api/v2/tickets/14668816692628.json
          via:
            channel: email
            source:
              from:
                address: "help@example.com,"
                name: Help
              rel: null
              to:
                address: support@example.zendesk.com
                name: "Support,"
    RecoverSuspendedTicketsResponseExample:
      value:
        tickets:
        - author:
            email: styx@example.com
            id: 1
            name: Mr. Roboto
          brand_id: 123
          cause: Detected as spam
          content: Out Of Office Reply
          created_at: 2009-07-20T22:55:29Z
          id: 3436
          recipient: john@example.com
          subject: Help I need somebody!
          ticket_id: 67321
          updated_at: 2011-05-05T10:38:52Z
          url: https://example.zendesk.com/api/v2/tickets/35436.json
          via:
            channel: web
        - author:
            email: styx@example.com
            id: 1
            name: Mr. Roboto
          brand_id: 123
          cause: Detected as spam
          content: Out Of Office Reply
          created_at: 2009-07-20T22:55:29Z
          id: 3437
          recipient: john@example.com
          subject: Not just anybody!
          ticket_id: 67321
          updated_at: 2011-05-05T10:38:52Z
          url: https://example.zendesk.com/api/v2/tickets/35436.json
          via:
            channel: web
    RelationshipFilterDefinitionExample:
      value:
        definitions:
          conditions_all:
          - group: ticket
            nullable: false
            operators:
            - terminal: false
              title: Is
              value: is
            - terminal: false
              title: Is not
              value: is_not
            - terminal: false
              title: Less than
              value: less_than
            - terminal: false
              title: Greater than
              value: greater_than
            - terminal: true
              title: Changed
              value: changed
            - terminal: false
              title: Changed to
              value: value
            - terminal: false
              title: Changed from
              value: value_previous
            - terminal: true
              title: Not changed
              value: not_changed
            - terminal: false
              title: Not changed to
              value: not_value
            - terminal: false
              title: Not changed from
              value: not_value_previous
            repeatable: false
            subject: status
            title: Status
            type: list
            values:
            - enabled: true
              title: New
              value: new
            - enabled: true
              title: Open
              value: open
            - enabled: true
              title: Pending
              value: pending
            - enabled: true
              title: Solved
              value: solved
            - enabled: true
              title: Closed
              value: closed
          conditions_any:
          - group: ticket
            nullable: true
            operators:
            - terminal: true
              title: Present
              value: present
            - terminal: true
              title: Not present
              value: not_present
            repeatable: false
            subject: custom_fields_20513432
            title: Happy Gilmore
            type: list
          - group: ticket
            nullable: true
            operators:
            - terminal: true
              title: Present
              value: present
            - terminal: true
              title: Not present
              value: not_present
            repeatable: false
            subject: custom_fields_86492341
            title: total_time_field
            type: list
    RenewSessionResponseExample:
      value:
        authenticity_token: huU19Z76zNC9Yvt+i9p7MviIOlOIg/JWqEdf6nGmnu9JInV04fksCIdtNDvoYAoV
    RequestCreateResponseExample:
      value:
        request:
          custom_status_id: 1
          description: My printer is on fire!
          id: 33
          status: new
          subject: Help!
    RequestGetCommentResponseExample:
      value:
        comment:
          body: Thanks!
          id: 43
    RequestListCommentsResponseExample:
      value:
        comments:
        - body: Thanks for your help
          id: 43
    RequestResponseExample:
      value:
        request:
          custom_status_id: 123
          description: My printer is on fire!
          id: 33
          status: open
          subject: Help!
    RequestUserCreateRequestExample:
      value:
        user:
          email: roge@example.org
          name: Roger Wilco
    RequestsResponseExample:
      value:
        requests:
        - custom_status_id: 123
          description: My printer is on fire!
          id: 33
          status: open
          subject: Help!
        - custom_status_id: 234
          description: I can't find my keys
          id: 34
          status: closed
          subject: Help!
    ResourceCollectionCreateResponseExample:
      value:
        job_status:
          id: 0a3e49b038c40133d7380242ac110031
          message: null
          progress: null
          results: null
          status: queued
          total: null
          url: https://company.zendesk.com/api/v2/job_statuses/0a3e49b038c40133d7380242ac110031.json
    ResourceCollectionDeleteResponseExample:
      value:
        job_status:
          id: 2ee570d0398e0133e26e0242ac110017
          message: null
          progress: null
          results: null
          status: queued
          total: null
          url: https://company.zendesk.com/api/v2/job_statuses/2ee570d0398e0133e26e0242ac110017.json
    ResourceCollectionResponseExample:
      value:
        resource_collection:
          created_at: 2015-09-09T01:57:24Z
          id: 10002
          resources:
          - deleted: false
            identifier: email_on_ticket_solved
            resource_id: 10824486485524
            type: triggers
          - deleted: false
            identifier: support_description
            resource_id: 10824486482580
            type: ticket_fields
          updated_at: 2015-09-09T01:57:24Z
    ResourceCollectionUpdateResponseExample:
      value:
        job_status:
          id: 4555831038d20133d7390242ac110031
          message: null
          progress: null
          results: null
          status: queued
          total: null
          url: https://company.zendesk.com/api/v2/job_statuses/4555831038d20133d7390242ac110031.json
    ResourceCollectionsResponseExample:
      value:
        count: 0
        next_page: null
        previous_page: null
        resource_collections:
        - created_at: 2015-09-09T01:57:24Z
          id: 10002
          resources:
          - deleted: false
            identifier: email_on_ticket_solved
            resource_id: 10824486485524
            type: triggers
          - deleted: false
            identifier: support_description
            resource_id: 10824486482580
            type: ticket_fields
          updated_at: 2015-09-09T01:57:24Z
        - created_at: 2015-09-10T02:01:03Z
          id: 10002
          resources:
          - deleted: false
            identifier: an_email_target
            resource_id: 10827267902996
            type: targets
          updated_at: 2015-09-10T02:02:15Z
    ReverseLookupUsersResponseExample:
      value:
        users:
        - id: 223443
          name: Johnny Agent
        - id: 8678530
          name: James A. Rosen
    SLAPoliciesResponseExample:
      value:
        count: 1
        next_page: null
        previous_page: null
        sla_policies:
        - description: "For urgent incidents, we will respond to tickets in 10 minutes"
          filter:
            all:
            - field: type
              operator: is
              value: incident
            - field: via_id
              operator: is
              value: "4"
            any: []
          id: 36
          policy_metrics:
          - business_hours: false
            metric: first_reply_time
            priority: low
            target: 60
          position: 3
          title: Incidents
          url: "https://{subdomain}.zendesk.com/api/v2/slas/policies/36.json"
    SLAPolicyCreateResponse:
      value:
        sla_policy:
          description: "For urgent incidents, we will respond to tickets in 10 minutes"
          filter:
            all:
            - field: type
              operator: is
              value: incident
            any: []
          id: 36
          policy_metrics:
          - business_hours: false
            metric: first_reply_time
            priority: normal
            target: 30
          - business_hours: false
            metric: first_reply_time
            priority: urgent
            target: 10
          - business_hours: false
            metric: requester_wait_time
            priority: low
            target: 180
          - business_hours: false
            metric: requester_wait_time
            priority: normal
            target: 160
          - business_hours: false
            metric: requester_wait_time
            priority: high
            target: 140
          - business_hours: false
            metric: requester_wait_time
            priority: urgent
            target: 120
          position: 3
          title: Incidents
          url: "https://{subdomain}.zendesk.com/api/v2/slas/policies/36.json"
    SLAPolicyFilterDefinitionResponseExample:
      value:
        definitions:
          all:
          - group: ticket
            operators:
            - title: Is
              value: is
            - title: Is not
              value: is_not
            target: null
            title: Brand
            value: brand_id
            values:
              list:
              - title: Support
                value: "10001"
              type: list
          any:
          - group: ticket
            operators:
            - title: Is
              value: is
            - title: Is not
              value: is_not
            target: null
            title: Brand
            value: brand_id
            values:
              list:
              - title: Support
                value: "10001"
              type: list
    SLAPolicyResponseExample:
      value:
        sla_policy:
          description: "For urgent incidents, we will respond to tickets in 10 minutes"
          filter:
            all:
            - field: type
              operator: is
              value: incident
            - field: via_id
              operator: is
              value: "4"
            any: []
          id: 36
          policy_metrics:
          - business_hours: false
            metric: first_reply_time
            priority: low
            target: 60
          position: 3
          title: Incidents
          url: "https://{subdomain}.zendesk.com/api/v2/slas/policies/36.json"
    SLAPolicyUpdateResponse:
      value:
        sla_policy:
          description: "For urgent incidents, we will resolve the ticket within 2\
            \ hours"
          filter:
            all:
            - field: type
              operator: is
              value: incident
            any: []
          id: 36
          policy_metrics:
          - business_hours: false
            metric: first_reply_time
            priority: normal
            target: 30
          - business_hours: false
            metric: first_reply_time
            priority: urgent
            target: 10
          - business_hours: false
            metric: requester_wait_time
            priority: low
            target: 180
          - business_hours: false
            metric: requester_wait_time
            priority: normal
            target: 160
          - business_hours: false
            metric: requester_wait_time
            priority: high
            target: 140
          - business_hours: false
            metric: requester_wait_time
            priority: urgent
            target: 120
          position: 3
          title: Urgent Incidents
          url: "https://{subdomain}.zendesk.com/api/v2/slas/policies/36.json"
    SatisfactionRatingResponseExample:
      value:
        satisfaction_rating:
        - assignee_id: 135
          comment: Awesome support!
          created_at: 2011-07-20T22:55:29Z
          group_id: 44
          id: 35436
          requester_id: 7881
          score: good
          ticket_id: 208
          updated_at: 2011-07-20T22:55:29Z
          url: https://example.zendesk.com/api/v2/satisfaction_ratings/35436.json
    SatisfactionRatingsCountResponseExample:
      value:
        count:
          refreshed_at: 2020-04-06T02:18:17Z
          value: 102
    SatisfactionRatingsResponseExample:
      value:
        satisfaction_ratings:
        - assignee_id: 135
          comment: Awesome support!
          created_at: 2011-07-20T22:55:29Z
          group_id: 44
          id: 35436
          requester_id: 7881
          score: good
          ticket_id: 208
          updated_at: 2011-07-20T22:55:29Z
          url: https://example.zendesk.com/api/v2/satisfaction_ratings/35436.json
        - assignee_id: 136
          comment: Awesome support!
          created_at: 2012-02-01T04:31:29Z
          group_id: 44
          id: 120447
          requester_id: 7881
          score: good
          ticket_id: 209
          updated_at: 2012-02-02T10:32:59Z
          url: https://example.zendesk.com/api/v2/satisfaction_ratings/120447.json
    SatisfactionReasonResponseExample:
      value:
        reason:
        - created_at: 2011-07-20T22:55:29Z
          id: 35121
          raw_value: "{{dc.reason_code_1000}}"
          reason_code: 1000
          updated_at: 2011-07-20T22:55:29Z
          url: https://company.zendesk.com/api/v2/satisfaction_reason/35121.json
          value: Agent did not respond quickly.
    SatisfactionReasonsResponseExample:
      value:
        reasons:
        - created_at: 2011-07-20T22:55:29Z
          id: 35436
          raw_value: "{{dc.reason_code_1000}}"
          reason_code: 1000
          updated_at: 2011-07-20T22:55:29Z
          url: https://company.zendesk.com/api/v2/satisfaction_reasons/35436.json
          value: Agent did not respond quickly.
        - created_at: 2011-07-20T22:55:29Z
          id: 120447
          raw_value: "{{dc.reason_code_1000}}"
          reason_code: 1001
          updated_at: 2011-07-20T22:55:29Z
          url: https://company.zendesk.com/api/v2/satisfaction_reasons/120447.json
          value: Issue is not resolved.
    SearchCountResponseExample:
      value:
        count: 6
    SearchExportResponseExample:
      value:
        facets: null
        links:
          next: https://example.zendesk.com/api/v2/search/export.json?filter%5Btype%5D=ticket&page%5Bafter%5D=eyJmaWVsZCI6ImNyZWF0ZWRfYXQiLCJkZXNjIjp0cnVlLCJ0aWVCcmVha0ZpZWxkIjoiaWQiLCJ0aWVCcmVha0Rlc2MiOmZhbHNlLCJzb3J0VmFsdWVzIjpudWxsLCJleHBvcnRlZFRodXNGYXIiOjAsInNlc3Npb25TdGFydCI6MTYwNzAzOTI1Mzk4NSwiY3JlYXRlZEF0IjoxNjA3MDM5MjUzOTg1LCJzYWx0ZWRSZXF1ZXN0SGFzaCI6LTQ5ODM0ODc3LCJzYWx0ZWRDdXJzb3JIYXNoIjotMjQwMzQ4MjgwfQ%3D%3D&page%5Bsize%5D=100&query=hello%26page%5Bsize%5D%3D100%26filter%5Btype%5D%3Dticket
          prev: null
        meta:
          after_cursor: eyJmaWVsZCI6ImNyZWF0ZWRfYXQiLCJkZXNjIjp0cnVlLCJ0aWVCcmVha0ZpZWxkIjoiaWQiLCJ0aWVCcmVha0Rlc2MiOmZhbHNlLCJzb3J0VmFsdWVzIjpudWxsLCJleHBvcnRlZFRodXNGYXIiOjAsInNlc3Npb25TdGFydCI6MTYwNzAzOTI1Mzk4NSwiY3JlYXRlZEF0IjoxNjA3MDM5MjUzOTg1LCJzYWx0ZWRSZXF1ZXN0SGFzaCI6LTQ5ODM0ODc3LCJzYWx0ZWRDdXJzb3JIYXNoIjotMjQwMzQ4MjgwfQ==
          before_cursor: null
          has_more: true
        results: []
    SearchResponseExample:
      value:
        count: 1234
        facets: null
        next_page: https://foo.zendesk.com/api/v2/search.json?query="type:Group hello"&sort_by=created_at&sort_order=desc&page=2
        previous_page: null
        results:
        - created_at: 2009-05-13T00:07:08Z
          id: 211
          name: Hello DJs
          result_type: group
          updated_at: 2011-07-22T00:11:12Z
          url: https://foo.zendesk.com/api/v2/groups/211.json
        - created_at: 2009-08-26T00:07:08Z
          id: 122
          name: Hello MCs
          result_type: group
          updated_at: 2010-05-13T00:07:08Z
          url: https://foo.zendesk.com/api/v2/groups/122.json
    SearchUsersResponseExample:
      value:
        users:
        - id: 35436
          name: Robert Jones
          notes: sigil issue
        - id: 9873843
          name: Terry Gilliam
    SessionResponseExample:
      value:
        session:
        - authenticated_at: 2014-11-18T17:24:29Z
          id: 3432
          last_seen_at: 2014-11-18T17:30:52Z
          url: https://company.zendesk.com/api/v2/users/12345/sessions/3432.json
          user_id: 12345
    SessionsResponseExample:
      value:
        sessions:
        - authenticated_at: 2014-11-18T17:24:29Z
          id: 3432
          last_seen_at: 2014-11-18T17:30:52Z
          url: https://company.zendesk.com/api/v2/users/12345/sessions/3432.json
          user_id: 12345
    SharingAgreementCreateResponseExample:
      value:
        sharing_agreement:
          created_at: 2012-02-20T22:55:29Z
          id: 1
          name: Foo @ Zendesk
          partner_name: null
          remote_subdomain: foo
          status: accepted
          type: inbound
          url: https://company.zendesk.com/api/v2/agreements/1.json
    SharingAgreementResponseExample:
      value:
        sharing_agreement:
          created_at: 2012-02-20T22:55:29Z
          id: 1
          name: Foo @ Zendesk
          partner_name: null
          remote_subdomain: foo
          status: accepted
          type: inbound
          url: https://company.zendesk.com/api/v2/agreements/1.json
    SharingAgreementUpdateResponseExample:
      value:
        sharing_agreement:
          created_at: 2012-02-20T22:55:29Z
          id: 1
          name: Foo @ Zendesk
          partner_name: null
          remote_subdomain: foo
          status: accepted
          type: inbound
          url: https://company.zendesk.com/api/v2/agreements/1.json
    SharingAgreementsResponseExample:
      value:
        sharing_agreements:
        - created_at: 2012-02-20T22:55:29Z
          id: 1
          name: Foo @ Zendesk
          partner_name: jira
          status: accepted
          type: inbound
          url: https://company.zendesk.com/api/v2/agreements/1.json
    ShowDerivedMacroResponseExample:
      value:
        definitions:
          actions:
          - group: ticket
            nullable: false
            repeatable: false
            subject: status
            title: Status
            type: list
            values:
            - enabled: true
              title: Open
              value: "1"
            - enabled: true
              title: Pending
              value: "2"
            - enabled: true
              title: Solved
              value: "3"
            - enabled: true
              title: Closed
              value: "4"
    ShowJobStatusResponseExample:
      value:
        job_status:
          id: 8b726e606741012ffc2d782bcb7848fe
          message: Completed at Fri Apr 13 02:51:53 +0000 2012
          progress: 2
          results:
          - action: update
            id: 380
            status: Updated
            success: true
          status: completed
          total: 2
          url: https://company.zendesk.com/api/v2/job_statuses/8b726e606741012ffc2d782bcb7848fe.json
    ShowManyUsersResponseExample:
      value:
        users:
        - id: 345678
          name: Johnny Appleseed
        - id: 901234
          name: Rupert Root
    SkillBasedRoutingAttributeCreateResponseExample:
      value:
        attribute:
          created_at: 2018-11-15T23:44:45Z
          id: 6e279587-e930-11e8-a292-09cfcdea1b75
          name: Language
          updated_at: 2018-11-15T23:44:45Z
          url: "https://{subdomain}.zendesk.com/api/v2/routing/attributes/6e279587-e930-11e8-a292-09cfcdea1b75.json"
    SkillBasedRoutingAttributeDefinitionsExample:
      value:
        definitions:
          conditions_all:
          - subject: number_of_incidents
            title: Number of incidents
          conditions_any:
          - subject: brand
            title: Brand
    SkillBasedRoutingAttributeResponseExample:
      value:
        attribute:
          created_at: 2018-11-15T23:44:45Z
          id: 6e279587-e930-11e8-a292-09cfcdea1b75
          name: Language
          updated_at: 2018-11-15T23:44:45Z
          url: "https://{subdomain}.zendesk.com/api/v2/routing/attributes/6e279587-e930-11e8-a292-09cfcdea1b75.json"
    SkillBasedRoutingAttributeUpdateResponseExample:
      value:
        attribute:
          created_at: 2018-11-15T23:44:45Z
          id: 6e279587-e930-11e8-a292-09cfcdea1b75
          name: Lingua
          updated_at: 2018-11-15T23:44:45Z
          url: "https://{subdomain}.zendesk.com/api/v2/routing/attributes/6e279587-e930-11e8-a292-09cfcdea1b75.json"
    SkillBasedRoutingAttributeValueCreateResponseExample:
      value:
        attribute_value:
          created_at: 2018-11-08T19:22:58Z
          id: 6ccddacf-e85e-11e8-a292-ad7686bdff67
          name: Japanese
          updated_at: 2018-11-08T19:22:58Z
          url: "https://{subdomain}.zendesk.com/api/v2/routing/attributes/afa31619-e38b-11e8-a292-5d17513d969b/values/6ccddacf-e85e-11e8-a292-ad7686bdff67.json"
    SkillBasedRoutingAttributeValueResponseExample:
      value:
        attribute_value:
          created_at: 2018-11-08T19:22:58Z
          id: b376b35a-e38b-11e8-a292-e3b6377c5575
          name: French
          updated_at: 2018-11-08T19:22:58Z
          url: "https://{subdomain}.zendesk.com/api/v2/routing/attributes/afa31619-e38b-11e8-a292-5d17513d969b/values/b376b35a-e38b-11e8-a292-e3b6377c5575.json"
    SkillBasedRoutingAttributeValueUpdateResponseExample:
      value:
        attribute_value:
          created_at: 2018-11-14T22:41:28Z
          id: b376b35a-e38b-11e8-a292-e3b6377c5575
          name: German (Advanced)
          updated_at: 2018-11-14T22:45:01Z
          url: "https://{subdomain}.zendesk.com/api/v2/routing/attributes/afa31619-e38b-11e8-a292-5d17513d969b/values/b376b35a-e38b-11e8-a292-e3b6377c5575.json"
    SkillBasedRoutingAttributeValuesResponseExample:
      value:
        attribute_values:
        - created_at: 2018-11-08T19:22:58Z
          id: b376b35a-e38b-11e8-a292-e3b6377c5575
          name: French
          updated_at: 2018-11-08T19:22:58Z
          url: "https://{subdomain}.zendesk.com/api/v2/routing/attributes/afa31619-e38b-11e8-a292-5d17513d969b/values/b376b35a-e38b-11e8-a292-e3b6377c5575.json"
    SkillBasedRoutingAttributesResponseExample:
      value:
        attributes:
        - created_at: 2017-12-01T19:29:31Z
          id: 15821cba-7326-11e8-b07e-950ba849aa27
          name: Color
          updated_at: 2017-12-01T19:29:31Z
        count: 1
        next_page: null
        previous_page: null
    SkillBasedRoutingTicketAttributesResponseExample:
      value:
        attribute_values:
        - attribute_id: f4a604b1-d6cd-11e7-a492-657e7928664c
          created_at: 2017-12-01T19:29:41Z
          id: fa1131e2-d6cd-11e7-a492-dbdd5500c7e3
          name: Ocean
          updated_at: 2017-12-01T19:35:45Z
    SkillBasedRoutingTicketFulfilledResponseExample:
      value:
        fulfilled_ticket_ids:
        - 1
        - 17
    SupportAddressCreateResponseExample:
      value:
        recipient_address:
          brand_id: 123
          cname_status: verified
          created_at: 2017-04-02T22:55:29Z
          default: false
          email: help@example.zendesk.com
          forwarding_status: waiting
          id: 33
          name: Sales
          spf_status: verified
          updated_at: 2017-04-02T22:55:29Z
    SupportAddressResponseExample:
      value:
        recipient_address:
          brand_id: 123
          cname_status: unknown
          created_at: 2017-04-02T22:55:29Z
          default: true
          email: help@example.zendesk.com
          forwarding_status: waiting
          id: 33
          name: Sales
          spf_status: unknown
          updated_at: 2017-04-02T22:55:29Z
    SupportAddressUpdateResponseExample:
      value:
        recipient_address:
          brand_id: 123
          created_at: 2017-04-02T22:55:29Z
          default: true
          email: name2@example.com
          forwarding_status: verified
          id: 33
          name: Sales
          updated_at: 2017-05-02T22:55:29Z
    SupportAddressesResponseExample:
      value:
        recipient_addresses:
        - brand_id: 123
          cname_status: verified
          created_at: 2015-07-20T22:55:29Z
          default: true
          domain_verification_status: verified
          email: sales@example.zendesk.com
          forwarding_status: unknown
          id: 33
          name: Sales
          spf_status: verified
          updated_at: 2016-09-21T20:15:20Z
        - brand_id: 123
          cname_status: verified
          created_at: 2015-07-20T22:55:29Z
          default: false
          domain_verification_status: verified
          email: marketing@example.zendesk.com
          forwarding_status: unknown
          id: 34
          name: Marketing
          spf_status: verified
          updated_at: 2016-09-21T20:15:20Z
    SuspendedTicketResponseExample:
      value:
        suspended_ticket:
        - author:
            email: styx@example.com
            id: 1
            name: Mr. Roboto
          brand_id: 123
          cause: Detected as spam
          content: Out Of Office Reply
          created_at: 2009-07-20T22:55:29Z
          id: 3436
          recipient: john@example.com
          subject: Help I need somebody!
          ticket_id: 67321
          updated_at: 2011-05-05T10:38:52Z
          url: https://example.zendesk.com/api/v2/tickets/35436.json
          via:
            channel: web
    SuspendedTicketsAttachmentsResponseExample:
      value:
        upload:
          attachments:
          - content_type: application/ics
            content_url: https://company.zendesk.com/attachments/token/tyBq1ms40dFaHefSIigxZpwGg/?name=calendar.ics
            file_name: calendar.ics
            id: 367
            size: 1166
            thumbnails: []
            url: https://company.zendesk.com/api/v2/attachments/367.json
          token: yrznqgjoa24iw2f
    SuspendedTicketsExportResponseExample:
      value:
        export:
          status: enqueued
          view_id: suspended
    SuspendedTicketsResponseExample:
      value:
        suspended_tickets:
        - attachments: []
          author:
            email: styx@example.com
            id: 1
            name: Mr. Roboto
          brand_id: 123
          cause: Detected as spam
          cause_id: 0
          content: Out Of Office Reply
          created_at: 2009-07-20T22:55:29Z
          error_messages: null
          id: 435
          message_id: Spambot@spam.co.evil
          recipient: john@example.com
          subject: "Help, my printer is on fire!"
          ticket_id: 67321
          updated_at: 2011-05-05T10:38:52Z
          url: https://example.zendesk.com/api/v2/tickets/35436.json
          via:
            channel: email
            source:
              from:
                address: totallylegit@emailaddress.com
                name: TotallyLegit
              rel: null
              to:
                address: support@example.zendesk.com
                name: Example Account
        - attachments: []
          author:
            email: styx@example.com
            id: 1
            name: Mr. Roboto
          brand_id: 123
          cause: Automated response mail
          cause_id: 0
          content: Out Of Office Reply
          created_at: 2009-07-20T22:55:29Z
          error_messages: null
          id: 207623
          message_id: Spambot@spam.co.evil
          recipient: john@example.com
          subject: Not just anybody!
          ticket_id: 67321
          updated_at: 2011-05-05T10:38:52Z
          url: https://example.zendesk.com/api/v2/tickets/35436.json
          via:
            channel: email
            source:
              from:
                address: totallylegit@emailaddress.com
                name: TotallyLegit
              rel: null
              to:
                address: support@example.zendesk.com
                name: Example Account
    TagCountResponseExample:
      value:
        count:
          refreshed_at: 2020-04-06T02:18:17Z
          value: 102
    TagsAutocompleteResponseExample:
      value:
        tags:
        - attention
        - attack
    TagsByObjectIdResponse:
      value:
        tags:
        - urgent
        - printer
        - fire
    TagsResponseExample:
      value:
        count: 1
        next_page: null
        previous_page: null
        tags:
        - count: 10
          name: Triage
    TargetCreateResponseExample:
      value:
        target:
          active: true
          created_at: 2009-05-13T00:07:08Z
          email: hello@example.com
          subject: Test Target
          title: Test Email Target
          type: email_target
    TargetFailureResponseExample:
      value:
        target_failure:
          id: 1
          raw_request: "GET /api/v2/tickets.json HTTP/1.1\r\nUser-Agent: Zendesk Target\r\
            \n ..."
          raw_response: "HTTP/1.1 401 Unauthorized\r\nServer: nginx\r\n ..."
          status_code: 401
          target_name: My URL Target
    TargetFailuresResponseExample:
      value:
        target_failures:
        - id: 1
          status_code: 401
          target_name: My URL Target
        - id: 2
          status_code: 401
          target_name: My URL Target
    TargetResponseExample:
      value:
        target:
          active: true
          created_at: 2009-05-13T00:07:08Z
          id: 211
          title: Fancy box
          type: basecamp_target
    TargetUpdateResponseExample:
      value:
        target:
          active: true
          created_at: 2009-05-13T00:07:08Z
          email: roger@example.com
          subject: Test Target
          title: Test Email Target
          type: email_target
    TargetsResponseExample:
      value:
        targets:
        - active: true
          created_at: 2009-05-13T00:07:08Z
          id: 211
          title: Fancy box
          type: basecamp_target
    TicketAuditResponseExample:
      value:
        audit:
          author_id: 5246746
          created_at: 2011-09-25T22:35:44Z
          events:
          - attachments: []
            body: This is a new private comment
            html_body: <p>This is a new private comment</p>
            id: 2127301148
            public: false
            type: Comment
          - field_name: status
            id: 2127301163
            previous_value: new
            type: Change
            value: open
            via:
              channel: rule
              source:
                from:
                  id: 22472716
                  title: Assign to first responder
                rel: trigger
                to: {}
          - field_name: custom_status_id
            id: 2127301164
            previous_value: 1
            type: Change
            value: 123
            via:
              channel: rule
              source:
                from:
                  id: 22472716
                  title: Assign to first responder
                rel: trigger
                to: {}
          id: 2127301143
          metadata:
            custom: {}
            system:
              client: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.1\
                \ (KHTML, like Gecko) Chrome/14.0.835.186 Safari/535.1"
              ip_address: 76.218.201.212
              location: "San Francisco, CA, United States"
          ticket_id: 666
          via:
            channel: web
    TicketAuditsCountResponseExample:
      value:
        count:
          refreshed_at: 2020-04-06T02:18:17Z
          value: 18
    TicketAuditsForTicketResponseExample:
      value:
        audits:
        - author_id: 5246746
          created_at: 2011-09-25T22:35:44Z
          events:
          - attachments: []
            body: This is a new private comment
            html_body: <p>This is a new private comment</p>
            id: 2127301148
            public: false
            type: Comment
          - field_name: status
            id: 2127301163
            previous_value: new
            type: Change
            value: open
            via:
              channel: rule
              source:
                from:
                  id: 35079792
                  title: Assign to first responder
                rel: trigger
                to: {}
          - field_name: custom_status_id
            id: 2127301164
            previous_value: 1
            type: Change
            value: 123
            via:
              channel: rule
              source:
                from:
                  id: 22472716
                  title: Assign to first responder
                rel: trigger
                to: {}
          id: 2127301143
          metadata:
            custom: {}
            system:
              client: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.1\
                \ (KHTML, like Gecko) Chrome/14.0.835.186 Safari/535.1"
              ip_address: 76.218.201.212
              location: "San Francisco, CA, United States"
          ticket_id: 666
          via:
            channel: web
        count: 1
        next_page: null
        previous_page: null
    TicketAuditsResponseExample:
      value:
        after_cursor: MTUwMTYwNzUyMi4wfHwxMzQ3NTMxNjcxfA==
        after_url: https://subdomain.zendesk.com/api/v2/ticket_audits.json?cursor=MTUwMTYwNzUyMi4wfHwxMzQ3NTMxNjcxfA%3D%3D&limit=1000
        audits:
        - author_id: 35436
          created_at: 2011-09-25T22:35:44Z
          events:
          - attachments: []
            body: Thanks for your help!
            id: 1564245
            public: true
            type: Comment
          - body: "Ticket #47 has been updated"
            id: 1564246
            subject: Your ticket has been updated
            type: Notification
          - field_name: status
            id: 1564247
            previous_value: new
            type: Change
            value: open
          - field_name: custom_status_id
            id: 1564248
            previous_value: 1
            type: Change
            value: 123
          id: 2127301143
          metadata:
            custom:
              time_spent: 3m22s
            system:
              ip_address: 184.106.40.75
          ticket_id: 123
          via:
            channel: web
        before_cursor: fDE1MDE1NzUxMjIuMHx8MTM0NzM0MzAxMQ==
        before_url: https://subdomain.zendesk.com/api/v2/ticket_audits.json?cursor=fDE1MDE1NzUxMjIuMHx8MTM0NzM0MzAxMQ%3D%3D&limit=1000
    TicketBulkImportRequestExample:
      value:
        tickets:
        - assignee_id: 19
          comments:
          - author_id: 827
            created_at: 2009-06-25T10:15:18Z
            value: This is a comment
          - author_id: 19
            public: false
            value: This is a private comment
          description: A description
          requester_id: 827
          subject: Help
          tags:
          - foo
          - bar
        - assignee_id: 21
          comments:
          - author_id: 830
            created_at: 2009-06-25T10:15:18Z
            value: This is a comment
          - author_id: 21
            public: false
            value: This is a private comment
          description: A description
          requester_id: 830
          subject: Missing Item
          tags:
          - foo
          - bar
    TicketChatCommentAttachmentRedactionResponseExample:
      value:
        chat_event:
          id: 1932802680168
          type: ChatStartedEvent
          value:
            chat_id: 2109.10502823.Sjuj2YrBpXwei
            history:
            - chat_index: 0
              filename: redacted.txt
              type: ChatFileAttachment
            - chat_index: 1
              filename: redacted.txt
              type: ChatFileAttachment
            visitor_id: 10502823-16EkM3T6VNq7KMd
    TicketChatCommentRedactionResponseExample:
      value:
        chat_event:
          id: 1932802680168
          type: ChatStartedEvent
          value:
            chat_id: 2109.10502823.Sjuj2YrBpXwei
            history:
            - chat_index: 0
              message: My ID number is ▇▇▇▇!
              type: ChatMessage
            visitor_id: 10502823-16EkM3T6VNq7KMd
    TicketCommentStringRedactResponseExample:
      value:
        comment:
          author_id: 1
          id: 35436
          plain_body: My social security number is ▇▇▇▇!
          type: Comment
    TicketCommentsCountResponseExample:
      value:
        count:
          refreshed_at: 2020-04-06T02:18:17Z
          value: 12
    TicketCommentsRedactionInAgentWorkspaceResponseExample:
      value:
        comment:
          attachments: []
          author_id: 123
          id: 100
          plain_body: My ID number is ▇▇▇▇!
          public: true
          type: Comment
    TicketCommentsResponseExample:
      value:
        comments:
        - attachments:
          - content_type: text/plain
            content_url: https://company.zendesk.com/attachments/crash.log
            file_name: crash.log
            id: 498483
            size: 2532
            thumbnails: []
          audit_id: 432567
          author_id: 123123
          body: Thanks for your help!
          created_at: 2009-07-20T22:55:29Z
          id: 1274
          metadata:
            system:
              client: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36\
                \ (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36"
              ip_address: 1.1.1.1
              latitude: -37.000000000001
              location: "Melbourne, 07, Australia"
              longitude: 144.0000000000002
            via:
              channel: web
              source:
                from: {}
                rel: web_widget
                to: {}
          public: true
          type: Comment
    TicketCreateRequestExample:
      value:
        ticket:
          comment:
            body: The smoke is very colorful.
          priority: urgent
          subject: My printer is on fire!
    TicketCreateTicketViaTalkRequestExample:
      value:
        display_to_agent: 1234
        ticket:
          comment:
            body: My printer is on fire!
          priority: urgent
          via_id: 46
          voice_comment:
            answered_by_id: 28
            call_duration: 40
            from: "+16617480240"
            location: "Dublin, Ireland"
            recording_url: http://yourdomain.com/recordings/1.mp3
            started_at: 2019-04-16T09:14:57Z
            to: "+16617480123"
            transcription_text: The transcription of the call
    TicketFieldCountResponseExample:
      value:
        count:
          refreshed_at: 2020-04-06T02:18:17Z
          value: 102
    TicketFieldResponseExample:
      value:
        ticket_field:
          active: true
          agent_description: Agent only description
          collapsed_for_agents: false
          created_at: 2012-04-02T22:55:29Z
          description: Age
          editable_in_portal: false
          id: 89
          position: 9999
          raw_description: Age
          raw_title: Age
          raw_title_in_portal: Age
          regexp_for_validation: null
          required: true
          required_in_portal: false
          tag: null
          title: Age
          title_in_portal: Age
          type: text
          updated_at: 2012-04-02T22:55:29Z
          url: https://company.zendesk.com/api/v2/ticket_fields/89.json
          visible_in_portal: false
    TicketFieldUpdateResponseExample:
      value:
        ticket_field:
          active: true
          agent_description: Agent only description
          collapsed_for_agents: false
          created_at: 2012-04-02T22:55:29Z
          description: Your age
          editable_in_portal: false
          id: 89
          position: 9999
          raw_description: Your age
          raw_title: Your age
          raw_title_in_portal: Your age
          regexp_for_validation: null
          required: true
          required_in_portal: false
          tag: null
          title: Your age
          title_in_portal: Your age
          type: text
          updated_at: 2012-04-02T23:11:23Z
          url: https://company.zendesk.com/api/v2/ticket_fields/89.json
          visible_in_portal: false
    TicketFieldsResponseExample:
      value:
        ticket_fields:
        - active: true
          agent_description: Agent only description
          collapsed_for_agents: false
          created_at: 2009-07-20T22:55:29Z
          description: This is the subject field of a ticket
          editable_in_portal: true
          id: 34
          position: 21
          raw_description: This is the subject field of a ticket
          raw_title: "{{dc.my_title}}"
          raw_title_in_portal: "{{dc.my_title_in_portal}}"
          regexp_for_validation: null
          required: true
          required_in_portal: true
          tag: null
          title: Subject
          title_in_portal: Subject
          type: subject
          updated_at: 2011-05-05T10:38:52Z
          url: https://company.zendesk.com/api/v2/ticket_fields/34.json
          visible_in_portal: true
    TicketFormCreateResponseExample:
      value:
        ticket_form:
          active: true
          agent_conditions:
          - child_fields:
            - id: 44
              is_required: false
              required_on_statuses:
                statuses:
                - new
                - open
                - pending
                - hold
                type: SOME_STATUSES
            - id: 32
              is_required: true
              required_on_statuses:
                statuses:
                - solved
                type: SOME_STATUSES
            parent_field_id: 5
            value: matching_value_1
          - child_fields:
            - id: 44
              is_required: true
              required_on_statuses:
                type: ALL_STATUSES
            - id: 32
              is_required: false
              required_on_statuses:
                type: NO_STATUSES
            parent_field_id: 32
            value: matching_value_2
          created_at: 2012-04-02T22:55:29Z
          default: false
          display_name: Snowboard Damage
          end_user_conditions:
          - child_fields:
            - id: 32
              is_required: true
            parent_field_id: 5
            value: matching_value_1
          - child_fields:
            - id: 44
              is_required: false
            parent_field_id: 32
            value: matching_value_2
          end_user_visible: true
          id: 47
          in_all_brands: false
          name: Snowboard Problem
          position: 9999
          raw_display_name: Snowboard Damage
          raw_name: Snowboard Problem
          restricted_brand_ids:
          - 1
          - 4
          - 6
          - 12
          - 34
          ticket_field_ids:
          - 2
          - 4
          - 5
          - 32
          - 44
          updated_at: 2012-04-02T22:55:29Z
          url: https://company.zendesk.com/api/v2/ticket_forms/47.json
    TicketFormResponseExample:
      value:
        ticket_form:
          active: true
          agent_conditions:
          - child_fields:
            - id: 44
              is_required: false
              required_on_statuses:
                statuses:
                - new
                - open
                - pending
                - hold
                type: SOME_STATUSES
            - id: 32
              is_required: true
              required_on_statuses:
                statuses:
                - solved
                type: SOME_STATUSES
            parent_field_id: 5
            value: matching_value_1
          - child_fields:
            - id: 44
              is_required: true
              required_on_statuses:
                type: ALL_STATUSES
            - id: 32
              is_required: false
              required_on_statuses:
                type: NO_STATUSES
            parent_field_id: 32
            value: matching_value_2
          created_at: 2012-04-02T22:55:29Z
          default: true
          display_name: Snowboard Damage
          end_user_conditions:
          - child_fields:
            - id: 32
              is_required: true
            parent_field_id: 5
            value: matching_value_1
          - child_fields:
            - id: 44
              is_required: false
            parent_field_id: 32
            value: matching_value_2
          end_user_visible: true
          id: 47
          in_all_brands: false
          name: Snowboard Problem
          position: 9999
          raw_display_name: "{{dc.my_display_name}}"
          raw_name: Snowboard Problem
          restricted_brand_ids:
          - 1
          - 4
          - 6
          - 12
          - 34
          ticket_field_ids:
          - 2
          - 4
          - 5
          - 32
          - 44
          updated_at: 2012-04-02T22:55:29Z
          url: https://company.zendesk.com/api/v2/ticket_forms/47.json
    TicketFormUpdateResponseExample:
      value:
        ticket_form:
          active: true
          agent_conditions: []
          created_at: 2012-04-02T22:55:29Z
          default: true
          display_name: Snowboard has been fixed
          end_user_conditions: []
          end_user_visible: true
          id: 47
          in_all_brands: true
          name: Snowboard Fixed
          position: 9999
          raw_display_name: Snowboard has been fixed
          raw_name: Snowboard Fixed
          restricted_brand_ids: []
          ticket_field_ids:
          - 2
          - 4
          - 5
          - 32
          - 44
          updated_at: 2012-04-02T22:55:29Z
          url: https://company.zendesk.com/api/v2/ticket_forms/47.json
    TicketFormsResponseExample:
      value:
        ticket_forms:
        - active: true
          agent_conditions:
          - child_fields:
            - id: 44
              is_required: false
              required_on_statuses:
                statuses:
                - new
                - open
                - pending
                - hold
                type: SOME_STATUSES
            - id: 32
              is_required: true
              required_on_statuses:
                statuses:
                - solved
                type: SOME_STATUSES
            parent_field_id: 5
            value: matching_value_1
          - child_fields:
            - id: 44
              is_required: true
              required_on_statuses:
                type: ALL_STATUSES
            - id: 32
              is_required: false
              required_on_statuses:
                type: NO_STATUSES
            parent_field_id: 32
            value: matching_value_2
          created_at: 2012-04-02T22:55:29Z
          default: true
          display_name: Snowboard Damage
          end_user_conditions:
          - child_fields:
            - id: 32
              is_required: true
            parent_field_id: 5
            value: matching_value_1
          - child_fields:
            - id: 44
              is_required: false
            parent_field_id: 32
            value: matching_value_2
          end_user_visible: true
          id: 47
          in_all_brands: false
          name: Snowboard Problem
          position: 9999
          raw_display_name: "{{dc.my_display_name}}"
          raw_name: Snowboard Problem
          restricted_brand_ids:
          - 1
          - 4
          - 6
          - 12
          - 34
          ticket_field_ids:
          - 2
          - 4
          - 5
          - 32
          - 44
          updated_at: 2012-04-02T22:55:29Z
          url: https://company.zendesk.com/api/v2/ticket_forms/47.json
    TicketImportRequestExample:
      value:
        ticket:
          assignee_id: 19
          comments:
          - author_id: 827
            created_at: 2009-06-25T10:15:18Z
            value: This is a comment
          - author_id: 19
            public: false
            value: This is a private comment
          description: A description
          requester_id: 827
          subject: Help
          tags:
          - foo
          - bar
    TicketMergeInputExample:
      value:
        ids:
        - 123
        - 456
        - 789
        source_comment: "Closing in favor of #111"
        target_comment: "Combining with #123, #456, #789"
    TicketMetricEventsResponseExample:
      value:
        count: 3
        end_time: 1603716792
        next_page: https://company.zendesk.com/api/v2/incremental/ticket_metric_events.json?start_time=1603716792
        ticket_metric_events:
        - id: 926232157301
          instance_id: 0
          metric: agent_work_time
          ticket_id: 155
          time: 2020-10-26T12:53:12Z
          type: measure
        - id: 926232757371
          instance_id: 1
          metric: agent_work_time
          ticket_id: 155
          time: 2020-10-26T12:53:12Z
          type: activate
        - id: 926232927415
          instance_id: 0
          metric: pausable_update_time
          ticket_id: 155
          time: 2020-10-26T12:53:12Z
          type: measure
    TicketMetricResponseExample:
      value:
        ticket_metric:
        - agent_wait_time_in_minutes:
            business: 0
            calendar: 0
          assigned_at: 2020-07-20T06:21:26Z
          assignee_stations: 0
          assignee_updated_at: 2020-07-20T06:21:26Z
          created_at: 2020-07-21T01:01:42Z
          first_resolution_time_in_minutes:
            business: 0
            calendar: 0
          full_resolution_time_in_minutes:
            business: 0
            calendar: 0
          group_stations: 0
          id: 33
          initially_assigned_at: 2020-07-20T06:21:26Z
          latest_comment_added_at: 2020-07-21T01:17:16Z
          on_hold_time_in_minutes:
            business: 0
            calendar: 0
          reopens: 0
          replies: 1
          reply_time_in_minutes:
            business: 16
            calendar: 16
          reply_time_in_seconds:
            calendar: 960
          requester_updated_at: 2020-07-21T01:17:16Z
          requester_wait_time_in_minutes:
            business: 0
            calendar: 0
          solved_at: 2020-07-20T06:21:26Z
          status_updated_at: 2020-07-21T01:01:41Z
          ticket_id: 1517
          updated_at: 2020-07-21T01:17:16Z
          url: https://example.zendesk.com/api/v2/ticket_metrics/33.json
    TicketMetricsResponseExample:
      value:
        ticket_metrics:
        - agent_wait_time_in_minutes:
            business: 0
            calendar: 0
          assigned_at: 2020-07-20T06:21:26Z
          assignee_stations: 0
          assignee_updated_at: 2020-07-20T06:21:26Z
          created_at: 2020-07-21T01:01:42Z
          first_resolution_time_in_minutes:
            business: 0
            calendar: 0
          full_resolution_time_in_minutes:
            business: 0
            calendar: 0
          group_stations: 0
          id: 33
          initially_assigned_at: 2020-07-20T06:21:26Z
          latest_comment_added_at: 2020-07-21T01:17:16Z
          on_hold_time_in_minutes:
            business: 0
            calendar: 0
          reopens: 0
          replies: 1
          reply_time_in_minutes:
            business: 16
            calendar: 16
          reply_time_in_seconds:
            calendar: 960
          requester_updated_at: 2020-07-21T01:17:16Z
          requester_wait_time_in_minutes:
            business: 0
            calendar: 0
          solved_at: 2020-07-20T06:21:26Z
          status_updated_at: 2020-07-21T01:01:41Z
          ticket_id: 1517
          updated_at: 2020-07-21T01:17:16Z
          url: https://example.zendesk.com/api/v2/ticket_metrics/33.json
        - agent_wait_time_in_minutes:
            business: 0
            calendar: 0
          assigned_at: 2020-07-20T06:21:26Z
          assignee_stations: 0
          assignee_updated_at: 2020-07-20T06:21:26Z
          created_at: 2020-07-20T06:21:27Z
          first_resolution_time_in_minutes:
            business: 0
            calendar: 0
          full_resolution_time_in_minutes:
            business: 0
            calendar: 0
          group_stations: 0
          id: 34
          initially_assigned_at: 2020-07-20T06:21:26Z
          latest_comment_added_at: 2020-07-20T06:21:26Z
          on_hold_time_in_minutes:
            business: 0
            calendar: 0
          reopens: 0
          replies: 0
          reply_time_in_minutes:
            business: 0
            calendar: 0
          reply_time_in_seconds:
            calendar: 0
          requester_updated_at: 2020-07-20T06:21:26Z
          requester_wait_time_in_minutes:
            business: 0
            calendar: 0
          solved_at: 2020-07-20T06:21:26Z
          status_updated_at: 2020-07-20T06:21:26Z
          ticket_id: 1511
          updated_at: 2020-07-20T06:21:27Z
          url: https://example.zendesk.com/api/v2/ticket_metrics/34.json
    TicketRelatedInformationExample:
      value:
        followup_source_ids: []
        from_archive: false
        incidents: 7
        topic_id: null
        twitter:
          direct: false
          handle_id: 10
          profile:
            created_at: 2013/01/08 23:24:49 -0800
            description: Zendesk is the leading ...
    TicketResponseExample:
      value:
        ticket:
          assignee_id: 235323
          collaborator_ids:
          - 35334
          - 234
          created_at: 2009-07-20T22:55:29Z
          custom_fields:
          - id: 27642
            value: "745"
          - id: 27648
            value: "yes"
          custom_status_id: 123
          description: The fire is very colorful.
          due_at: null
          external_id: ahg35h3jh
          follower_ids:
          - 35334
          - 234
          from_messaging_channel: false
          group_id: 98738
          has_incidents: false
          id: 35436
          organization_id: 509974
          priority: high
          problem_id: 9873764
          raw_subject: "{{dc.printer_on_fire}}"
          recipient: support@company.com
          requester_id: 20978392
          satisfaction_rating:
            comment: Great support!
            id: 1234
            score: good
          sharing_agreement_ids:
          - 84432
          status: open
          subject: "Help, my printer is on fire!"
          submitter_id: 76872
          tags:
          - enterprise
          - other_tag
          type: incident
          updated_at: 2011-05-05T10:38:52Z
          url: https://company.zendesk.com/api/v2/tickets/35436.json
          via:
            channel: web
    TicketSkipCreationExample:
      value:
        skip:
          created_at: 2015-09-30T21:44:03Z
          id: 1
          reason: I have no idea.
          ticket:
            assignee_id: 235323
            collaborator_ids:
            - 35334
            - 234
            created_at: 2009-07-20T22:55:29Z
            custom_fields:
            - id: 27642
              value: "745"
            - id: 27648
              value: "yes"
            description: The fire is very colorful.
            due_at: null
            external_id: ahg35h3jh
            follower_ids:
            - 35334
            - 234
            from_messaging_channel: false
            group_id: 98738
            has_incidents: false
            id: 123
            organization_id: 509974
            priority: high
            problem_id: 9873764
            raw_subject: "{{dc.printer_on_fire}}"
            recipient: support@company.com
            requester_id: 20978392
            satisfaction_rating:
              comment: Great support!
              id: 1234
              score: good
            sharing_agreement_ids:
            - 84432
            status: open
            subject: "Help, my printer is on fire!"
            submitter_id: 76872
            tags:
            - enterprise
            - other_tag
            type: incident
            updated_at: 2011-05-05T10:38:52Z
            url: https://company.zendesk.com/api/v2/tickets/35436.json
            via:
              channel: web
          ticket_id: 123
          updated_at: 2015-09-30T21:44:03Z
          user_id: 456
    TicketSkipResponseExample:
      value:
        skips:
        - created_at: 2015-09-30T21:44:03Z
          id: 1
          reason: I have no idea.
          ticket:
            assignee_id: 235323
            collaborator_ids:
            - 35334
            - 234
            created_at: 2009-07-20T22:55:29Z
            custom_fields:
            - id: 27642
              value: "745"
            - id: 27648
              value: "yes"
            description: The fire is very colorful.
            due_at: null
            external_id: ahg35h3jh
            follower_ids:
            - 35334
            - 234
            from_messaging_channel: false
            group_id: 98738
            has_incidents: false
            id: 123
            organization_id: 509974
            priority: high
            problem_id: 9873764
            raw_subject: "{{dc.printer_on_fire}}"
            recipient: support@company.com
            requester_id: 20978392
            satisfaction_rating:
              comment: Great support!
              id: 1234
              score: good
            sharing_agreement_ids:
            - 84432
            status: open
            subject: "Help, my printer is on fire!"
            submitter_id: 76872
            tags:
            - enterprise
            - other_tag
            type: incident
            updated_at: 2011-05-05T10:38:52Z
            url: https://company.zendesk.com/api/v2/tickets/35436.json
            via:
              channel: web
          ticket_id: 123
          updated_at: 2015-09-30T21:44:03Z
          user_id: 456
        - created_at: 2015-10-01T21:44:03Z
          id: 2
          reason: I am lost.
          ticket:
            assignee_id: 235323
            collaborator_ids:
            - 35334
            - 234
            created_at: 2009-07-20T22:55:29Z
            custom_fields:
            - id: 27642
              value: "745"
            - id: 27648
              value: "yes"
            description: The fire is very colorful.
            due_at: null
            external_id: ahg35h3jh
            follower_ids:
            - 35334
            - 234
            from_messaging_channel: false
            group_id: 98738
            has_incidents: false
            id: 321
            organization_id: 509974
            priority: high
            problem_id: 9873764
            raw_subject: "{{dc.printer_on_fire}}"
            recipient: support@company.com
            requester_id: 20978392
            satisfaction_rating:
              comment: Great support!
              id: 1234
              score: good
            sharing_agreement_ids:
            - 84432
            status: open
            subject: "Help, my printer is on fire!"
            submitter_id: 76872
            tags:
            - enterprise
            - other_tag
            type: incident
            updated_at: 2011-05-05T10:38:52Z
            url: https://company.zendesk.com/api/v2/tickets/35436.json
            via:
              channel: web
          ticket_id: 321
          updated_at: 2015-10-01T21:44:03Z
          user_id: 654
    TicketUpdateRequestExample:
      value:
        ticket:
          comment:
            body: Thanks for choosing Acme Jet Motors.
            public: true
          custom_status_id: 321
          status: solved
    TicketUpdateResponseExample:
      value:
        audit:
          events:
          - field_name: subject
            id: 206091192546
            type: Create
            value: My printer is on fire!
          - body: The smoke is very colorful.
            id: 206091192547
            type: Comment
          - field_name: status
            id: 206091192548
            type: Create
            value: open
          - field_name: custom_status_id
            id: 206091192549
            type: Create
            value: 123
        ticket:
          custom_status_id: 123
          id: 35436
          requester_id: 123453
          status: open
          subject: My printer is on fire!
    TicketsCreateRequestExample:
      value:
        tickets:
        - comment:
            body: The smoke is very colorful.
          priority: urgent
          subject: My printer is on fire!
        - comment:
            body: This is a comment
          priority: normal
          subject: Help
    TicketsResponseExample:
      value:
        tickets:
        - assignee_id: 235323
          collaborator_ids:
          - 35334
          - 234
          created_at: 2009-07-20T22:55:29Z
          custom_fields:
          - id: 27642
            value: "745"
          - id: 27648
            value: "yes"
          custom_status_id: 123
          description: The fire is very colorful.
          due_at: null
          external_id: ahg35h3jh
          follower_ids:
          - 35334
          - 234
          from_messaging_channel: false
          group_id: 98738
          has_incidents: false
          id: 35436
          organization_id: 509974
          priority: high
          problem_id: 9873764
          raw_subject: "{{dc.printer_on_fire}}"
          recipient: support@company.com
          requester_id: 20978392
          satisfaction_rating:
            comment: Great support!
            id: 1234
            score: good
          sharing_agreement_ids:
          - 84432
          status: open
          subject: "Help, my printer is on fire!"
          submitter_id: 76872
          tags:
          - enterprise
          - other_tag
          type: incident
          updated_at: 2011-05-05T10:38:52Z
          url: https://company.zendesk.com/api/v2/tickets/35436.json
          via:
            channel: web
    TimeBasedExportIncrementalTicketsResponseExample:
      value:
        count: 2
        end_of_stream: true
        end_time: 1390362485
        next_page: "https://{subdomain}.zendesk.com/api/v2/incremental/tickets.json?per_page=3&start_time=1390362485"
        tickets:
        - assignee_id: 235323
          collaborator_ids:
          - 35334
          - 234
          created_at: 2009-07-20T22:55:29Z
          custom_fields:
          - id: 27642
            value: "745"
          - id: 27648
            value: "yes"
          description: The fire is very colorful.
          due_at: null
          external_id: ahg35h3jh
          follower_ids:
          - 35334
          - 234
          from_messaging_channel: false
          group_id: 98738
          has_incidents: false
          id: 35436
          organization_id: 509974
          priority: high
          problem_id: 9873764
          raw_subject: "{{dc.printer_on_fire}}"
          recipient: support@company.com
          requester_id: 20978392
          satisfaction_rating:
            comment: Great support!
            id: 1234
            score: good
          sharing_agreement_ids:
          - 84432
          status: open
          subject: "Help, my printer is on fire!"
          submitter_id: 76872
          tags:
          - enterprise
          - other_tag
          type: incident
          updated_at: 2011-05-05T10:38:52Z
          url: https://company.zendesk.com/api/v2/tickets/35436.json
          via:
            channel: web
    TimeBasedExportIncrementalUsersResponseExample:
      value:
        count: 1
        end_of_stream: true
        end_time: 1601357503
        next_page: https://example.zendesk.com/api/v2/incremental/ticket_events.json?start_time=1601357503
        users:
        - active: true
          alias: Mr. Johnny
          created_at: 2009-07-20T22:55:29Z
          custom_role_id: 9373643
          details: ""
          email: johnny@example.com
          external_id: sai989sur98w9
          id: 35436
          last_login_at: 2011-05-05T10:38:52Z
          locale: en-US
          locale_id: 1
          moderator: true
          name: Johnny Agent
          notes: Johnny is a nice guy!
          only_private_comments: false
          organization_id: 57542
          phone: "+15551234567"
          photo:
            content_type: image/png
            content_url: https://company.zendesk.com/photos/my_funny_profile_pic.png
            id: 928374
            name: my_funny_profile_pic.png
            size: 166144
            thumbnails:
            - content_type: image/png
              content_url: https://company.zendesk.com/photos/my_funny_profile_pic_thumb.png
              id: 928375
              name: my_funny_profile_pic_thumb.png
              size: 58298
          restricted_agent: true
          role: agent
          role_type: 0
          shared: false
          shared_agent: false
          signature: "Have a nice day, Johnny"
          suspended: true
          tags:
          - enterprise
          - other_tag
          ticket_restriction: assigned
          time_zone: Copenhagen
          updated_at: 2011-05-05T10:38:52Z
          url: https://company.zendesk.com/api/v2/users/35436.json
          user_fields:
            user_date: 2012-07-23T00:00:00Z
            user_decimal: 5.1
            user_dropdown: option_1
          verified: true
    TrialAccountResponseExample:
      value:
        account:
          name: Sample Partner Account
          subdomain: partner12345
          url: https://partner12345.zendesk.com
    TriggerBulkUpdateRequestExample:
      value:
        triggers:
        - id: 25
          position: 5
        - active: false
          id: 26
        - category_id: "10027"
          id: 27
    TriggerDefinitionResponseExample:
      value:
        definitions:
          actions:
          - group: ticket
            nullable: false
            repeatable: false
            subject: status
            title: Status
            type: list
            values:
            - enabled: true
              title: Open
              value: open
            - enabled: true
              title: Pending
              value: pending
            - enabled: true
              title: Solved
              value: solved
            - enabled: true
              title: Closed
              value: closed
          conditions_all:
          - group: ticket
            nullable: false
            operators:
            - terminal: false
              title: Is
              value: is
            - terminal: false
              title: Is not
              value: is_not
            - terminal: false
              title: Less than
              value: less_than
            - terminal: false
              title: Greater than
              value: greater_than
            - terminal: true
              title: Changed
              value: changed
            - terminal: false
              title: Changed to
              value: value
            - terminal: false
              title: Changed from
              value: value_previous
            - terminal: true
              title: Not changed
              value: not_changed
            - terminal: false
              title: Not changed to
              value: not_value
            - terminal: false
              title: Not changed from
              value: not_value_previous
            repeatable: false
            subject: status
            title: Status
            type: list
            values:
            - enabled: true
              title: New
              value: new
            - enabled: true
              title: Open
              value: open
            - enabled: true
              title: Pending
              value: pending
            - enabled: true
              title: Solved
              value: solved
            - enabled: true
              title: Closed
              value: closed
          conditions_any:
          - group: ticket
            nullable: true
            operators:
            - terminal: true
              title: Present
              value: present
            - terminal: true
              title: Not present
              value: not_present
            repeatable: false
            subject: custom_fields_20513432
            title: Happy Gilmore
            type: list
          - group: ticket
            nullable: true
            operators:
            - terminal: true
              title: Present
              value: present
            - terminal: true
              title: Not present
              value: not_present
            repeatable: false
            subject: custom_fields_86492341
            title: total_time_field
            type: list
    TriggerResponseExample:
      value:
        trigger:
          actions: []
          active: true
          category_id: "10026"
          conditions: {}
          created_at: 2012-09-25T22:50:26Z
          description: Close and save a ticket
          id: 25
          position: 8
          raw_title: Close and Save
          title: Close and Save
          updated_at: 2012-09-25T22:50:26Z
          url: "http://{subdomain}.zendesk.com/api/v2/triggers/25.json"
    TriggerRevisionResponseExample:
      value:
        trigger_revision:
          author_id: 3343
          created_at: 2020-05-28T06:41:43Z
          id: 1
          snapshot:
            actions:
            - field: notification_target
              value:
              - "510312"
              - "{}"
            active: true
            conditions:
              all: []
              any:
              - field: current_tags
                operator: includes
                value: fire_bulk_1
            description: null
            title: bulk_test_trigger_1
          url: https://example.zendesk.com/api/v2/triggers/261303831/revisions/1.json
    TriggerRevisionsResponseExample:
      value:
        after_cursor: MTUwMTYwNzUyMi4wfHwxMzQ3NTMxNjcxfA==
        after_url: "https://{subdomain}.zendesk.com/api/v2/triggers/{trigger_id}/revisions.json?cursor=MTUwMTYwNzUyMi4wfHwxMzQ3NTMxNjcxfA%3D%3D&limit=20"
        before_cursor: fDE1MDE1NzUxMjIuMHx8MTM0NzM0MzAxMQ==
        before_url: "https://{subdomain}.zendesk.com/api/v2/triggers/{trigger_id}/revisions.json?cursor=fDE1MDE1NzUxMjIuMHx8MTM0NzM0MzAxMQ%3D%3D&limit=20"
        count: 1
        trigger_revisions:
        - author_id: 2
          created_at: 2016-08-15T16:04:06Z
          diff:
            actions: []
            active: []
            conditions: {}
            description: []
            source_id: 1
            target_id: 2
            title: []
          id: 100
          snapshot:
            actions:
            - field: notification_target
              value:
              - "510312"
              - "{}"
            active: true
            conditions:
              all: []
              any:
              - field: current_tags
                operator: includes
                value: fire_bulk_1
            description: Notifies requester that a comment was updated
            title: Notify requester of comment update
          url: "https://{subdomain}.zendesk.com/api/v2/trigger/123/revisions/100.json"
    TriggerWithCategoryRequestExample:
      value:
        trigger:
          actions:
          - field: group_id
            value: "20455932"
          category_id: "10026"
          conditions:
            all:
            - field: status
              operator: is
              value: open
            - field: priority
              operator: less_than
              value: high
          title: Roger Wilco
    TriggersActiveResponseExample:
      value:
        count: 2
        next_page: null
        previous_page: null
        triggers:
        - actions: []
          active: true
          conditions: {}
          created_at: 2012-09-25T22:50:26Z
          description: Close and save a ticket
          id: 25
          position: 8
          raw_title: Close and Save
          title: Close and Save
          updated_at: 2012-09-25T22:50:26Z
          url: "http://{subdomain}.zendesk.com/api/v2/triggers/25.json"
        - actions: []
          active: true
          conditions:
            all:
            - field: status
              operator: less_than
              value: solved
            - field: assignee_id
              operator: is
              value: "296220096"
            any:
            - field: status
              operator: less_than
              value: solved
          created_at: 2012-09-25T22:50:26Z
          description: Assign a ticket with a priority tag
          id: 26
          position: 9
          raw_title: "{{dc.assign_priority_tag}}"
          title: Assign priority tag
          updated_at: 2012-09-25T22:50:26Z
          url: "http://{subdomain}.zendesk.com/api/v2/triggers/26.json"
    TriggersResponseExample:
      value:
        count: 2
        next_page: null
        previous_page: null
        triggers:
        - actions: []
          active: true
          conditions: {}
          created_at: 2012-09-25T22:50:26Z
          description: Close and save a ticket
          id: 25
          position: 8
          raw_title: Close and Save
          title: Close and Save
          updated_at: 2012-09-25T22:50:26Z
          url: "http://{subdomain}.zendesk.com/api/v2/triggers/25.json"
        - actions: []
          active: false
          conditions:
            all:
            - field: status
              operator: less_than
              value: solved
            - field: assignee_id
              operator: is
              value: "296220096"
            any:
            - field: status
              operator: less_than
              value: solved
            - field: custom_status_id
              operator: includes
              value:
              - "1"
              - "2"
          created_at: 2012-09-25T22:50:26Z
          description: Assign a ticket with a priority tag
          id: 26
          position: 9
          raw_title: "{{dc.assign_priority_tag}}"
          title: Assign priority tag
          updated_at: 2012-09-25T22:50:26Z
          url: "http://{subdomain}.zendesk.com/api/v2/triggers/26.json"
    TriggersSearchResponseExample:
      value:
        count: 2
        next_page: null
        previous_page: null
        triggers:
        - actions: []
          active: true
          conditions:
            all:
            - field: status
              operator: less_than
              value: solved
            - field: assignee_id
              operator: is
              value: "296220096"
            any:
            - field: status
              operator: less_than
              value: solved
          created_at: 2012-09-25T22:50:26Z
          description: Close and save a ticket
          id: 25
          position: 9
          raw_title: Close and Save
          title: Close and Save
          updated_at: 2012-09-25T22:50:26Z
        - actions: []
          active: true
          conditions: {}
          created_at: 2012-09-25T22:50:26Z
          id: 28
          position: 9
          raw_title: "{{dc.close_and_redirect}}"
          title: Close and redirect to topics
          updated_at: 2012-09-25T22:50:26Z
    TwitterChannelResponseExample:
      value:
        monitored_twitter_handle:
          created_at: 2010-05-13T22:07:08Z
          id: 431
          screen_name: '@zendeskops'
          twitter_user_id: 67923318930
          updated_at: 2011-07-22T00:15:19Z
    TwitterChannelTwicketStatusResponseExample:
      value:
        statuses:
        - favorited: true
          id: 834
          retweeted: false
          user_followed: true
    TwitterChannelsResponseExample:
      value:
        monitored_twitter_handles:
        - created_at: 2009-05-13T00:07:08Z
          id: 211
          screen_name: '@zendesk'
          twitter_user_id: 67462376832
          updated_at: 2011-07-22T00:11:12Z
        - created_at: 2010-05-13T22:07:08Z
          id: 431
          screen_name: '@zendeskops'
          twitter_user_id: 67923318930
          updated_at: 2011-07-22T00:15:19Z
    UpdateMacroResponseExample:
      value:
        macro:
          actions:
          - field: status
            value: solved
          active: true
          description: Sets the ticket status to `solved`
          id: 25
          position: 42
          restriction: {}
          title: Close and Save
    UpdateManyUsersRequestExample:
      value:
        user:
          organization_id: 1
    UpdateOrganizationResponseExample:
      value:
        organization:
          created_at: 2018-11-14T00:14:52Z
          details: caterpillar =)
          domain_names:
          - remain.com
          external_id: null
          group_id: 1835962
          id: 4112492
          name: Groablet Enterprises
          notes: Something Interesting
          organization_fields:
            datepudding: 2018-11-04T00:00:00+00:00
            org_field_1: happy happy
            org_field_2: teapot_kettle
          shared_comments: false
          shared_tickets: false
          tags:
          - smiley
          - teapot_kettle
          updated_at: 2018-11-14T00:54:22Z
          url: https://example.zendesk.com/api/v2/organizations/4112492.json
    UpdateUserRequestExample:
      value:
        user:
          name: Roger Wilco II
    UpdateUserResponseExample:
      value:
        user:
          id: 9873843
          name: Roger Wilco II
    UserCountResponseExample:
      value:
        count:
          refreshed_at: 2020-04-06T02:18:17Z
          value: 102
    UserCreateResponseExample:
      value:
        user:
          custom_role_id: 123456
          email: roge@example.org
          id: 9873843
          name: Roger Wilco
          organization_id: 57542
          role: agent
          role_type: 0
    UserFieldCreateResponseExample:
      value:
        user_field:
          active: true
          created_at: 2013-02-27T20:35:55Z
          description: This field describes the support plan this user has
          id: 75
          key: support_description
          position: 0
          raw_description: This field describes the support plan this user has
          raw_title: Support description
          regexp_for_validation: null
          title: Support description
          type: text
          updated_at: 2013-02-27T20:35:55Z
          url: https://company.zendesk.com/api/v2/user_fields/75.json
    UserFieldResponseExample:
      value:
        user_field:
          active: true
          created_at: 2012-10-16T16:04:06Z
          description: Description of Custom Field
          id: 7
          key: custom_field_1
          position: 9999
          raw_description: "{{dc.my_description}}"
          raw_title: Custom Field 1
          regexp_for_validation: null
          title: Custom Field 1
          type: text
          updated_at: 2012-10-16T16:04:06Z
          url: https://company.zendesk.com/api/v2/user_fields/7.json
    UserFieldUpdateResponseExample:
      value:
        user_field:
          active: true
          created_at: 2013-02-27T20:35:55Z
          description: This field describes the support plan this user has
          id: 75
          key: support_description
          position: 0
          raw_description: This field describes the support plan this user has
          raw_title: Support description
          regexp_for_validation: null
          title: Support description
          type: text
          updated_at: 2013-02-27T20:35:55Z
          url: https://company.zendesk.com/api/v2/user_fields/75.json
    UserFieldsResponseExample:
      value:
        count: 1
        next_page: null
        previous_page: null
        user_fields:
        - active: true
          created_at: 2012-10-16T16:04:06Z
          description: Description of Custom Field
          id: 7
          key: custom_field_1
          position: 9999
          raw_description: "{{dc.my_description}}"
          raw_title: Custom Field 1
          regexp_for_validation: null
          title: Custom Field 1
          type: text
          updated_at: 2012-10-16T16:04:06Z
          url: https://company.zendesk.com/api/v2/user_fields/7.json
    UserIdentitiesResponseExample:
      value:
        identities:
        - created_at: 2011-07-20T22:55:29Z
          id: 35436
          primary: true
          type: email
          updated_at: 2011-07-20T22:55:29Z
          user_id: 135
          value: someone@example.com
          verified: true
        - created_at: 2012-02-12T14:25:21Z
          id: 77136
          primary: false
          type: twitter
          updated_at: 2012-02-12T14:25:21Z
          user_id: 135
          value: didgeridooboy
          verified: true
        - created_at: 2012-02-12T14:25:21Z
          id: 88136
          primary: true
          type: phone_number
          updated_at: 2012-02-12T14:25:21Z
          user_id: 135
          value: +1 555-123-4567
          verified: true
    UserIdentityCreateResponseExample:
      value:
        identity:
          created_at: 2012-02-12T14:25:21Z
          id: 77938
          primary: false
          type: twitter
          updated_at: 2012-02-12T14:25:21Z
          user_id: 13531
          value: cabanaboy
          verified: false
    UserIdentityResponseExample:
      value:
        identity:
          created_at: 2012-02-12T14:25:21Z
          id: 77938
          primary: false
          type: twitter
          updated_at: 2012-02-12T14:25:21Z
          user_id: 13531
          value: cabanaboy
          verified: false
    UserIdentityUpdateResponseExample:
      value:
        identity:
          created_at: 2011-07-20T22:55:29Z
          deliverable_state: deliverable
          id: 35436
          primary: true
          type: email
          updated_at: 2011-07-20T22:55:29Z
          user_id: 135
          value: someone@example.com
          verified: true
    UserPasswordRequirementsResponseExample:
      value:
        requirements:
        - must be at least 5 characters
        - must be different from email address
    UserRelatedResponseExample:
      value:
        user_related:
          assigned_tickets: 5
          ccd_tickets: 3
          organization_subscriptions: 1
          requested_tickets: 10
    UserRequestExample:
      value:
        user:
          custom_role_id: 123456
          email: roge@example.org
          identities:
          - type: email
            value: test@user.com
          - type: twitter
            value: tester84
          name: Roger Wilco
          organization:
            name: VIP Customers
          role: agent
    UserResponseExample:
      value:
        user:
          id: 35436
          name: Johnny Agent
    UsersCreateManyRequestExample:
      value:
        users:
        - email: roge@example.org
          name: Roger Wilco
          organization_id: 567812345
          role: agent
        - email: woge@example.org
          name: Woger Rilco
          role: admin
    UsersRequestExample:
      value:
        users:
        - custom_role_id: 123456
          email: roge@example.org
          identities:
          - type: email
            value: test@user.com
          - type: twitter
            value: tester84
          name: Roger Wilco
          organization:
            name: VIP Customers
          role: agent
        - email: woge@example.org
          external_id: account_54321
          name: Woger Rilco
          role: admin
    UsersResponseExample:
      value:
        users:
        - id: 223443
          name: Johnny Agent
        - id: 8678530
          name: James A. Rosen
    ViewCountResponseExample:
      value:
        view_count:
          fresh: true
          pretty: "~700"
          url: https://company.zendesk.com/api/v2/views/25/count.json
          value: 719
          view_id: 25
    ViewCountsResponseExample:
      value:
        view_counts:
        - fresh: true
          pretty: "~700"
          url: https://company.zendesk.com/api/v2/views/25/count.json
          value: 719
          view_id: 25
        - fresh: false
          pretty: '...'
          url: https://company.zendesk.com/api/v2/views/78/count.json
          value: null
          view_id: 78
    ViewCreateResponseExample:
      value:
        view:
          active: true
          conditions:
            all:
            - field: status
              operator: is
              value: open
            - field: priority
              operator: less_than
              value: high
            any:
            - field: current_tags
              operator: includes
              value: hello
          id: 9873843
          title: Roger Wilco
    ViewExecuteResponseExample:
      value:
        columns:
        - id: locale
          title: Locale
        - id: 5
          title: Account
        groups: []
        rows:
        - group: 1
          locale: en-US
          ticket: {}
        view:
          id: 25
    ViewExportResponseExample:
      value:
        export:
          status: starting
          view_id: 25
    ViewListTicketsResponseEXample:
      value:
        tickets:
        - id: 35436
          requester_id: 20978392
          subject: Help I need somebody!
        - id: 20057623
          requester_id: 20978392
          subject: Not just anybody!
    ViewPreviewResponseExample:
      value:
        columns:
        - id: subject
          title: Subject
        rows:
        - subject: en-US
          ticket: {}
    ViewResponseExample:
      value:
        view:
          active: true
          conditions: {}
          description: View for recent tickets
          execution: {}
          id: 25
          position: 3
          restriction: {}
          title: Tickets updated less than 12 Hours
    ViewUpdateResponseExample:
      value:
        view:
          active: true
          conditions: {}
          description: View for recent tickets
          execution: {}
          id: 25
          position: 3
          restriction: {}
          title: Roger Wilco II
    ViewsActiveResponseExample:
      value:
        count: 2
        next_page: null
        previous_page: null
        views:
        - active: true
          conditions: {}
          description: View for recent tickets
          execution: {}
          id: 25
          position: 3
          restriction: {}
          title: Tickets updated less than 12 Hours
        - active: true
          conditions: {}
          description: View for tickets that are not assigned
          execution: {}
          id: 23
          position: 7
          restriction: {}
          title: Unassigned tickets
    ViewsCountResponseExample:
      value:
        count:
          refreshed_at: 2020-04-06T02:18:17Z
          value: 16
    ViewsResponseExample:
      value:
        count: 2
        next_page: null
        previous_page: null
        views:
        - active: true
          conditions: {}
          description: View for recent tickets
          execution: {}
          id: 25
          position: 3
          restriction: {}
          title: Tickets updated less than 12 Hours
        - active: false
          conditions: {}
          description: View for tickets that are not assigned
          execution: {}
          id: 23
          position: 7
          restriction: {}
          title: Unassigned tickets
    ViewsUpdateManyResponseExample:
      value:
        views:
        - active: true
          conditions: {}
          description: View for recent tickets
          execution: {}
          id: 123
          position: 8
          restriction: {}
          title: Tickets updated less than 12 Hours
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
